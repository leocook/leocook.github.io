<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>leocook</title>
    <description></description>
    <link>http://leocook.github.io/</link>
    <atom:link href="http://leocook.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 26 Jul 2017 16:55:49 +0800</pubDate>
    <lastBuildDate>Wed, 26 Jul 2017 16:55:49 +0800</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Java并发(六)：reentrantlock、synchronized</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;实现原理上的区别&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#reentrantlock&quot; id=&quot;markdown-toc-reentrantlock&quot;&gt;ReentrantLock&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#synchronized&quot; id=&quot;markdown-toc-synchronized&quot;&gt;synchronized&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#api&quot; id=&quot;markdown-toc-api&quot;&gt;API使用上的区别&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;锁的范围&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#reentrantlock-1&quot; id=&quot;markdown-toc-reentrantlock-1&quot;&gt;ReentrantLock&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#synchronized-1&quot; id=&quot;markdown-toc-synchronized-1&quot;&gt;synchronized&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#reentrantlock-2&quot; id=&quot;markdown-toc-reentrantlock-2&quot;&gt;ReentrantLock源码解析&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;内部类&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#sync&quot; id=&quot;markdown-toc-sync&quot;&gt;Sync&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#nonfairsync&quot; id=&quot;markdown-toc-nonfairsync&quot;&gt;NonfairSync&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#fairsync&quot; id=&quot;markdown-toc-fairsync&quot;&gt;FairSync&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;关键方法&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ReentrantLock是基于AQS设计的可重入锁，synchronized是基于对象监视器实现的可重入锁。使用了它们后，代码都会具有原子性（atomicity）和 可见性（visibility）。&lt;/p&gt;

&lt;p&gt;可重入锁也被称为递归锁，指同一个线程内，外层代码锁未被释放时，内层代码也可以获取到锁，递归就是一种很常见的场景。下面就是可重入锁的一种使用场景：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Demo{
    Lock lock = new Lock();
    public void outer(){
        lock.lock();
        inner();
        lock.unlock();
    }
    public void inner(){
        lock.lock();
        //do something
        lock.unlock();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ReentrantLock和synchronized在并发编程中，有着相同的语义，但是它们实现的原理存在着较大的差异，在设计的思想上更是有着很多不同之处。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;实现原理上的区别&lt;/h3&gt;

&lt;h4 id=&quot;reentrantlock&quot;&gt;ReentrantLock&lt;/h4&gt;
&lt;p&gt;ReentrantLock是基于AQS实现的锁，我们知道AQS是调用了LockSupport类的park和unpark方法来实现阻塞和唤醒的。
如果之前看过&lt;a href=&quot;http://www.leocook.org/2017/07/08/Java%E5%B9%B6%E5%8F%91(%E5%9B%9B)-LockSupport/&quot;&gt;Java并发(四)：locksupport&lt;/a&gt;这篇文章的话，应该很好理解：ReentrantLock是通过一个&lt;code&gt;_counter&lt;/code&gt;变量来标记阻塞状态的。&lt;br /&gt;
阅读ReentrantLock源码可以发现，AQS中的state字段在ReentrantLock中也被用作记录锁的重入次数（也就是同一个线程同时获得锁的次数），当state的值为0时，则表示资源没有被其它锁占用。&lt;/p&gt;

&lt;h4 id=&quot;synchronized&quot;&gt;synchronized&lt;/h4&gt;
&lt;p&gt;在JVM中，对象（this）或者类（SomeClass.class）都会被分配一个监视器(Monitor)。Monitor可以理解为一种同步工具，也可以理解为伴随着对象实例的一种JVM内部对象。&lt;br /&gt;
synchronized关键字是使用了对象监视器(Monitor)来标识资源是否被锁占用，我们将下边代码反进行反编译：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 * 同步代码块
 */
public void method1(){
    synchronized (this){
        System.out.println(&quot;method1 start&quot;);
    }
}

/**
 * 同步方法
 */
public synchronized void method2(){
    System.out.println(&quot;method2 start&quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;反编译后，我们可以看到字节码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public void method1();
    flags: ACC_PUBLIC
    Code:
      stack=2, locals=3, args_size=1
         0: aload_0
         1: dup
         2: astore_1
         3: monitorenter
         4: getstatic     #2    // Field java/lang/System.out:Ljava/io/PrintStream;
         7: ldc           #3    // String method1 start
         9: invokevirtual #4    // Method java/io/PrintStream.println:(Ljava/lang/String;)V
        12: aload_1
        13: monitorexit
        14: goto          22
        17: astore_2
        18: aload_1
        19: monitorexit
        20: aload_2
        21: athrow
        22: return
      Exception table:
         from    to  target type
             4    14    17   any
            17    20    17   any
      LineNumberTable:
        line 12: 0
        line 13: 4
        line 14: 12
        line 15: 22
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
               0      23     0  this   Lcom/xxx/bi/ThreadDemo;
      StackMapTable: number_of_entries = 2
           frame_type = 255 /* full_frame */
          offset_delta = 17
          locals = [ class com/xxx/bi/ThreadDemo, class java/lang/Object ]
          stack = [ class java/lang/Throwable ]
           frame_type = 250 /* chop */
          offset_delta = 4


  public synchronized void method2();
    flags: ACC_PUBLIC, ACC_SYNCHRONIZED
    Code:
      stack=2, locals=1, args_size=1
         0: getstatic     #2    // Field java/lang/System.out:Ljava/io/PrintStream;
         3: ldc           #5    // String method2 start
         5: invokevirtual #4    // Method java/io/PrintStream.println:(Ljava/lang/String;)V
         8: return
      LineNumberTable:
        line 19: 0
        line 20: 8
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
               0       9     0  this   Lcom/xxx/bi/ThreadDemo;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;阅读上面字节码，我们可以从两个方面来看：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;synchronized同步代码块(method1)&lt;/strong&gt;&lt;br /&gt;
我们能看到在进入同步代码块时，会执行&lt;code&gt;monitorenter&lt;/code&gt;(占用监视器)，退出代码块时会执行&lt;code&gt;monitorexit&lt;/code&gt;(退出监视器)。&lt;br /&gt;
  &lt;strong&gt;关于monitorenter&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;若monitor的entry count为0，则该线程进入monitor，然后将entry count设置为1，该线程成为了monitor的所有者；&lt;/li&gt;
      &lt;li&gt;若monitor的entry count不为0，且该进程已经占用了monitor，则线程只是重新进入该代码块，且entry count加1；&lt;/li&gt;
      &lt;li&gt;若monitor的entry count不为0，且被其它进程已经占用了monitor，则该线程进入阻塞状态，直到monitor的entry count为0时，再重新尝试成为monitor的所有者；&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;strong&gt;关于monitorexit&lt;/strong&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;指令执行的时候，monitor的entry count减1，当减1后为0的时候，释放monitor不在占有。其它被这个monitor阻塞的线程开始尝试获取该monitor的所有权。&lt;/li&gt;
      &lt;li&gt;object的wait/notify方法是依赖monitor的，所以只能在同步代码块或者方法中才能调用wait/notify等方法，否则会抛出异常。
执行monitorexit必须是某个已经占用了monitor的线程的对象实例。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;synchronized同步方法(method2)&lt;/strong&gt;&lt;br /&gt;
我们可以看出该方法的access_flags中存在&lt;code&gt;ACC_SYNCHRONIZED&lt;/code&gt;标签，该method加上了该标签之后，可以理解进入方法的时候，会做和monitorenter一样的事情，当退出方法的时候将会作出和monitorexit一样的事情。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关于synchronized，有下面几个总结：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;1.使用同步代码块后，JVM会用monitorenter和monitorexit指令完成同步。&lt;br /&gt;
2.使用同步方法后，JVM会使用方法的访问修饰符ACC_SYNCHRONIZED来完成同步。&lt;br /&gt;
3.synchronized只能持有一个对象监视器。&lt;br /&gt;
4.synchronized强制所有锁的获取和释放都在一个代码块中。&lt;br /&gt;
5.synchronized对锁的释放是隐式的。运行超出代码块时，自动释放。&lt;br /&gt;
6.synchronized在释放了monitor之后，随机选取新的线程获取monitor。当线程数多的时候，可能会导致部分线程一直获取不到锁&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;api&quot;&gt;API使用上的区别&lt;/h3&gt;

&lt;p&gt;何时获取锁、何时释放锁，&lt;code&gt;ReentrantLock&lt;/code&gt;相对来说更自由，可以由开发者自己来决定，且支持多个条件变量。但&lt;code&gt;synchronized&lt;/code&gt;却不行，只能被动的在synchronized代码范围结束时释放锁。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ReentrantLock&lt;/code&gt;还支持公平锁和非公平锁，在一些需要保证线程FIFO获取锁的场景下，可以使用ReentrantLock的公平锁，synchronized是没有这个特性的。&lt;br /&gt;
但是为了避免出现死锁，&lt;code&gt;ReentrantLock&lt;/code&gt;的锁必须在finally中释放，例如下面代码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Lock lock = new ReentrantLock();
lock.lock();
try { 
  // do something
}
finally {
  lock.unlock(); 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;所以在使用&lt;code&gt;ReentrantLock&lt;/code&gt;时需要慎重！&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;锁的范围&lt;/h3&gt;
&lt;p&gt;关于锁的范围我是这么理解的，如果某个类的对象中存在一把锁可以被该类的所有对象访问，那么这个锁就是类级别的锁；如果某个类的对象中存在一把锁只能被该对象访问，那么这个锁就是对象级别的锁。其实这样解释不是很严谨，下面具体看例子。&lt;/p&gt;

&lt;h4 id=&quot;reentrantlock-1&quot;&gt;ReentrantLock&lt;/h4&gt;
&lt;p&gt;当ReentrantLock对象是静态的时候就是类级别的锁，否则锁就是对象级别的锁。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//类级别的锁
static Lock lock1 = new ReentrantLock();

//对象级别的锁
Lock lock2 = new ReentrantLock();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;synchronized-1&quot;&gt;synchronized&lt;/h4&gt;
&lt;p&gt;当synchronized同步的变量或者方法是静态的时候，锁就是类级别的锁，否则就是对象级别的锁&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;类级别的锁&lt;br /&gt;
这里使用的是类监视器&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//变量
static int count = 0;
synchronized(count){
    //...
}

//方法
public synchronized static void method(){
    //...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;对象级别的锁&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//变量
int count = 0;
synchronized(count){
    //...
}

//类加载器
synchronized(Demo2.class){
    //...
}
//或者
synchronized(this.getClass()){
    //...
}

//方法
public synchronized void method(){
    //...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;reentrantlock-2&quot;&gt;ReentrantLock源码解析&lt;/h2&gt;
&lt;p&gt;如果阅读过看AQS的相关源码，查看ReentrantLock类源码将会很轻松的。阅读ReentrantLock源码时主要就是查看它&lt;code&gt;三个静态内部类的实现&lt;/code&gt;，以及&lt;code&gt;公平锁&lt;/code&gt;和&lt;code&gt;非公平锁&lt;/code&gt;的实现差异。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;在查看源码的时候需要注意，在实现ReentrantLock的时候，AbstractQueuedSynchronizer类中的&lt;code&gt;state&lt;/code&gt;字段的作用是记录重入锁的重入次数，每次获取锁的时候state字段值加一，释放锁的时候state值减一。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-2&quot;&gt;内部类&lt;/h3&gt;
&lt;p&gt;主要有这三个静态内部类&lt;code&gt;java.util.concurrent.locks.ReentrantLock.Sync&lt;/code&gt;、&lt;code&gt;java.util.concurrent.locks.ReentrantLock.NonfairSync&lt;/code&gt;以及&lt;code&gt;java.util.concurrent.locks.ReentrantLock.FairSync&lt;/code&gt;。Sync类是另外两个的父类，NonfairSync类实现的是非公平锁，FairSync类实现的是公平锁。&lt;/p&gt;

&lt;h4 id=&quot;sync&quot;&gt;Sync&lt;/h4&gt;
&lt;p&gt;Sync类是一个抽象类，它主要声明了&lt;code&gt;lock抽象方法&lt;/code&gt;,实现了获取非公平锁的方法&lt;code&gt;nonfairTryAcquire&lt;/code&gt;，以及释放锁的方法&lt;code&gt;tryRelease&lt;/code&gt;。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;final boolean nonfairTryAcquire(int acquires)&lt;br /&gt;
尝试获取非公平锁。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;final boolean nonfairTryAcquire(int acquires) {
    final Thread current = Thread.currentThread();
    int c = getState();
    if (c == 0) {
        //重入次数为0, 锁未被占用时,直接占用就可以了
        if (compareAndSetState(0, acquires)) {
            setExclusiveOwnerThread(current);
            return true;
        }
    }
    else if (current == getExclusiveOwnerThread()) {//锁已经被当前线程占用了
        int nextc = c + acquires;   //重入次数加1
        if (nextc &amp;lt; 0) // overflow  重入次数超过int范围的时候,报错
            throw new Error(&quot;Maximum lock count exceeded&quot;);
        setState(nextc);    //更新重入次数
        return true;
    }

    //锁已经被其它线程占用了
    return false;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;protected final boolean tryRelease(int releases)&lt;br /&gt;
尝试释放锁，当重入计数器state值变为0后，表示以及没有锁的占用了。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;protected final boolean tryRelease(int releases) {
    //重入次数减一
    int c = getState() - releases;

    //当前的线程不可以释放其它线程的锁
    if (Thread.currentThread() != getExclusiveOwnerThread())
        throw new IllegalMonitorStateException();

    boolean free = false;
    if (c == 0) { //当state为0时,说明锁已经完全释放了
        free = true;
        setExclusiveOwnerThread(null);
    }
    setState(c);
    return free;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;nonfairsync&quot;&gt;NonfairSync&lt;/h4&gt;
&lt;p&gt;非公平锁的实现，主要是实现了lock方法。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//获取锁
final void lock() {
    //判断一下锁是否已经被获取:
    //若锁已经被获取,则进入阻塞;否则直接获取
    if (compareAndSetState(0, 1)) //CAS判断锁是否已经被获取
        //符合条件
        setExclusiveOwnerThread(Thread.currentThread()); //直接锁定
    else
        //锁已经被获取,调用AQS尝试获取锁以及进入阻塞
        acquire(1);
}

//尝试获取锁，被AQS调用
protected final boolean tryAcquire(int acquires) {
    return nonfairTryAcquire(acquires);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;fairsync&quot;&gt;FairSync&lt;/h4&gt;
&lt;p&gt;公平锁的实现&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 * 由于需要判断是否公平,所以和NonfairSync#lock()的实现稍有不同,并没有在AQS的state值为0时,立马获取到锁。
 */
final void lock() {
    acquire(1);
}

/**
 * 除了多调用了hasQueuedPredecessors方法,其它和和nonfairTryAcquire几乎一样
 */
protected final boolean tryAcquire(int acquires) {
    final Thread current = Thread.currentThread();
    int c = getState(); //获取到重入次数
    if (c == 0) {
        //未重入过
        if (!hasQueuedPredecessors()/*查看是否有比当前线程等待更久的线程,有就返回true(不通过),没有就返回false(通过),和nonfairTryAcquire相比,只多出了这一块*/ &amp;amp;&amp;amp;
            compareAndSetState(0, acquires)) {
            setExclusiveOwnerThread(current);
            return true;
        }
    }
    else if (current == getExclusiveOwnerThread()) {
        int nextc = c + acquires;
        if (nextc &amp;lt; 0)
            throw new Error(&quot;Maximum lock count exceeded&quot;);
        setState(nextc);
        return true;
    }
    return false;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;对比&lt;code&gt;ReentrantLock.Sync#nonfairTryAcquire&lt;/code&gt;方法的实现，我可以看出公平锁中多调用了方法&lt;code&gt;java.util.concurrent.locks.AbstractQueuedSynchronizer#hasQueuedPredecessors&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 * 查看是否有比当前线程等待更久的线程,有就返回true,没有就返回false.&amp;lt;br /&amp;gt;
 *
 * 若存在比当前线程等待还要久的线程需要满足下面2个条件中的任意一个即可:
 * 1. 线程等待队列中存在等待的线程,且线程不是队列中的第一个线程;  
 * 2. 线程等待队列中存在等待的线程,其它线程正在初始化线程队列,已经修改好了tail指针，但head的next指针还没有修改好，导致head.next为空，可以查看方法java.util.concurrent.locks.AbstractQueuedSynchronizer#enq
 *
 */
public final boolean hasQueuedPredecessors() {
    // thread is first in queue.
    Node t = tail; // Read fields in reverse initialization order
    Node h = head;
    Node s;
    return h != t &amp;amp;&amp;amp;
            ((s = h.next) == null || s.thread != Thread.currentThread());
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这段代码有点饶人，其实简单理解，就是判断线程队列中，当前线程前边有没有其它线程，是的话返回true，没有的话就返回false。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;关键方法&lt;/h3&gt;
&lt;p&gt;平时用的比较多的方法就是&lt;code&gt;lock&lt;/code&gt;和&lt;code&gt;unlock&lt;/code&gt;。截止到jdk1.7时&lt;code&gt;ReentrantLock&lt;/code&gt;类的很多方法都是对&lt;code&gt;Sync&lt;/code&gt;类的二次封装。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//创建非公平锁
Lock lock1 = new ReentrantLock();
Lock lock2 = new ReentrantLock(false);

//创建公平锁
Lock lock3 = new ReentrantLock(true);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-4&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;ReentrantLock是一个基于AQS实现的高性能的可重入锁，相比synchronized来说使用时更灵活、且效率更高。&lt;br /&gt;
如果对线程调用的顺序不是很关系，可以使用非公平锁；否则就使用公平锁。非公平锁的性能是优于公平锁的。&lt;br /&gt;
相比synchronized来说，ReentrantLock太过灵活，新手使用很容易出现问题，unlock的代码务必写到&lt;code&gt;finally&lt;/code&gt;代码块中。&lt;/p&gt;
</description>
        <pubDate>Sun, 16 Jul 2017 00:00:00 +0800</pubDate>
        <link>http://leocook.github.io/2017/07/16/Java%E5%B9%B6%E5%8F%91(%E5%85%AD)-ReentrantLock-synchronized/</link>
        <guid isPermaLink="true">http://leocook.github.io/2017/07/16/Java%E5%B9%B6%E5%8F%91(%E5%85%AD)-ReentrantLock-synchronized/</guid>
        
        <category>ReentrantLock</category>
        
        <category>synchronized</category>
        
        
        <category>java</category>
        
      </item>
    
      <item>
        <title>Java并发(五)：aqs框架</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#aqs&quot; id=&quot;markdown-toc-aqs&quot;&gt;AQS概括&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#aqs-1&quot; id=&quot;markdown-toc-aqs-1&quot;&gt;AQS的关键点有三个&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#aqs-2&quot; id=&quot;markdown-toc-aqs-2&quot;&gt;AQS中的关键字段&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#aqs-3&quot; id=&quot;markdown-toc-aqs-3&quot;&gt;AQS中的关键方法&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#clh-lock-queue&quot; id=&quot;markdown-toc-clh-lock-queue&quot;&gt;CLH lock queue和自旋锁&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#clh-lock-queue-1&quot; id=&quot;markdown-toc-clh-lock-queue-1&quot;&gt;CLH lock queue&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#spin-lock&quot; id=&quot;markdown-toc-spin-lock&quot;&gt;Spin Lock（自旋锁）&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#javautilconcurrentlocksabstractqueuedsynchronizernode&quot; id=&quot;markdown-toc-javautilconcurrentlocksabstractqueuedsynchronizernode&quot;&gt;java.util.concurrent.locks.AbstractQueuedSynchronizer.Node类&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#aqs-4&quot; id=&quot;markdown-toc-aqs-4&quot;&gt;AQS详解&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#clh-lock-queue-2&quot; id=&quot;markdown-toc-clh-lock-queue-2&quot;&gt;CLH lock queue的维护&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;独占模式的实现&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;独占模式的获取&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;独占模式的释放&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;共享模式的实现&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;共享模式的获取&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-5&quot; id=&quot;markdown-toc-section-5&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关键词：AQS CLH&lt;/p&gt;

&lt;p&gt;&lt;code&gt;AQS&lt;/code&gt;指的是&lt;code&gt;java.util.concurrent.locks.AbstractQueuedSynchronizer&lt;/code&gt;这个类，在阅读Jdk源码时，你会发现这个类是&lt;code&gt;java.util.concurrent&lt;/code&gt;包的核心。
例如在&lt;code&gt;ReentrantLock&lt;/code&gt;、&lt;code&gt;ReentrantReadWriteLock&lt;/code&gt;、&lt;code&gt;CountDownLatch&lt;/code&gt;等类中存在内部类&lt;code&gt;Sync&lt;/code&gt;，都是用了AQS。如果想清楚整个Java的并发体系，这个类必读不可。&lt;/p&gt;

&lt;h3 id=&quot;aqs&quot;&gt;AQS概括&lt;/h3&gt;

&lt;p&gt;先说说几个概念&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;独占锁&amp;amp;共享共享锁
    &lt;ul&gt;
      &lt;li&gt;独占锁&lt;br /&gt;
  资源最多同时只能被一个线程占用&lt;/li&gt;
      &lt;li&gt;共享共享锁&lt;br /&gt;
  资源同时可以被多个线程占用&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;公平锁&amp;amp;非公平锁
    &lt;ul&gt;
      &lt;li&gt;公平锁&lt;br /&gt;
  线程按照提交的顺序依次去获取资源，按照一定的优先级来，FIFO&lt;/li&gt;
      &lt;li&gt;非公平锁&lt;br /&gt;
  线程获取资源的顺序是无序的&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;AQS中的线程阻塞队列是基于&lt;code&gt;CLH lock queue&lt;/code&gt;来实现的，后边会重点说明一下。&lt;/p&gt;

&lt;h4 id=&quot;aqs-1&quot;&gt;AQS的关键点有三个&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;提供变量&lt;code&gt;state&lt;/code&gt;来维护状态&lt;/li&gt;
  &lt;li&gt;维护线程阻塞队列&lt;/li&gt;
  &lt;li&gt;阻塞和唤醒线程&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;aqs-2&quot;&gt;AQS中的关键字段&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;private volatile int state;&lt;br /&gt;
同步状态，通过设置state来达到同步的效果.&lt;code&gt;该字段在不同的子类中，代表的意义是不同的&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;private transient volatile Node tail;&lt;br /&gt;
线程等待队列的尾部，只有&lt;code&gt;enq&lt;/code&gt;方法在向队列添加新线程时，才会修改该值&lt;/li&gt;
  &lt;li&gt;private transient volatile Node head;&lt;br /&gt;
线程等待队列的头部&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面是offset相关的变量，主要是为了提供CAS操作而设立的变量：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;private static final long stateOffset;&lt;br /&gt;
同步状态的offset&lt;/li&gt;
  &lt;li&gt;private static final long headOffset;&lt;br /&gt;
等待队列头的offset&lt;/li&gt;
  &lt;li&gt;private static final long tailOffset;&lt;br /&gt;
等待队列尾的offset&lt;/li&gt;
  &lt;li&gt;private static final long waitStatusOffset;&lt;br /&gt;
当前节点的等待状态的offset&lt;/li&gt;
  &lt;li&gt;private static final long nextOffset;&lt;br /&gt;
当前节点的下一个节点offset&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;aqs-3&quot;&gt;AQS中的关键方法&lt;/h4&gt;
&lt;p&gt;已经实现的方法如下&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;public final void acquire(int arg)&lt;br /&gt;
获取锁，一般会调用acquire(1)来获取。&lt;/li&gt;
  &lt;li&gt;public final boolean release(int arg)&lt;br /&gt;
释放锁，一般会调用release(1)来释放。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;需要被子类实现的方法&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;protected boolean tryAcquire(int arg)&lt;br /&gt;
尝试获取独占锁,在获取前会检查同步状态是否允许获取独占锁。获取成功则返回true，返回false则把线程加入到等待队列。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;protected boolean tryRelease(int arg)&lt;br /&gt;
尝试通过设置同步状态，来释放独占锁。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;protected int tryAcquireShared(int arg)&lt;br /&gt;
尝试获取共享锁,在获取前会检查同步状态是否允许获取共享锁。获取成功则返回true，返回false则把线程加入到等待队列。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;protected boolean tryReleaseShared(int arg)&lt;br /&gt;
尝试通过设置同步状态，来释放共享锁。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;clh-lock-queue&quot;&gt;CLH lock queue和自旋锁&lt;/h3&gt;

&lt;h4 id=&quot;clh-lock-queue-1&quot;&gt;CLH lock queue&lt;/h4&gt;
&lt;p&gt;CLH lock queue是一个存放线程的FIFO队列，队列中的每个线程都在等待它前一个线程释放锁，前面的线程释放了锁之后，该线程将会开始回解除锁并开始执行线程。&lt;/p&gt;

&lt;h4 id=&quot;spin-lock&quot;&gt;Spin Lock（自旋锁）&lt;/h4&gt;
&lt;p&gt;是线程通过循环来等待而不是睡眠。&lt;/p&gt;

&lt;h4 id=&quot;javautilconcurrentlocksabstractqueuedsynchronizernode&quot;&gt;java.util.concurrent.locks.AbstractQueuedSynchronizer.Node类&lt;/h4&gt;

&lt;p&gt;该类实现了&lt;code&gt;CLH lock queue&lt;/code&gt;的一个变种，它的数据结构大致如下：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      +------+  prev +-----+       +-----+
 head |      | &amp;lt;---- |     | &amp;lt;---- |     |  tail
      +------+       +-----+       +-----+
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;图中没有把next指向描述出来。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;关键字段
    &lt;ul&gt;
      &lt;li&gt;SHARED&lt;br /&gt;
  共享模式的节点常量，供其方式使用&lt;/li&gt;
      &lt;li&gt;EXCLUSIVE&lt;br /&gt;
  独占模式的节点常量，供其方式使用&lt;/li&gt;
      &lt;li&gt;waitStatus&lt;br /&gt;
  当前节点/线程的等待状态,该变量会有下面几个值：CANCELLED/SIGNAL/CONDITION/PROPAGATE&lt;/li&gt;
      &lt;li&gt;CANCELLED&lt;br /&gt;
  由于超时或者中断线程被中断，节点/线程的状态变为该值时，状态将不会发生变化，可以理解线程被中断之后，就停止了，状态自然不会发生什么变化了。&lt;/li&gt;
      &lt;li&gt;SIGNAL&lt;br /&gt;
  表示当前节点以及成功执行,等待unpark&lt;/li&gt;
      &lt;li&gt;CONDITION&lt;br /&gt;
  标识线程在condition queue中处于等待状态,等待某一个条件&lt;/li&gt;
      &lt;li&gt;PROPAGATE&lt;br /&gt;
  后续结点会传播唤醒的操作，共享锁可执行,独占锁不可&lt;/li&gt;
      &lt;li&gt;prev&lt;br /&gt;
  等待队列中，该节点的上一个节点&lt;/li&gt;
      &lt;li&gt;next&lt;br /&gt;
  等待队列中，该节点的下一个节点&lt;/li&gt;
      &lt;li&gt;thread&lt;br /&gt;
  当前的线程&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;关键方法&lt;br /&gt;
其实没有什么重要的方法需要在这里提，&lt;code&gt;Node&lt;/code&gt;这个类就是个用来实现双向队列的数据结构，它是双向队列中的一个节点。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;aqs-4&quot;&gt;AQS详解&lt;/h3&gt;
&lt;p&gt;在“AQS概括”中已经简单的描述了一些关键的字段和方法，相信在了解了&lt;code&gt;CLH lock queue&lt;/code&gt;、&lt;code&gt;自旋锁&lt;/code&gt;，以及&lt;code&gt;LockSupport&lt;/code&gt;类的设计和实现之后，再回过头来查看AQS内部的实现细节将会很轻松。
AQS重要实现了这几个重要的功能，CLH lock queue的维护、独占模式的获取/释放、共享模式的获取/释放。&lt;/p&gt;

&lt;h4 id=&quot;clh-lock-queue-2&quot;&gt;CLH lock queue的维护&lt;/h4&gt;
&lt;p&gt;我们知道AQS维护了一个FIFO的队列，那肯定就有入队和出队的操作。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CLH lock queue入队&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private Node addWaiter(Node mode) {
    Node node = new Node(Thread.currentThread(), mode);
    // Try the fast path of enq; backup to full enq on failure
    Node pred = tail;
    if (pred != null) {
        node.prev = pred;
        if (compareAndSetTail(pred, node)) {
            pred.next = node;
            return node;
        }
    }
    enq(node); //把节点放入队列
    return node;
}

private Node enq(final Node node) {
    for (;;) {
        Node t = tail;
        if (t == null) { // Must initialize
            if (compareAndSetHead(new Node()))
                tail = head;
        } else {
            node.prev = t;
            if (compareAndSetTail(t, node)) {
                t.next = node;
                return t;
            }
        }
    }
}

private final boolean compareAndSetTail(Node expect, Node update) {
    return unsafe.compareAndSwapObject(this, tailOffset, expect, update);
}

private final boolean compareAndSetHead(Node update) {
    return unsafe.compareAndSwapObject(this, headOffset, null, update);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;当队列不为空时，节点添加到队列前，队列状态如下图所示：
&lt;img src=&quot;http://7xriy2.com1.z0.glb.clouddn.com/queue-notnull-before.png&quot; alt=&quot;queue-notnull-before&quot; /&gt;&lt;/p&gt;

&lt;p&gt;节点加入队列的过程如下图所示：
&lt;img src=&quot;http://7xriy2.com1.z0.glb.clouddn.com/queue-notnull-after.png&quot; alt=&quot;queue-notnull-after&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当队列为空时，首次加入节点会进行一些初始化，具体的操作过程可以看下图：
&lt;img src=&quot;http://7xriy2.com1.z0.glb.clouddn.com/queue-null-init.png&quot; alt=&quot;queue-null-init&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CLH lock queue出队&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private void setHead(Node node) {
    head = node;
    node.thread = null;
    node.prev = null;
} 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section&quot;&gt;独占模式的实现&lt;/h4&gt;

&lt;h5 id=&quot;section-1&quot;&gt;独占模式的获取&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public final void acquire(int arg) {
    if (!tryAcquire(arg)/*尝试获取锁*/ &amp;amp;&amp;amp;
        acquireQueued(addWaiter(Node.EXCLUSIVE/*设置为独占锁状态,并把当前线程放入了队列中*/), arg)/*放入队列后,阻塞该线程*/)
        selfInterrupt(); //若park的原因是线程被interrupt掉了,则中断线程
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;这块的原理大概如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;先通过&lt;code&gt;tryAcquire&lt;/code&gt;来尝试获取锁，如果能获取到锁的话就返回；否则加入到队列，并阻塞线程；&lt;/li&gt;
  &lt;li&gt;线程退出阻塞的时候，通过&lt;code&gt;Thread.interrupted()&lt;/code&gt;来判断线程是否是因为被中断才退出park的，若是的话，则中断当前线程。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;具体我们可以查阅下面这几个方法的源码：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;acquireQueued&lt;br /&gt;
线程节点之前以及加入到队列中了，该方法将要阻塞该线程，在退出阻塞的时候，返回该线程是否是被中断退出的。
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;final boolean acquireQueued(final Node node, int arg) {
  boolean failed = true;
  try {
      boolean interrupted = false;

      //自旋锁,double check
      //等待前面的节点释放锁
      for (;;) {
          final Node p = node.predecessor(); //获取该节点的上一个节点

          //如果前继节点就是head,现在就可以直接去尝试获取锁,如果没有其它线程的干扰,肯定是能够获取到的
          if (p == head/*前继节点就是head*/ &amp;amp;&amp;amp; tryAcquire(arg)/*尝试获取锁*/) {

              //前继节点出队,当前的node设置为head
              setHead(node);
              p.next = null; // help GC
              failed = false;
              return interrupted;
          }

          //去除前面被取消的(CANCELLED)的线程
          //若前继节点没有没被取消,则表示当前线程可以被park
          //park当前线程,park结束时检查是否被interrupt,若是则设置interrupted为true,跳出循环后中断线程
          if (shouldParkAfterFailedAcquire(p, node) &amp;amp;&amp;amp; parkAndCheckInterrupt())
              interrupted = true;
      }
  } finally {
      //若线程失败,则取消获取锁
      if (failed)
          cancelAcquire(node);
  }
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;shouldParkAfterFailedAcquire&lt;br /&gt;
去除前面被取消的(CANCELLED)的线程,若前继节点没有没被取消,则表示当前线程可以被park
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private static boolean shouldParkAfterFailedAcquire(Node pred, Node node) {
  int ws = pred.waitStatus;
  if (ws == Node.SIGNAL)
      /*
       * 前继节点已经成功执行,等待释放锁,所以当前的线程可以安全的park。
       */
      return true;
  if (ws &amp;gt; 0) {
      /*
       * 前继节点的线程已经被取消,所以跳过已经被取消的节点,并一直往前跳过所有连续的CANCELLED节点
       *
       */
      do {
          node.prev = pred = pred.prev;
      } while (pred.waitStatus &amp;gt; 0);
      pred.next = node;
  } else {
      /*
       * 当前继节点的waitStatus非SIGNAL &amp;amp; 非CANCELLED,需要设置waitStatus的值为SIGNAL,并返回false,继续自旋
       */
      compareAndSetWaitStatus(pred, ws, Node.SIGNAL);
  }
  return false;
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;parkAndCheckInterrupt&lt;br /&gt;
park当前线程,并返回线程是否被中断
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private final boolean parkAndCheckInterrupt() {
  LockSupport.park(this);

  //阻塞结束时,调用Thread.interrupted()来检查结束阻塞的原因是什么
  return Thread.interrupted();
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-2&quot;&gt;独占模式的释放&lt;/h5&gt;
&lt;p&gt;释放独占模式，解除线程阻塞；该过程中会唤醒队列中后继节点的线程。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;release&lt;br /&gt;
该方法一般会被子类调用，例如&lt;code&gt;java.util.concurrent.locks.ReentrantLock#unlock&lt;/code&gt;这个方法，release的实现如下：
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public final boolean release(int arg) {
  if (tryRelease(arg)/*该方法被子类实现*/) {
      Node h = head;
      if (h != null &amp;amp;&amp;amp; h.waitStatus != 0)
          unparkSuccessor(h)/*唤醒后继节点的线程*/;
      return true;
  }
  return false;
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;unparkSuccessor&lt;br /&gt;
唤醒后继节点的线程&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private void unparkSuccessor(Node node) {
    /*
     * node节点以及执行完成,不用加锁了,所以可以把等待状态设置为0。
     */
    int ws = node.waitStatus;
    if (ws &amp;lt; 0)
        compareAndSetWaitStatus(node, ws, 0);

    /*
     * 唤醒node节点的后继节点线程。
     */
    Node s = node.next;
    if (s == null || s.waitStatus &amp;gt; 0) {
        s = null;
        for (Node t = tail; t != null &amp;amp;&amp;amp; t != node; t = t.prev)
            if (t.waitStatus &amp;lt;= 0)
                s = t;
    }
    if (s != null)
        LockSupport.unpark(s.thread);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-3&quot;&gt;共享模式的实现&lt;/h4&gt;

&lt;h5 id=&quot;section-4&quot;&gt;共享模式的获取&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;acquireShared
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public final void acquireShared(int arg) {
  if (tryAcquireShared(arg)/*尝试获取共享模式,若无许可则进入等待*/ &amp;lt; 0)
      doAcquireShared(arg);
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;doAcquireShared&lt;br /&gt;
该方法和独占模式的&lt;code&gt;acquireQueued&lt;/code&gt;方法很像，主要的区别就是在&lt;code&gt;setHeadAndPropagate&lt;/code&gt;中，如果当前节点获取到了许可，且还有多余的许可，则继续让后继节点获取许可并唤醒他们，并一直往后传递下去。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private void doAcquireShared(int arg) {
    final Node node = addWaiter(Node.SHARED)/*添加节点到队列*/;
    boolean failed = true;
    try {
        boolean interrupted = false;
        for (;;) {
            //获取到前继节点
            final Node p = node.predecessor();
            if (p == head) { //如果前继节点就是head节点的话
                int r = tryAcquireShared(arg);//尝试获取共享模式
                if (r &amp;gt;= 0) {
                    setHeadAndPropagate(node, r); //设置当前节点为head节点
                    p.next = null; // help GC
                    if (interrupted)    //判断退出xxxx的时候,是否是被interrupt掉的
                        selfInterrupt();
                    failed = false;
                    return;
                }
            }

            //去除前面被取消的(CANCELLED)的线程
            //若前继节点没有没被取消,则表示当前线程可以被park
            //park当前线程,park结束时检查是否被interrupt,若是则设置interrupted为true,跳出循环后中断线程
            if (shouldParkAfterFailedAcquire(p, node) &amp;amp;&amp;amp; parkAndCheckInterrupt())
                interrupted = true;
        }
    } finally {
        if (failed)
            cancelAcquire(node);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;setHeadAndPropagate&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private void doReleaseShared() {
    for (;;) {
        Node h = head;
        if (h != null &amp;amp;&amp;amp; h != tail) { //若队列里有线程节点
            int ws = h.waitStatus;

            //线程状态为SIGNAL的时候,才可以唤醒后继节点的线程
            if (ws == Node.SIGNAL) {

                //重置Node的状态为0,unpark该节点
                if (!compareAndSetWaitStatus(h, Node.SIGNAL, 0))
                    continue;            // loop to recheck cases
                unparkSuccessor(h); //unpark
            }
            else if (ws == 0 &amp;amp;&amp;amp;
                     !compareAndSetWaitStatus(h, 0, Node.PROPAGATE))
                //如果线程状态为0则更新状态为PROPAGATE，让后继节点传播唤醒操作,失败重试
                continue;                // loop on failed CAS
        }

        //head变化了,说明该节点被唤醒了,则继续唤醒后边的节点
        if (h == head)                   // loop if head changed
            break;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;共享模式的释放&lt;br /&gt;
当tryReleaseShared返回true的时候,会把一个或多个线程从共享模式中唤醒。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public final boolean releaseShared(int arg) {
    if (tryReleaseShared(arg)/*该方法由子类实现*/) {
        doReleaseShared();
        return true;
    }
    return false;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-5&quot;&gt;总结&lt;/h4&gt;
&lt;p&gt;AQS是&lt;code&gt;java.util.concurrent&lt;/code&gt;中的核心，它的内部类&lt;code&gt;java.util.concurrent.locks.AbstractQueuedSynchronizer.Node&lt;/code&gt;通过实现&lt;code&gt;CLH lock queue&lt;/code&gt;的一个变种来轮询执行CAS操作来调用&lt;code&gt;Unsafe.park()&lt;/code&gt;获取锁。
AQS理解了，下一篇会聊聊它的一个具体的实现&lt;code&gt;java.util.concurrent.locks.ReentrantLock&lt;/code&gt;类，这样会更直观的展现AQS的精妙。&lt;/p&gt;
</description>
        <pubDate>Sat, 15 Jul 2017 00:00:00 +0800</pubDate>
        <link>http://leocook.github.io/2017/07/15/Java%E5%B9%B6%E5%8F%91(%E4%BA%94)-AQS%E6%A1%86%E6%9E%B6/</link>
        <guid isPermaLink="true">http://leocook.github.io/2017/07/15/Java%E5%B9%B6%E5%8F%91(%E4%BA%94)-AQS%E6%A1%86%E6%9E%B6/</guid>
        
        <category>AQS</category>
        
        
        <category>java</category>
        
      </item>
    
      <item>
        <title>Java并发(四)：locksupport</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#locksupport&quot; id=&quot;markdown-toc-locksupport&quot;&gt;LockSupport类的核心字段&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#locksupport-1&quot; id=&quot;markdown-toc-locksupport-1&quot;&gt;LockSupport类的核心方法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#threadinterrupt&quot; id=&quot;markdown-toc-threadinterrupt&quot;&gt;Thread.interrupt()方法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关键词：LockSupport&lt;/p&gt;

&lt;p&gt;前面我们讨论了&lt;code&gt;sun.misc.Unsafe&lt;/code&gt;类，该类提供了面向操作系统直接操作内存和CPU的方法，例如分配内心和阻塞线程等等。但是该类在使用时是不安全的，所以jdk在不同的场景下对它做了不同的包装。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;java.util.concurrent.locks.LockSupport&lt;/code&gt;类就是对&lt;code&gt;sun.misc.Unsafe&lt;/code&gt;类进行了一些封装，主要提供一些锁的基础操作。&lt;/p&gt;

&lt;p&gt;LockSupport阻塞线程的机制与&lt;code&gt;Object&lt;/code&gt;的wait和notify是不一样的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;调用API层面的区别&lt;br /&gt;
&lt;code&gt;LockSupport&lt;/code&gt;的park和unpark可以用“线程”作为该方法的参数，语义更合乎逻辑。
&lt;code&gt;Object&lt;/code&gt;的wait和notify是由&lt;code&gt;监视器对象&lt;/code&gt;来调用的，对线程来说，它的阻塞和唤醒是被动的，不能准确的控制某个指定的线程，要么随机唤醒（notify）、要么唤醒全部（notifyAll）。&lt;/li&gt;
  &lt;li&gt;实现原理的区别&lt;br /&gt;
&lt;code&gt;Object&lt;/code&gt;的wait和notify以及&lt;code&gt;synchronized&lt;/code&gt;都是通过占用和释放该&lt;code&gt;对象的监视器&lt;/code&gt;来实现锁的获取和释放。
&lt;code&gt;LockSupport&lt;/code&gt;不使用对象的监视器，每次执行&lt;code&gt;park&lt;/code&gt;时会消耗1个&lt;code&gt;许可&lt;/code&gt;，每次执行&lt;code&gt;unpark&lt;/code&gt;时会获得1个&lt;code&gt;许可&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;如果查看Unsafe的C++&lt;a href=&quot;http://hg.openjdk.java.net/jdk7/jdk7/hotspot/file/81d815b05abb/src/os/linux/vm/os_linux.cpp&quot;&gt;源码&lt;/a&gt;会发现，这个&lt;code&gt;许可&lt;/code&gt;，其实就是一个&lt;code&gt;_counter&lt;/code&gt;变量。
当执行&lt;code&gt;park&lt;/code&gt;的时候，若&lt;code&gt;_counter&lt;/code&gt;值大于0则立马返回并把&lt;code&gt;_counter&lt;/code&gt;的值设置为0，线程不会阻塞；若&lt;code&gt;_counter&lt;/code&gt;值等于0，则阻塞当前线程。可以理解这个过程将会消耗一个许可，若没有许可被消耗，则阻塞。
当执行&lt;code&gt;unpark&lt;/code&gt;的时候，将会把&lt;code&gt;_counter&lt;/code&gt;的值设置为1。可以理解这个过程是是给线程添加一个许可，且多次调用也只会添加一个许可。
&lt;code&gt;_counter&lt;/code&gt;为1的时候表示许可可用，为0的时候表示许可不可用。如果能够很好的理解这个“许可”的设计，在查看LockSupport类源码的时候，将会轻松很多。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;locksupport&quot;&gt;LockSupport类的核心字段&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//unsafe，用于CAS操作
private static final Unsafe unsafe = Unsafe.getUnsafe();

//Thread中parkBlocker的内存偏移量
private static final long parkBlockerOffset;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在&lt;code&gt;java.lang.Thread&lt;/code&gt;类中有个字段&lt;code&gt;parkBlocker&lt;/code&gt;用来存放该线程阻塞时是被哪个对象阻塞的。&lt;/p&gt;

&lt;h4 id=&quot;locksupport-1&quot;&gt;LockSupport类的核心方法&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;public static void park()&lt;br /&gt;
如果许可可用，则使用该许可，并立刻返回；否则阻塞当前线程。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;public static void park(Object blocker)&lt;br /&gt;
如果许可可用，则使用该许可，并立刻返回；否则阻塞当前线程，并告诉线程是谁阻塞了它。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;public static void parkNanos(long nanos)&lt;br /&gt;
如果许可可用，则使用该许可，并立刻返回；否则阻塞当前线程nanos纳秒。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;public static void parkNanos(Object blocker, long nanos)&lt;br /&gt;
如果许可可用，则使用该许可，并立刻返回；否则阻塞当前线程nanos纳秒，并告诉线程是谁阻塞了它。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;public static void parkUntil(long deadline)&lt;br /&gt;
如果许可可用，则使用该许可，并立刻返回；否则阻塞当前线程直到时间deadline。与parkNanos相比，这里的时间是绝对时间戳。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;public static void parkUntil(Object blocker, long deadline)&lt;br /&gt;
如果许可可用，则使用该许可，并立刻返回；否则阻塞当前线程直到时间deadline，并告诉线程是谁阻塞了它。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;public static void unpark(Thread thread)&lt;br /&gt;
若许可不可用，则使许可可用。若线程因为调用了park而阻塞，则它将解除阻塞状态。否则保证下一次调用park不会受阻。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;private static void setBlocker(Thread t, Object arg)&lt;br /&gt;
给线程t设置阻塞对象，告诉t是谁阻塞了它。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;public static Object getBlocker(Thread t)&lt;br /&gt;
获取是谁阻塞了线程t&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;threadinterrupt&quot;&gt;Thread.interrupt()方法&lt;/h4&gt;

&lt;p&gt;Thread.interrupt()方法不会中断一个正在运行的线程。当线程被Object.wait、Thread.join和Thread.sleep三种方法阻塞时，若调用了Thread.interrupt()方法，线程将退出阻塞状态，并会抛出一个&lt;code&gt;InterruptedException&lt;/code&gt;中断异常。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;LockSupport.park()&lt;/code&gt;也能够响应中断信号，但是它不会抛出&lt;code&gt;InterruptedException&lt;/code&gt;中断异常。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Thread.interrupted() &amp;amp; Thread.isInterrupted()方法&lt;br /&gt;
测试线程是否已经中断。前者是静态方法，后者不是。当我们需要停止一个线程的时候，一般有两种方式：
    &lt;ul&gt;
      &lt;li&gt;通过共享变量；&lt;/li&gt;
      &lt;li&gt;通过调用线程的&lt;code&gt;interrupt&lt;/code&gt;方法。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;前者在线程阻塞的时候不能够被中断，只有当线程执行的时候才可以;而后者只能在线程处于阻塞的时候才能够被中断，线程执行时不可以中断。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;interrupted status&lt;br /&gt;
&lt;code&gt;interrupted status&lt;/code&gt;是线程的中断状态，被JVM的C++代码维护着。
    &lt;ul&gt;
      &lt;li&gt;在调用Thread.join和Thread.sleep之后，将会设置interrupted status；&lt;/li&gt;
      &lt;li&gt;当退出阻塞、抛出&lt;code&gt;InterruptedException&lt;/code&gt;异常的时候，interrupted status将会被清除；&lt;/li&gt;
      &lt;li&gt;调用&lt;code&gt;public static boolean interrupted()&lt;/code&gt;方法后，会清除interrupted status&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section&quot;&gt;总结&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;java.util.concurrent.locks.LockSupport&lt;/code&gt;类是对&lt;code&gt;sun.misc.Unsafe&lt;/code&gt;类的二次封装，主要提供了一些线程阻塞的工具。
该类在AQS中被大量的运用，在阅读AQS的源码时，需要对该类有所了解。&lt;/p&gt;
</description>
        <pubDate>Sat, 08 Jul 2017 00:00:00 +0800</pubDate>
        <link>http://leocook.github.io/2017/07/08/Java%E5%B9%B6%E5%8F%91(%E5%9B%9B)-LockSupport/</link>
        <guid isPermaLink="true">http://leocook.github.io/2017/07/08/Java%E5%B9%B6%E5%8F%91(%E5%9B%9B)-LockSupport/</guid>
        
        <category>LockSupport</category>
        
        
        <category>java</category>
        
      </item>
    
      <item>
        <title>Cap理论</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#cap&quot; id=&quot;markdown-toc-cap&quot;&gt;CAP理论的起源&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#cap-1&quot; id=&quot;markdown-toc-cap-1&quot;&gt;CAP三选二&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cap-2&quot; id=&quot;markdown-toc-cap-2&quot;&gt;CAP理论的确定&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cap-3&quot; id=&quot;markdown-toc-cap-3&quot;&gt;对CAP理论的质疑&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;作者的回应&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关键词：CAP、可用性、分区容错性、强一致性、弱一致性、最终一致性&lt;/p&gt;

&lt;p&gt;CAP理论在互联网的知名度挺高，有些开发在设计分布式系统的时候甚至会把它作为衡量系统设计的标准。CAP理论指出任何分布式系统在可用性、一致性、分区容错性这3个点上最多只能同时满足2点。但事实上，CAP理论在被人称之为定理的同时，也伴随着很多争议。其实我个人并不觉得它是一个定理。&lt;/p&gt;

&lt;h3 id=&quot;cap&quot;&gt;CAP理论的起源&lt;/h3&gt;
&lt;p&gt;CAP理论起源于伯克莱加州大学的计算机科学家Eric Brewer在2000年的分布式计算原则研讨会（PODC）上提出的猜想：一致性（Consistency）、可用性（Availability）、分区容错性（Partition tolerance）三者无法在分布式系统中同时满足。其实Eric Brewer教授当时的猜想是建立在webservice集群场景上的，并对CAP理论进行定义：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;C(一致性)&lt;br /&gt;
系统在执行过某项操作后，仍处于状态一致。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A(可用性)&lt;br /&gt;
分布式系统中的每个节点都能响应客户端的请求，数据可以不是最新的。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;P(分区容错性)&lt;br /&gt;
当分布式系统遇到节点故障、网络分区故障的时候，仍然能够提供一致性和可用性保障。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;单看上面的理论，很抽象。下面简单聊聊我对它的理解：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;C(一致性)&lt;br /&gt;
一致性可以从客户端和服务端两个角度来看。从服务端来说，一致性就是指在分布式系统中修改了某个值之后，该值在其它节点上的副本也能立马更新到最新的值，并且客户端写、各分区数据更新到最新这一系列的操作组合是原子的。从客户端来说，当修改了某条记录之后，后续的所有请求都能够返回到更新后的新数据。
为此又衍生出了三个概念：
    &lt;ul&gt;
      &lt;li&gt;强一致性&lt;br /&gt;
  分布式系统中某个值发生了变化后，必须要保证节点的副本值同时更新到最新值。保证该值在更新后，后续所有访问都能访问到返回最新的值。&lt;/li&gt;
      &lt;li&gt;弱一致性&lt;br /&gt;
  分布式系统中某个值发生了变化后，不能保证部分和所有的数据的副本能立马被更新到最新状态。后续的访问可能部分请求不能返回最新的值，可能所有请求都不能返回最新的值，但经过“不一致时间窗口”这段时间后，所有数据的副本都更新到了最新状态，客户端后续的访问也都会返回最新的数值。&lt;/li&gt;
      &lt;li&gt;最终一致性&lt;br /&gt;
  最终一致性是弱一致性的特殊形式，系统保证数据在后续没有再次被更新的前提下，该数据的所有副本最终都将会变为最新的数据，且客户端对它后续的所有访问返回的都是最新的数据。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A(可用性)&lt;br /&gt;
这里的可用性指的不是分布式环境的可用性，这里的可以性是指分布式中单个节点可响应客户端的请求，响应返回的数据可以是最新状态，也可以不是最新状态，只要客户端的请求能被响应，就算该节点是可用的。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;P(分区容错性)&lt;br /&gt;
当分布式系统遇到节点故障、网络分区故障的时候，分布式系统仍然能够给客户端提供服务。其实，就是客户端在请求到故障节点时，会跳过该节点，并继续请求其它正常的节点。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;cap-1&quot;&gt;CAP三选二&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;CA without P（一致性、可用性）&lt;br /&gt;
如果同时满足了一致性和可用性，那么存在两种情况：第一种是单机环境，这样就可以保证C和A了；第二种是分布式环境，每次数据修改时都对分区中对这条数据的副本加锁，不给其它操作来修改它，当所有副本数据都是最新之后，再释放锁，但是这些设计出来的系统效率极为低下，甚至还不如单机环境。所以无法满足P。&lt;/li&gt;
  &lt;li&gt;CP without A（一致性、分区容错性）&lt;br /&gt;
如果要保证在多个节点环境下，每个节点之间都是强一致的，那么肯定会导致分区之间存在同步时间，当并发高的时候，同步时间可能会延长很多，这样就不能保证每个节点的数据都是最新的了。但是可以通过P保证用户请求指向更新后的那些节点，以此来保障整个系统可以正常工作。&lt;/li&gt;
  &lt;li&gt;AP without C（可用性、分区容错性）&lt;br /&gt;
如果保证了可用性、以及分区容错性，那就必须要放弃一致性，例如某个节点故障了，这时候该节点将会被划分到“故障分区”进行隔离，隔离后节点将接收不到请求，自然就失去了一致性。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;cap-2&quot;&gt;CAP理论的确定&lt;/h3&gt;
&lt;p&gt;2002年，麻省理工学院的Lynch和Gilbert证明了Eric Brewer对CAP的猜想，并发表了论文。从此CAP理论成为了定理。&lt;/p&gt;

&lt;h3 id=&quot;cap-3&quot;&gt;对CAP理论的质疑&lt;/h3&gt;
&lt;p&gt;其实初看CAP理论的人都会对此表示一头雾水，很难用一两句简洁的语言来把它描述清楚。业界对它的质疑还是比较多的，下面简单的列两个：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;质疑1&lt;br /&gt;
不适合用于数据库事务架构。&lt;/li&gt;
  &lt;li&gt;质疑2&lt;br /&gt;
使用不可变模型来降低CAP的复杂性，传统的CURD变为CR，例如Hadoop中HDFS的设计，以及Hbase的WAL Log设计。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;还有其他质疑就不列举了。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;作者的回应&lt;/h3&gt;
&lt;p&gt;作者的回应主要是明确、缩小CAP理论的使用场景，例如CAP理论只局限在原子读写的场景，并申明不支持数据库事务等的场景。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;总结&lt;/h3&gt;
&lt;p&gt;个人觉得学习CAP理论，当做了解分布式中几个重要场景就可以了，例如：如何保障数据多副本同步问题；故障转移的实现等。
除此以外，在查看一些并发资料的时候，会经常遇到强一致性、弱一致性、最终一致性这些词，这些名词的意义，以及这几种一致性场景在不同技术中的设计思想，是需要我们去留意的。最后，相信技术但不迷信技术！&lt;/p&gt;

</description>
        <pubDate>Sat, 24 Jun 2017 00:00:00 +0800</pubDate>
        <link>http://leocook.github.io/2017/06/24/CAP%E7%90%86%E8%AE%BA/</link>
        <guid isPermaLink="true">http://leocook.github.io/2017/06/24/CAP%E7%90%86%E8%AE%BA/</guid>
        
        <category>CAP</category>
        
        <category>可用性</category>
        
        <category>分区容错性</category>
        
        <category>强一致性</category>
        
        <category>弱一致性</category>
        
        <category>最终一致性</category>
        
        
        <category>编程思想</category>
        
      </item>
    
      <item>
        <title>Java并发(三)：unsafe和cas</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#cas&quot; id=&quot;markdown-toc-cas&quot;&gt;CAS&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#cas-1&quot; id=&quot;markdown-toc-cas-1&quot;&gt;CAS原理&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#atomicinteger&quot; id=&quot;markdown-toc-atomicinteger&quot;&gt;AtomicInteger示例&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#casaba&quot; id=&quot;markdown-toc-casaba&quot;&gt;CAS的ABA问题&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#sunmiscunsafe&quot; id=&quot;markdown-toc-sunmiscunsafe&quot;&gt;sun.misc.Unsafe&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#unsafe&quot; id=&quot;markdown-toc-unsafe&quot;&gt;Unsafe类是单例的&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#unsafe-1&quot; id=&quot;markdown-toc-unsafe-1&quot;&gt;创建Unsafe对象&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#unsafe-2&quot; id=&quot;markdown-toc-unsafe-2&quot;&gt;Unsafe类的方法介绍&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#examples-for-unsafe&quot; id=&quot;markdown-toc-examples-for-unsafe&quot;&gt;Examples for Unsafe&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关键词：CAS、Unsafe&lt;/p&gt;

&lt;p&gt;CAS是JSR-166和核心思想，Java中的CAS思想被C/C++实现，并被sun.misc.Unsafe类包装，供Java调用。
Java中的非阻塞锁是基于AQS实现的，而AQS的设计就是建立在CAS和Unsafe类上的，所以学习本文还是很有必要性的。&lt;/p&gt;

&lt;p&gt;在学习CAS、sun.misc.Unsafe类之前，我们需要知道一些基础的概念：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.leocook.org/2017/06/12/Java%E5%B9%B6%E5%8F%91-%E5%8E%9F%E5%AD%90%E6%80%A7-%E5%8F%AF%E8%A7%81%E6%80%A7-%E6%9C%89%E5%BA%8F%E6%80%A7/&quot;&gt;Java并发：原子性、可见性、有序性&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.leocook.org/2017/06/17/Java%E5%B9%B6%E5%8F%91-volatile%E5%85%B3%E9%94%AE%E5%AD%97/&quot;&gt;Java并发：volatile关键字&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cas&quot;&gt;CAS&lt;/h2&gt;
&lt;p&gt;CAS是&lt;code&gt;Compare and Swap&lt;/code&gt;的缩写，即比较并转换。在设计并发算法的时候会用到的技术，JSR-166特性是完全建立在CAS的基础上的，可见其重要性。
维基百科对CAS的解释可以看这里：&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%AF%94%E8%BE%83%E5%B9%B6%E4%BA%A4%E6%8D%A2&quot;&gt;CAS比较并交换&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Java就是通过Unsafe类的compareAndSwap系列方法实现的CAS，当前的绝大多是CPU都是支持CAS的，不同厂商的CPU的CAS指令可能是不同的。&lt;/p&gt;
&lt;h4 id=&quot;cas-1&quot;&gt;CAS原理&lt;/h4&gt;
&lt;p&gt;CAS有三个操作数：内存位置V，预期值A和新值B（将要被修改成的值）。
在修改值的时候，若内存位置V存的值和预期值A相等，那么就把内存位置的V的值修改为B，返回true；否则，什么都不做，并返回false。
在Java的实现中，V可以是一个存储A地址的long整数，A是一个使用了volatile修饰的基础数据类型或者对象，B的类型和A的类型一致。&lt;/p&gt;

&lt;h4 id=&quot;atomicinteger&quot;&gt;AtomicInteger示例&lt;/h4&gt;
&lt;p&gt;java.util.concurrent.atomicAtomicInteger是Jdk提供的一个类，如果你需要一个读写有原子性的整数类型，使用它就对了！
我们可以趴一下AtomicInteger的源码，可以观察到下面这个方法:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 * 在当前值上原子性的自增1
 */
public final int getAndIncrement() {
    for (;;) {
        int current = get();
        int next = current + 1;
        if (compareAndSet(current, next))
            return current;
    }
}

public final boolean compareAndSet(int expect, int update) {
    return unsafe.compareAndSwapInt(this, valueOffset, expect, update);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;我们能够看到，为了保证操作的原子性，调用了&lt;code&gt;compareAndSet&lt;/code&gt;方法，而&lt;code&gt;compareAndSet&lt;/code&gt;方法又调用了Unsafe的&lt;code&gt;compareAndSwapInt&lt;/code&gt;方法。&lt;/p&gt;

&lt;h4 id=&quot;casaba&quot;&gt;CAS的ABA问题&lt;/h4&gt;
&lt;p&gt;维基百科上的说明是如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1.进程P1读取了一个数值A&lt;/li&gt;
  &lt;li&gt;2.P1被挂起(时间片耗尽、中断等)，进程P2开始执行&lt;/li&gt;
  &lt;li&gt;3.P2修改数值A为数值B，然后又修改回A&lt;/li&gt;
  &lt;li&gt;4.P1被唤醒，比较后发现数值A没有变化，程序继续执行。
对于线程P1来说，数值一直是A未变化过，但实际上数值发生过变化的。关于这个维基百科里说的很清楚。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;sunmiscunsafe&quot;&gt;sun.misc.Unsafe&lt;/h2&gt;

&lt;p&gt;我们在日常开发的时候，Java是无法直接做操作系统级别的访问，如果想访问操作系统，我们可以使用C/C++来开发，然后使用JNI或者JNA来调用C/C++的库。
JVM中存在&lt;code&gt;sun.misc.Unsafe&lt;/code&gt;这样的一个类，该类中提供了一系列的底层方法，这些方法可以直接操作操作系统的内存等。该类在设计的时候，默认是不让一般的开发人员不可以使用，只有授信代码才可以使用。&lt;/p&gt;

&lt;h4 id=&quot;unsafe&quot;&gt;Unsafe类是单例的&lt;/h4&gt;
&lt;p&gt;从下面的代码中，我们可以看出Unsafe是单例的。且只能通过类加载器来获取，不能直接使用new来创建。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private static final Unsafe theUnsafe;

private Unsafe() {
}

@CallerSensitive
public static Unsafe getUnsafe() {
    Class var0 = Reflection.getCallerClass();
    if(var0.getClassLoader() != null) {
        throw new SecurityException(&quot;Unsafe&quot;);
    } else {
        return theUnsafe;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;unsafe-1&quot;&gt;创建Unsafe对象&lt;/h4&gt;

&lt;p&gt;如果你直接调用getUnsafe方法来创建Unsafe对象，那么在编译的时候你将会得到警告提示，例如对于下面这段代码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import sun.misc.Unsafe;

public class ThreadDemo{
    public static void main(String[] args){
        Unsafe unsafe = Unsafe.getUnsafe();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们编译时将会看到如下的警告信息：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ThreadDemo.java:1: 警告: Unsafe是内部专用 API, 可能会在未来发行版中删除
import sun.misc.Unsafe;
               ^
ThreadDemo.java:6: 警告: Unsafe是内部专用 API, 可能会在未来发行版中删除
Unsafe unsafe = Unsafe.getUnsafe();
^
ThreadDemo.java:6: 警告: Unsafe是内部专用 API, 可能会在未来发行版中删除
Unsafe unsafe = Unsafe.getUnsafe();
                ^
3 个警告
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;但是我可以对代码进行授信处理，Java是通过内加载器是否为根类加载器判断是否授信的，我们可以使用JVM参数bootclasspath：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java -Xbootclasspath:/usr/java/jdk1.7.0/jre/lib/rt.jar:. com.mishadoff.magic.UnsafeClient
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Jdk不建议开发者直接创建Unsafe对象&lt;/strong&gt;，如果我们必须要创建，那么我们可以使用&lt;strong&gt;反射&lt;/strong&gt;的方式来创建：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.lang.reflect.Field;
import sun.misc.Unsafe;
import sun.reflect.Reflection;

Field field = Unsafe.class.getDeclaredField(&quot;theUnsafe&quot;);
field.setAccessible(true);
Unsafe unsafe = (Unsafe) field.get(null);
System.out.println(unsafe);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;unsafe-2&quot;&gt;Unsafe类的方法介绍&lt;/h4&gt;
&lt;p&gt;Unsafe类中的方法有很多，其实我们需要关注只有这么几个。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;内存分配&lt;br /&gt;
allocateMemory：分配内存（非堆内存）
reallocateMemory：重新分配内存
freeMemory：释放内存&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;线程操作&lt;br /&gt;
park：锁定当前的线程
unpark：解锁指定的线程&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CAS操作&lt;br /&gt;
public final native boolean compareAndSwapXXX(Object o,long offset,K expected,K x)
例如：compareAndSwapInt、compareAndSwapLong、compareAndSwapObject等等。
该方法也就是Java中的CAS的实现，这个方法会比较expected的值和内存地址在offset位置的值是否一样，如果一样则会更新expected的值为x，并返回true，否则返回false。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;还有其它的相关方法可以看下面：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;public native int addressSize()&lt;br /&gt;
本地指针所占用的存储大小，值为4或8.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;public native int pageSize()&lt;br /&gt;
返回内存页信息&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;public native Object allocateInstance(Class cls)&lt;br /&gt;
分配一个指定的对象，但是不执行任何构造方法。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;public native int arrayBaseOffset(Class arrayClass)&lt;br /&gt;
返回数组的内存起始位置&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;copyMemory&lt;br /&gt;
把某段内存块中的数据copy到另外一段内存块中。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;defineAnonymousClass&lt;br /&gt;
定义一个匿名类。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;defineClass&lt;br /&gt;
让JVM定义一个类，不进行安全性检查。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ensureClassInitialized&lt;br /&gt;
确定类已经被初始化了。这个经常在访问类的静态成员变量时会结合访问。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;fieldOffset&lt;br /&gt;
返回字段在对象中的内存offset&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;freeMemory&lt;br /&gt;
释放内存&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;getXXX(Object o,long offset) &lt;br /&gt;
获取对象o中内存偏移量为offset的值。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;getUnsafe&lt;br /&gt;
单例，获取Unsafe对象&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;monitorEnter(Object o)&lt;br /&gt;
锁定对象，直到调用了monitorExit(Object o)后才会被解锁&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;monitorExit(Object o)&lt;br /&gt;
解锁对象，该对象必须是之前就已经被锁定了(被执行过monitorExit)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;详情可以查看：&lt;code&gt;http://www.docjar.com/docs/api/sun/misc/Unsafe.html&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;examples-for-unsafe&quot;&gt;Examples for Unsafe&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;sun.misc.Unsafe#allocateInstance()&lt;br /&gt;
不使用类的构造方法，来生成一个类的对象。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.lang.reflect.Field;
import sun.misc.Unsafe;
import sun.reflect.Reflection;

Field field = Unsafe.class.getDeclaredField(&quot;theUnsafe&quot;);
field.setAccessible(true);
Unsafe unsafe = (Unsafe) field.get(null);

Person person1 = (Person)unsafe.allocateInstance(Person.class);
System.out.println(person1); //null: 0

Person person2 = new Person();
System.out.println(person2);//test: 22
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;我们对比person1和person2，可以发现person1是没有使用构造方法的，而person2是使用了构造方法的。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;objectFieldOffset、putXXX&lt;br /&gt;
操作对象成员的值：
&lt;code&gt;objectFieldOffset(Field var1)&lt;/code&gt;是获取成员变量的相对于对象内存的偏移量。
&lt;code&gt;putLong，putInt，putDouble，putChar，putObject&lt;/code&gt;等，可以直接修改对象内存中的数据，可以突破访问修饰符(private/protected)的限制。可以查看下面的例子：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.lang.reflect.Field;
import sun.misc.Unsafe;
import sun.reflect.Reflection;

Field field = Unsafe.class.getDeclaredField(&quot;theUnsafe&quot;);
field.setAccessible(true);
Unsafe unsafe = (Unsafe) field.get(null);

Person person1 = (Person)unsafe.allocateInstance(Person.class);
System.out.println(person1);    //null: 0

Class clazz = person1.getClass();
Field name = clazz.getDeclaredField(&quot;name&quot;);
Field age = clazz.getDeclaredField(&quot;age&quot;);

unsafe.putObject(person1, unsafe.objectFieldOffset(name),&quot;张三&quot;);
unsafe.putInt(person1, unsafe.objectFieldOffset(age),18);

System.out.println(person1);    //张三: 18
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;关于Unsafe类里的方法，感兴趣的网上查找阅读相关的C/C++实现。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;大数组操作&lt;br /&gt;
Java最大只能创建长度为&lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;的数组，我们知道当JVM消耗内存过高的时候发生GC，性能上会大打折扣。那么当我们需要创建一个大数组，且不想因为GC而引起大的性能损耗时，我们能想到的就是使用堆外内存。例如下边的代码就实现了一个大的字节数组：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class BigByteArray {
    private final static int BYTE = 1;

    private long size;
    private long address;

    public BigArray(long size) {
        this.size = size;
        address = getUnsafe().allocateMemory(size * BYTE);
    }

    public void set(long i, byte value) {
        getUnsafe().putByte(address + i * BYTE, value);
    }

    public int get(long idx) {
        return getUnsafe().getByte(address + idx * BYTE);
    }

    public long size() {
        return size;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section&quot;&gt;总结&lt;/h4&gt;
&lt;p&gt;学习完Unsafe和CAS之后，我们再来学习Java中的AQS的实现，就好理解了。&lt;/p&gt;
</description>
        <pubDate>Sat, 24 Jun 2017 00:00:00 +0800</pubDate>
        <link>http://leocook.github.io/2017/06/24/Java%E5%B9%B6%E5%8F%91(%E4%B8%89)-Unsafe%E5%92%8CCAS/</link>
        <guid isPermaLink="true">http://leocook.github.io/2017/06/24/Java%E5%B9%B6%E5%8F%91(%E4%B8%89)-Unsafe%E5%92%8CCAS/</guid>
        
        <category>CAS</category>
        
        <category>Unsafe</category>
        
        
        <category>java</category>
        
      </item>
    
      <item>
        <title>Java并发(二)：volatile关键字</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#cpu&quot; id=&quot;markdown-toc-cpu&quot;&gt;CPU读取值的过程&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#volatile&quot; id=&quot;markdown-toc-volatile&quot;&gt;volatile变量具有可见性&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#volatile-1&quot; id=&quot;markdown-toc-volatile-1&quot;&gt;volatile变量不具有原子性&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#volatile-2&quot; id=&quot;markdown-toc-volatile-2&quot;&gt;volatile变量一定程度上具有有序性&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#volatile-3&quot; id=&quot;markdown-toc-volatile-3&quot;&gt;volatile关键字的实现原理&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#happen-before&quot; id=&quot;markdown-toc-happen-before&quot;&gt;happen-before&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;内存屏障&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#volatile-4&quot; id=&quot;markdown-toc-volatile-4&quot;&gt;volatile关键字原理&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#volatile-5&quot; id=&quot;markdown-toc-volatile-5&quot;&gt;volatile的几个使用场景&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#volatile-6&quot; id=&quot;markdown-toc-volatile-6&quot;&gt;volatile关键字陷阱&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关键词：volatile、happen-before、内存屏障&lt;/p&gt;

&lt;p&gt;在阅读Java并发编程相关的jdk源码中，有个关键字&lt;code&gt;volatile&lt;/code&gt;会经常看到，在并发编程中偶尔也会用到该关键字，但是在使用它的过程中又很容易引起混淆。
&lt;code&gt;volatile&lt;/code&gt;关键字一方面通过内存屏障禁止了指令重排，从而保证了有序性；另一方面通过内存屏障实现了可见性。&lt;/p&gt;

&lt;p&gt;阅读本文前，你需要理解原子性、可见性、有序性这三个基本的并发特性。可以查看这里：&lt;a href=&quot;http://www.leocook.org/2017/06/12/Java%E5%B9%B6%E5%8F%91-%E5%8E%9F%E5%AD%90%E6%80%A7-%E5%8F%AF%E8%A7%81%E6%80%A7-%E6%9C%89%E5%BA%8F%E6%80%A7/&quot;&gt;Java并发：原子性、可见性、有序性&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;本文会先聊聊CPU从内存中读取值的硬件层面的过程，然后说一说volatile关键字是如何保证可见性、有序性的，以及相关的原理。最后还会列出几个示例来说明volatile不能解决的一些场景。&lt;/p&gt;

&lt;h3 id=&quot;cpu&quot;&gt;CPU读取值的过程&lt;/h3&gt;

&lt;p&gt;CPU在读取数据进行计算的时候，cpu并不是直接读取内存中的值，而是先把内存中的值读到cpu的高速Cache中，然后cpu直接操作Cache中的值。cpu在完成计算后，把结果写到Cache中，然后再把Cache写回到内存中。具体的过程可以查看下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xriy2.com1.z0.glb.clouddn.com/volition1.png&quot; alt=&quot;CPU读取值的过程&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果修改某个变量的值，大概会有下面几步操作：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;把值从内存中读到CPU Cache中&lt;/li&gt;
  &lt;li&gt;CPU读取Cache中的值执行操作，并把修改后的值写入到CPU Cache中&lt;/li&gt;
  &lt;li&gt;数据从CPU Cache中刷到内存中&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所以，只有上面三个步骤在执行的过程中不被其它操作干扰时，这个修改操作才会正常完成。&lt;/p&gt;

&lt;h3 id=&quot;volatile&quot;&gt;volatile变量具有可见性&lt;/h3&gt;
&lt;p&gt;简言之，被volatile关键字修饰的变量在修改后，将会强制被刷到内存中，且该变量在其它CPU中的Cache将会失效，从而保证线程在修改变量值后，其它线程能立马读到。&lt;/p&gt;

&lt;p&gt;下面详细说说使用与不使用volatile关键字的差异：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;未使用volatile关键字&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int i=0;//共享变量

//线程1的操作
i=i+1

//线程2的操作
j=i
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们假设先执行的线程1，然后执行线程2，一般会想到j=1，但事实上却不一定。&lt;/p&gt;

&lt;p&gt;在创建线程的时候，内存结构如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xriy2.com1.z0.glb.clouddn.com/%E5%B9%B6%E5%8F%911.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当执行一次线程1之后，cpu缓存中i变为了1，并把cache中的1刷到了内存中，内存结构如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xriy2.com1.z0.glb.clouddn.com/%E5%B9%B6%E5%8F%913.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;由于在线程启动的时候已经把i的值读到了cpu的cache中，所以在执行&lt;code&gt;j=i&lt;/code&gt;的时候，给j赋的值是0，而不是1。
很显然，在线程1修改了i的值之后，线程2并没有读到修改后的i值，可以理解i的读取操作不具备可见性。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用volatile关键字&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在Java中，我们可以使用&lt;code&gt;volatile&lt;/code&gt;关键字来保证变量的可见性，&lt;strong&gt;被volatile修饰后的变量在被修改后，会直接把缓存刷入内存，从而保证下次读取能够读到最新的值&lt;/strong&gt;。如下分析：&lt;/p&gt;

&lt;p&gt;第一步：线程1直接读取内存的i值&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xriy2.com1.z0.glb.clouddn.com/vvv1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第二步：执行&lt;code&gt;i=i+1&lt;/code&gt;，并把结果刷回内存，CPU2中的缓存失效，然后CPU2更新缓存，把i值赋值给j，并写回内存&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xriy2.com1.z0.glb.clouddn.com/vvv2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这样就保证了i的操作是具备可见性的了，所以线程1修改了i之后，线程2能立刻读到修改后的值。&lt;/p&gt;

&lt;h3 id=&quot;volatile-1&quot;&gt;volatile变量不具有原子性&lt;/h3&gt;
&lt;p&gt;volatile可以理解为一个轻量级的synchronized，但是volatile变量不具备原子性。synchronized对比volatile实现的是锁，锁提供了两个重要的特性：互斥（mutual exclusion） 和可见性（visibility）。正是互斥保证了操作的原子性。&lt;/p&gt;

&lt;p&gt;那么什么时候使用volatile，什么时候使用synchronized呢？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;当变量只需要具备可见性的时候使用volatile，例如：对变量的写操作不依赖于该变量当前值；&lt;/li&gt;
  &lt;li&gt;当变量需要同时具备原子性和可见性的时候，就使用synchronized。&lt;/li&gt;
  &lt;li&gt;在使用volatile和synchronized都可以的时候，优先使用volatile，因为volatile的同步机制性能要高于锁的性能。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;volatile-2&quot;&gt;volatile变量一定程度上具有有序性&lt;/h3&gt;

&lt;p&gt;在使用了volatile关键字之后，将会禁用指令重排，从而保证有序性。
当程序执行到volatile变量的读取或写操作时，将会保证该操作前面的语句都已经执行完成且结果对后边代码具有可见性；该操作后边的代码都没有执行。&lt;/p&gt;

&lt;p&gt;我们可以查看下面这个代码块：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;x = 2;        //语句1
y = 0;        //语句2
flag = true;  //语句3
x = 4;         //语句4
y = -1;       //语句5
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;flag变量没有被volatile关键字修饰时 &lt;br /&gt;
由于指令重排的原因，我们可以得到下面依赖关系：
&lt;img src=&quot;http://7xriy2.com1.z0.glb.clouddn.com/volition11.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
我们可以看出：
语句1执行完之后才可以执行语句4；
语句2执行完之后才可以执行语句5；
其它执行的顺序不一定。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;flag变量被volatile关键字修饰后&lt;br /&gt;
由于volatile禁用了指令重排，我们可以得到下面依赖关系：&lt;br /&gt;
&lt;img src=&quot;http://7xriy2.com1.z0.glb.clouddn.com/volition12.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
我们可以看出：
语句1和语句2的顺序不一定；
语句1和语句2都执行完之后执行语句3；
语句3执行完之后才执行语句4和语句5；
语句4和语句5谁先执行不一定。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;volatile-3&quot;&gt;volatile关键字的实现原理&lt;/h3&gt;

&lt;h4 id=&quot;happen-before&quot;&gt;happen-before&lt;/h4&gt;
&lt;p&gt;如果A happen-before B，那么A的所有操作完成后并产生结果才会执行B操作，可以说A所做的任何操作对B都是可见的。happen-before大概有下面几种场景：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1.程序次序规则：在一个单独的线程中，按照程序代码的执行流顺序，（时间上）先执行的操作happen—before（时间上）后执行的操作；&lt;/li&gt;
  &lt;li&gt;2.管理锁定规则：一个unlock操作happen—before后面（时间上的先后顺序，下同）对同一个锁的lock操作；&lt;/li&gt;
  &lt;li&gt;3.volatile变量规则：对一个volatile变量的写操作happen—before后面对该变量的读操作。&lt;/li&gt;
  &lt;li&gt;4.线程启动规则：Thread对象的start()方法happen—before此线程的每一个动作；&lt;/li&gt;
  &lt;li&gt;5.线程终止规则：线程的所有操作都happen—before对此线程的终止检测，可以通过调用Thread.join()方法、获取Thread.isAlive()的返回值等手段检测到线程已经终止执行；&lt;/li&gt;
  &lt;li&gt;6.线程中断规则：对线程interrupt()方法的调用happen—before发生于被中断线程的代码检测到中断时事件的发生；&lt;/li&gt;
  &lt;li&gt;7.对象终结规则：一个对象的初始化完成（构造函数执行结束）happen—before它的finalize（）方法的开始；&lt;/li&gt;
  &lt;li&gt;8.传递性：如果操作A happen—before操作B，操作B happen—before操作C，那么可以得出A happen—before操作C。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其实我们这里主要查看的是第3条，即volatile变量保证的有序性。在代码重排中，主要分为编译器重排和指令重排，为了实现volatile变量的内存语义，JMM会限制这两类重排，下面是JMM针对volatile变量所规定的重排规则表：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;1st operation&lt;/th&gt;
      &lt;th&gt;2st operation&lt;/th&gt;
      &lt;th&gt;2st operation&lt;/th&gt;
      &lt;th&gt;2st operation&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Normal Load&lt;br /&gt;Normal Store&lt;/td&gt;
      &lt;td&gt;Volatile Load&lt;/td&gt;
      &lt;td&gt;Volatile Store&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Normal Load&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Normal Store&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Volatile Load&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Volatile Store&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;观察上述表格，可以得知Volation变量的happen—before原则：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;所有的Volatile变量读都happen—before改变量的其它操作&lt;/li&gt;
  &lt;li&gt;Volation变量的所有操作都happen—before该变量的写操作&lt;/li&gt;
  &lt;li&gt;Volation变量的写操作happen—before该变量的读操作&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section&quot;&gt;内存屏障&lt;/h4&gt;

&lt;p&gt;内存屏障也称之为内存栅栏，是一组处理器指令，用于实现对内存操作顺序限制。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;1st operation&lt;/th&gt;
      &lt;th&gt;2st operation&lt;/th&gt;
      &lt;th&gt;2st operation&lt;/th&gt;
      &lt;th&gt;2st operation&lt;/th&gt;
      &lt;th&gt;2st operation&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Normal Load&lt;/td&gt;
      &lt;td&gt;Normal Store&lt;/td&gt;
      &lt;td&gt;Volatile Load&lt;/td&gt;
      &lt;td&gt;Volatile Store&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Normal Load&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;LoadStore&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Normal Store&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;StoreStore&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Volatile Load&lt;/td&gt;
      &lt;td&gt;LoadLoad&lt;/td&gt;
      &lt;td&gt;LoadStore&lt;/td&gt;
      &lt;td&gt;LoadLoad&lt;/td&gt;
      &lt;td&gt;LoadStore&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Volatile Store&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;StoreLoad&lt;/td&gt;
      &lt;td&gt;StoreStore&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;JMM中共有这4种屏障：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;LoadLoad屏障&lt;br /&gt;
执行顺序：Load1—&amp;gt;Loadload—&amp;gt;Load2&lt;br /&gt;
Load2以及后序的Load指令在加载数据之前，都能访问到Load1加载的数据。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;LoadStore屏障  &lt;br /&gt;
执行顺序： Load1—&amp;gt;LoadStore—&amp;gt;Store2&lt;br /&gt;
Store2以及后序的Store指令在存储数据之前，都能访问到Load1加载的数据。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;StoreStore屏障&lt;br /&gt;
执行顺序：Store1—&amp;gt;StoreStore—&amp;gt;Store2&lt;br /&gt;
Store2以及后序的Store指令在存储数据之前，都能访问到Store1操作所存储的数据。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;StoreLoad屏障&lt;br /&gt;
执行顺序: Store1—&amp;gt; StoreLoad—&amp;gt;Load2&lt;br /&gt;
Load2以及后序的Load指令在加载数据之前，都可以访问到Store1操作所存储的数据。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;volatile-4&quot;&gt;volatile关键字原理&lt;/h4&gt;
&lt;p&gt;volatile实际上就是使用内存屏障的来实现可见性和有序性的：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;有序性：它会确保指令重排时，使用内存屏障保证volatile变量操作前的操作都已经完成了，且在volatile变量操作完成后，才会执行后边的代码&lt;/li&gt;
  &lt;li&gt;可见性：CPU每次在修改volatile变量值之后，它会强制把数据从缓存刷到内存中去，才算本次操作完成&lt;/li&gt;
  &lt;li&gt;可见性：volatile变量值修改后，它会导致其他CPU中的缓存失效&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;volatile-5&quot;&gt;volatile的几个使用场景&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;状态标记量&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//使用volatile来保证标记变量的可见性
volatile boolean flag = false;
 
while(!flag){
    doSomething();
}
 
public void setFlag() {
    flag = true;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//使用volatile来保证标有序性
volatile boolean inited = false;
//线程1:
context = loadContext();  
inited = true;            
 
//线程2:
while(!inited ){
sleep()
}
doSomethingwithconfig(context);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;双重检查锁
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//除了饿汉模式，这种写法创建单例效率最高
class Singleton{
  private volatile static Singleton instance = null;
     
  private Singleton() {
         
  }
     
  public static Singleton getInstance() {
      if(instance==null) {
          synchronized (Singleton.class) {
              if(instance==null)
                  //一定会把数据刷到内存中
                  instance = new Singleton();
          }
      }
      return instance;
  }
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;volatile-6&quot;&gt;volatile关键字陷阱&lt;/h3&gt;
&lt;p&gt;Java是一门支持多线程的语言，为了解决线程的并发问题，使用了&lt;code&gt;同步块&lt;/code&gt;和&lt;code&gt;volatile关键字&lt;/code&gt;机制。
synchronized关键字是同时具备原子性、可见性和有序性；而volatile关键字只具备可见性和有序性，并不具备原子性，问题就出在这里，下面我们举例代码来看看。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;代码一
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Counter {

  public static Integer count = 0;
  static CountDownLatch countDownLatch = null;

  public static void inc() {

      //这里延迟1毫秒，使得结果明显
      try {
          Thread.sleep(1);
      } catch (InterruptedException e) {
      }

      count++;
      countDownLatch.countDown();
  }

  public static void main(String[] args) throws InterruptedException {
      int threadCount = 1000;

      countDownLatch = new CountDownLatch(threadCount);
      //同时启动1000个线程，去进行i++计算，看看实际结果

      for (int i = 0; i &amp;lt; threadCount; i++) {
          Thread t = new Thread(new Runnable() {
              @Override
              public void run() {
                  Counter.inc();
              }});
          t.start();
      }

      countDownLatch.await();

      //这里每次运行的值都有可能不同,可能为1000
      System.out.println(&quot;运行结果:Counter.count=&quot; + Counter.count);
  }
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我这边计算的结果是978，每次运行的结果应该都是不一样的。这段代码应该很好理解，上面代码是很常见的线程不安全实例。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;代码二&lt;br /&gt;
在上面代码的基础上，使用volatile来修饰count：
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public volatile static int count = 0;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当执行完之后，我们发现结果仍然不是1000，原因是volatile无法保证变量的操作是原子的，只能保证变量的操作是具备可见性的。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;代码三&lt;br /&gt;
在代码一的基础上，修改了inc方法,给&lt;code&gt;count++;&lt;/code&gt;添加同步代码：
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public synchronized static void inc() {

  //这里延迟1毫秒，使得结果明显
  try {
      Thread.sleep(1);
  } catch (InterruptedException e) {
  }

  count++;
    
  countDownLatch.countDown();
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;查看上面的代码，我们可以发现volatile关键字是不具备原子性的。我们再使用的时候，需要避免这个坑。&lt;/p&gt;

&lt;p&gt;当我们需要使用具备原子操作的基础类型时，我们除了使用同步代码块，还可以使用&lt;code&gt;java.util.concurrent.atomic&lt;/code&gt;包下的原子类型,例如代码一可以这样修改：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Counter {

    public static AtomicInteger count = new AtomicInteger(0);
    static CountDownLatch countDownLatch = null;

    public static void inc() {

        //这里延迟1毫秒，使得结果明显
        try {
            Thread.sleep(1);
        } catch (InterruptedException e) {
        }

        count.incrementAndGet();
        countDownLatch.countDown();
    }

    public static void main(String[] args) throws InterruptedException {
        int threadCount = 1000;

        countDownLatch = new CountDownLatch(threadCount);
        //同时启动1000个线程，去进行i++计算，看看实际结果

        for (int i = 0; i &amp;lt; threadCount; i++) {
            Thread t = new Thread(new Runnable() {
                @Override
                public void run() {
                    Counter.inc();
                }});
            t.start();
        }

        countDownLatch.await();

        //这里每次运行的值都有可能不同,可能为1000
        System.out.println(&quot;运行结果:Counter.count=&quot; + Counter.count.get());
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;总结&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一句话总结下，volatile关键字通过内存屏障来保证了变量的可见性和有序性。&lt;/p&gt;

</description>
        <pubDate>Sat, 17 Jun 2017 00:00:00 +0800</pubDate>
        <link>http://leocook.github.io/2017/06/17/Java%E5%B9%B6%E5%8F%91(%E4%BA%8C)-volatile%E5%85%B3%E9%94%AE%E5%AD%97/</link>
        <guid isPermaLink="true">http://leocook.github.io/2017/06/17/Java%E5%B9%B6%E5%8F%91(%E4%BA%8C)-volatile%E5%85%B3%E9%94%AE%E5%AD%97/</guid>
        
        <category>volatile</category>
        
        <category>happen-before</category>
        
        <category>内存屏障</category>
        
        
        <category>java</category>
        
      </item>
    
      <item>
        <title>Java并发(一)：原子性、可见性、有序性</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;原子性&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;可见性&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;有序性&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#happen-before&quot; id=&quot;markdown-toc-happen-before&quot;&gt;happen-before&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;指令重排&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关键词：原子性、可见性、有序性、volatile、happen-before&lt;/p&gt;

&lt;p&gt;并发编程中，有三个特性需要我们时刻关注的：原子性、可见性、有序性，本文主要是对这三个特性做解释，其中涉及到的volatile关键字，如果不是很理解的可以查看这里：&lt;a href=&quot;http://www.leocook.org/2017/06/17/Java%E5%B9%B6%E5%8F%91-volatile%E5%85%B3%E9%94%AE%E5%AD%97/&quot;&gt;Java并发：volatile关键字&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;原子性&lt;/h3&gt;
&lt;p&gt;如果某个操作是原子的，那么该操作要么不执行，若执行的话就一定会成功。可以理解该操作在执行期间不会被其它因素中断，若是被一些不可控的元素破坏，该操作也不会产生副作用。&lt;/p&gt;

&lt;p&gt;银行转账的操作就具备原子性，例如A向B转账1000元，其中包括了2个动作：A账户减去1000元，B账户加上1000元。很好理解，这个转账操作要么不执行，若执行必须保证这两个动作都成功才行。&lt;/p&gt;

&lt;p&gt;编程时，假设Int类型是4字节(32位)，我们把一个Int类型的内存结构用下图展示：
&lt;img src=&quot;http://7xriy2.com1.z0.glb.clouddn.com/%E5%8E%9F%E5%AD%90%E6%80%A7.png&quot; alt=&quot;原子性&quot; /&gt;
当执行赋值语句&lt;code&gt;a = 128&lt;/code&gt;的时候，如果能保证要么不执行，要执行的话&lt;code&gt;1~8B&lt;/code&gt;、&lt;code&gt;9~16B&lt;/code&gt;、&lt;code&gt;17~24B&lt;/code&gt;、&lt;code&gt;26~32B&lt;/code&gt;这四个字节都成功写入，且不会被其它线程操作干扰，那么这个赋值操作就具备原子性。&lt;/p&gt;

&lt;p&gt;在Java中，&lt;code&gt;基础数据类型&lt;/code&gt;的变量的&lt;code&gt;赋值&lt;/code&gt;和&lt;code&gt;读取&lt;/code&gt;是原子性的操作。例如下面代码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;x = 10; //原子的
y = x; //非原子的
x++; //非原子的
x = x + 1; //非原子的
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-1&quot;&gt;可见性&lt;/h3&gt;
&lt;p&gt;可见性就是指当多个线程访问同一个变量时，若某个线程修改了变量的值，其他线程能够立即看得到修改的值。&lt;/p&gt;

&lt;p&gt;例如下面的代码块：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;i=0;//共享变量

//线程1的操作
i=i+1

//线程2的操作
j=i
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们假设先执行的线程1，然后执行线程2，且&lt;code&gt;线程1和线程2不同时执行&lt;/code&gt;一般会想到j=1，但事实上却不一定。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;在创建线程的时候，内存结构如下：
&lt;img src=&quot;http://7xriy2.com1.z0.glb.clouddn.com/%E5%B9%B6%E5%8F%911.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;当执行一次线程1之后，cpu缓存中i变为了1，并把cache中的1刷到了内存中，内存结构如下：
&lt;img src=&quot;http://7xriy2.com1.z0.glb.clouddn.com/%E5%B9%B6%E5%8F%913.png&quot; alt=&quot;&quot; /&gt;
由于在线程启动的时候已经把i的值读到了cpu的cache中，所以在执行&lt;code&gt;j=i&lt;/code&gt;的时候，给j赋的值是0，而不是1。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所以上述的并发设计是不具备可见性的，因为在线程1修改了i的时候，线程2并没有立刻就能读到。面对这个问题，在Java中，我们可以使用&lt;code&gt;volatile&lt;/code&gt;关键字声明变量不使用CPU缓存，这样就能保证了并发的可见性。如下分析：&lt;/p&gt;

&lt;p&gt;第一步：线程1直接读取内存的i值&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xriy2.com1.z0.glb.clouddn.com/vvv1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第二步：执行&lt;code&gt;i=i+1&lt;/code&gt;，并把结果刷回内存，CPU2中的缓存失效，然后CPU2更新缓存，把i值赋值给j，并写回内存&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xriy2.com1.z0.glb.clouddn.com/vvv2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这样就保证了i的操作是具备可见性的了，所以线程1修改了i之后，线程2能立刻读到修改后的值。&lt;/p&gt;

&lt;p&gt;由于线程1修改了变量i的值之后，会立马把值刷到内存中，并使其它CPU中i的缓存失效，这样就能保证变量值修改后，其它线程能立刻读到最新的值。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;有序性&lt;/h3&gt;
&lt;p&gt;有序性指的是程序执行时按照代码的先后顺序执行。&lt;/p&gt;

&lt;h4 id=&quot;happen-before&quot;&gt;happen-before&lt;/h4&gt;
&lt;p&gt;如果A happen-before B，那么A的所有操作完成后并产生结果才会执行B操作，可以说A所做的任何操作对B都是可见的。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1.程序次序规则：在一个单独的线程中，按照程序代码的执行流顺序，（时间上）先执行的操作happen—before（时间上）后执行的操作；&lt;/li&gt;
  &lt;li&gt;2.管理锁定规则：一个unlock操作happen—before后面（时间上的先后顺序，下同）对同一个锁的lock操作；&lt;/li&gt;
  &lt;li&gt;3.volatile变量规则：对一个volatile变量的写操作happen—before后面对该变量的读操作。&lt;/li&gt;
  &lt;li&gt;4.线程启动规则：Thread对象的start（）方法happen—before此线程的每一个动作；&lt;/li&gt;
  &lt;li&gt;5.线程终止规则：线程的所有操作都happen—before对此线程的终止检测，可以通过Thread.join（）方法结束、Thread.isAlive（）的返回值等手段检测到线程已经终止执行；&lt;/li&gt;
  &lt;li&gt;6.线程中断规则：对线程interrupt（）方法的调用happen—before发生于被中断线程的代码检测到中断时事件的发生；&lt;/li&gt;
  &lt;li&gt;7.对象终结规则：一个对象的初始化完成（构造函数执行结束）happen—before它的finalize（）方法的开始；&lt;/li&gt;
  &lt;li&gt;8.传递性：如果操作A happen—before操作B，操作B happen—before操作C，那么可以得出A happen—before操作C。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-3&quot;&gt;指令重排&lt;/h4&gt;
&lt;p&gt;在Java中，为了提高执行效率、CPU的利用率，在执行字节码文件的时候会发生&lt;code&gt;指令重排&lt;/code&gt;操作。我们观察下面这段代码：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int a = 1; //语句1
int b = 2; //语句2
a += 1; //语句3
b += 1; //语句4
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;假设每行代码执行需要耗时1ms(实际上执行实际会比1ms短很多很多)，那么这四条语句会执行4ms时间，他们的执行顺序是：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;第1步：int a = 1; 
第2步：int b = 2; 
第3步：a += 1; 
第4步：b += 1; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们可以观察出这四行语句有如下的依赖关系：&lt;code&gt;语句3依赖语句1&lt;/code&gt;、&lt;code&gt;语句4依赖语句2&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;其实在Java中，JVM在执行时会发生指令重排，&lt;strong&gt;语句1和语句2&lt;/strong&gt;谁先执行是说不定的，&lt;strong&gt;语句3和语句4&lt;/strong&gt;谁先执行也是说不定的。但一定是&lt;strong&gt;语句1&lt;/strong&gt;执行完之后才执行&lt;strong&gt;语句3&lt;/strong&gt;，&lt;strong&gt;语句2&lt;/strong&gt;执行完之后才执行&lt;strong&gt;语句4&lt;/strong&gt;，这样就可以把语句1和语句3放在一个cpu中，语句2和语句4放在一个cpu，两个cpu并行执行。这样的话，执行的顺序可能就是：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;第1步：int a = 1; a += 1; 
第2步：int b = 2; b += 1;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;这样操作完只需要花费2ms，相比于之前的4ms，时间节省了一倍！&lt;/p&gt;

&lt;p&gt;虽然有序性在一定程度上提高了效率，但是在实际开发中也会带来一些灾难，例如下面的这段代码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//线程1:
context = loadContext();   //语句1
inited = true;             //语句2
 
//线程2:
while(!inited ){
  sleep()
}
doSomethingwithconfig(context);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;由于语句2可能会在语句1之前运行，所以可能会在context还没有被初始化的时候，就开始执行doSomethingwithconfig(context)了。
在Java中可以使用volatile关键字来对inited进行修饰，从而保证语句1 happen-before 语句2。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;总结&lt;/h3&gt;
&lt;p&gt;原子性保证了某（多）个操作在执行的时候不会被打断；&lt;br /&gt;
可见性保证了某个值被修改后在其它线程中可以立马看到，不会读到久值；&lt;br /&gt;
有序性保证了某些操作happen-before另外一些操作。&lt;/p&gt;

</description>
        <pubDate>Mon, 12 Jun 2017 00:00:00 +0800</pubDate>
        <link>http://leocook.github.io/2017/06/12/Java%E5%B9%B6%E5%8F%91(%E4%B8%80)-%E5%8E%9F%E5%AD%90%E6%80%A7-%E5%8F%AF%E8%A7%81%E6%80%A7-%E6%9C%89%E5%BA%8F%E6%80%A7/</link>
        <guid isPermaLink="true">http://leocook.github.io/2017/06/12/Java%E5%B9%B6%E5%8F%91(%E4%B8%80)-%E5%8E%9F%E5%AD%90%E6%80%A7-%E5%8F%AF%E8%A7%81%E6%80%A7-%E6%9C%89%E5%BA%8F%E6%80%A7/</guid>
        
        <category>原子性</category>
        
        <category>可见性</category>
        
        <category>有序性</category>
        
        <category>volatile</category>
        
        <category>happen-before</category>
        
        
        <category>java</category>
        
      </item>
    
      <item>
        <title>Jcf（java集合框架）概括</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;1.概述&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#iterator&quot; id=&quot;markdown-toc-iterator&quot;&gt;2.Iterator接口&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#collection&quot; id=&quot;markdown-toc-collection&quot;&gt;3.Collection&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#list&quot; id=&quot;markdown-toc-list&quot;&gt;3.1.List&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#set&quot; id=&quot;markdown-toc-set&quot;&gt;3.2.Set&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#queue&quot; id=&quot;markdown-toc-queue&quot;&gt;3.3.Queue&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#map&quot; id=&quot;markdown-toc-map&quot;&gt;4.Map&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#hashmap&quot; id=&quot;markdown-toc-hashmap&quot;&gt;4.1.HashMap&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#linkedhashmap&quot; id=&quot;markdown-toc-linkedhashmap&quot;&gt;4.2.LinkedHashMap&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#treemap&quot; id=&quot;markdown-toc-treemap&quot;&gt;4.3.TreeMap&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;5.其它集合&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#vector&quot; id=&quot;markdown-toc-vector&quot;&gt;5.1.Vector&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#stack&quot; id=&quot;markdown-toc-stack&quot;&gt;5.2.Stack&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#hashtable&quot; id=&quot;markdown-toc-hashtable&quot;&gt;5.3.HashTable&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;6.总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在Java中，集合也就是可以装载多个&lt;strong&gt;Java对象&lt;/strong&gt;的某种对象，所以Java的集合只能装载对象，在装载基础数据类型的时候，事实上装载的是基础类型锁对应的包装类。&lt;/p&gt;

&lt;p&gt;在学习JCF之前，我们先回顾一下，在计算机编程中我们期望&lt;strong&gt;集合能有哪些能力？&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;可以遍历集合全部的元素&lt;/li&gt;
  &lt;li&gt;关于集合类部元素的顺序
    &lt;ul&gt;
      &lt;li&gt;保留写入集合的顺序&lt;/li&gt;
      &lt;li&gt;可根据元素的大小自动排序&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;能快速查找出集合中的某个元素&lt;/li&gt;
  &lt;li&gt;可以根据位置来快速的修改元素&lt;/li&gt;
  &lt;li&gt;能高效的增加、删除集合中元素&lt;/li&gt;
  &lt;li&gt;集合内的元素可以快速去重&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;聊到集合，那肯定少不了下面几种基础的数据结构：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;线性存储
    &lt;ul&gt;
      &lt;li&gt;（可变）数组&lt;/li&gt;
      &lt;li&gt;链表&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Hash散列表&lt;/li&gt;
  &lt;li&gt;平衡树&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;1.概述&lt;/h2&gt;

&lt;p&gt;在Java2.0之前，只有一些简单的集合，例如Vector/Stack/Hashtable，由于这些集合直接使用synchronized关键字来实现线程安全，使得这些集合在使用的时候效率极低。从Java2.0开始之后，Java提供了一系列的Java Collections Framework（JCF）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xriy2.com1.z0.glb.clouddn.com/JCF.gif&quot; alt=&quot;JCF&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下面开始讲讲Java的集合框架（后面简称JCF）。JCF主要包括了两种类型的集合：&lt;strong&gt;Collection&lt;/strong&gt;和&lt;strong&gt;Map&lt;/strong&gt;。
Collection集合中的每个节点存放的是一个元素。Map集合中的每个元素存放的是&amp;lt;key,value&amp;gt;型的键值对。&lt;/p&gt;

&lt;h2 id=&quot;iterator&quot;&gt;2.Iterator接口&lt;/h2&gt;

&lt;p&gt;这是迭代器接口，不同集合的Iterator实现会不一样。例如ArrayList的Iterator实现是内部类Itr。
集合实现了Iterator之后，就可以使用迭代器顺序遍历了。
Iterator接口的定义如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Object next()：返回迭代器刚越过的元素的引用，返回值是Object，需要强制转换成自己需要的类型

boolean hasNext()：判断容器内是否还有可供访问的元素

void remove()：删除迭代器刚越过的元素
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;查看源码的话，会看到下面这一段代码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ......
 * @see Collection
 * @see ListIterator
 * @see Iterable
 public interface Iterator&amp;lt;E&amp;gt; {
 ......
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Iterable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所有实现了Iterable接口的集合，都可以使用增强的for循环，因为这个集合将会实现一个自己的Iterator。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ListIterator&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ListIterator是针对List实现的迭代器。由于List是顺序存储结构，所以除了next()、hasNext()、remove()方法，ListIterator还提供了List下标处理的相关方法，例如获取上/下一个元素以及它们的下标情况。&lt;/p&gt;

&lt;h2 id=&quot;collection&quot;&gt;3.Collection&lt;/h2&gt;

&lt;p&gt;Collection是Java集合层次结构中的根节点，实现Collection的集合中，有的是允许存放重复的元素，有的不允许有重复的元素（set），有的集合是有序的，有的则是无序的。Collection下面有三种子接口，分别是List、Set、Queue，下面逐一介绍。&lt;/p&gt;

&lt;h3 id=&quot;list&quot;&gt;3.1.List&lt;/h3&gt;

&lt;p&gt;实现List接口的集合有着两大特性：允许元素重复、元素是有序的。实现了List接口的集合，可以通过位置来操作集合的元素。下图展示了List接口中的全部方法：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xriy2.com1.z0.glb.clouddn.com/list.png&quot; alt=&quot;List&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下面是几个常用的List类型集合。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ArrayList&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;基于数组实现的线性存储集合。数组的大小可以变化，当元素个数超过了数组的大小，将会重新创建一个更大长度的数组，并把当前数组中的内容复制进去，每次长度增长为原来的1.5倍左右，可以查看源码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private void grow(int minCapacity) {
    // overflow-conscious code
    int oldCapacity = elementData.length;
    int newCapacity = oldCapacity + (oldCapacity &amp;gt;&amp;gt; 1);
    if (newCapacity - minCapacity &amp;lt; 0)
        newCapacity = minCapacity;
    if (newCapacity - MAX_ARRAY_SIZE &amp;gt; 0)
        newCapacity = hugeCapacity(minCapacity);
    // minCapacity is usually close to size, so this is a win:
    elementData = Arrays.copyOf(elementData, newCapacity);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;LinkedList&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;基于链表实现的线性存储集合。下面对比ArrayList和LinkedList：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;操作&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;ArrayList&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;LinkedList&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;内部数据结构&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;数组&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;链表&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;是否顺序结构&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;是&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;是&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;位置检索&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;快&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;慢&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;增、删&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;慢&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;快&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;set&quot;&gt;3.2.Set&lt;/h3&gt;

&lt;p&gt;实现Set接口的集合内部元素不重复，Set有三个具体的实现类：HashSet（散列集）、LinkedHashSet（顺序集）、TreeSet（平衡树）。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HashSet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;基于hash的无序set。其实HashSet内部是用HashMap实现的，HashMap后边会说到。在散列集中，有两个名词需要关注，初始容量和客座率。客座率是确定在增加规则集之前，该规则集的饱满程度，当元素个数超过了容量与客座率的乘积时，容量就会自动翻倍。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;LinkedHashSet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;基于链表实现的HashSet，LinkedHashSet中的元素是有序的，且顺序和写入的顺序一致。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;TreeSet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TreeSet是一个有序的Set，排序的比较器可以通过传入Comparator来自定义。&lt;/p&gt;

&lt;h3 id=&quot;queue&quot;&gt;3.3.Queue&lt;/h3&gt;

&lt;p&gt;队列是一种FIFO（First in first out）数据结构，元素在Queue的末尾添加，在头部删除。
&lt;img src=&quot;http://7xriy2.com1.z0.glb.clouddn.com/Queue.png&quot; alt=&quot;Queue&quot; /&gt;
Queue接口分别定义了上面6个方法，分别有插入、移除和检查的功能，有的方法在某些特殊情况下回报错，有的则不会，具体见下表：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Operation&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;抛出异常&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;返回特殊值&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;操作失败的条件&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Insert（插入）&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;add(e)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;offer(e),return false&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;当队列空间有限制，且没有多余的空间时&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Remove（移除）&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;remove()&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;poll(),return null&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;队列为空&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Examine（检查）&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;element()&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;peek(),return null&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;队列为空&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Queue平时用的不是很多，优先队列PriorityQueue有的时候会用到。&lt;/p&gt;

&lt;h2 id=&quot;map&quot;&gt;4.Map&lt;/h2&gt;

&lt;p&gt;Map是存储键值对映射（key,value）的容器类，可以存储任意类型的对象。但是key不能重复，且一个key只能对应一个值。如果使用对象作为key,那么必须要考虑一下该对象类的hashCode方法和equals方法是否需要重写，因为map是用着两个方法来判断key是否相等的，其中hashCode是用来加速判断的，如果hashCode相等，还会用equals方法来判断。&lt;/p&gt;

&lt;p&gt;常用到的Map接口实现类，有三个：HashMap、LinkedHashMap、TreeMap。Map接口定义的方法列表可见下图：
&lt;img src=&quot;http://7xriy2.com1.z0.glb.clouddn.com/map.png&quot; alt=&quot;Map&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;hashmap&quot;&gt;4.1.HashMap&lt;/h3&gt;

&lt;p&gt;HashMap是基于数组+链表实现的Hash散列Map结构，数组里存放着索引，链表里存放的是元素数据。(key,value)键值对中，key的hash值就是数组的下标。&lt;/p&gt;

&lt;p&gt;在Jdk1.8中，对HashMap做了优化，当链表的长度超过8时，链表结构将会变为了平衡树，这样做主要是为了在HashMap里的元素较多时，能够加快查找的速度。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xriy2.com1.z0.glb.clouddn.com/map%20struct.png&quot; alt=&quot;map结构&quot; /&gt;&lt;/p&gt;

&lt;p&gt;关于HashMap，其实有很多可以细聊的，它与很多集合都有着关系。后边会再来一篇，详细说一下Java中HashMap的设计，以及Java中散列存储的设计思想。&lt;/p&gt;

&lt;h3 id=&quot;linkedhashmap&quot;&gt;4.2.LinkedHashMap&lt;/h3&gt;

&lt;p&gt;LinkedHashMap类继承了HashMap类，HashMap中的元素是没有顺序的，但是LinkedHashMap中的元素是有顺序的。
LinkedHashMap里的元素顺序有两种排序方式：第一种是根据元素key被插入的顺序;第二种是根据元素被访问的顺序来排序（最近最少被访问的元素优先）。&lt;/p&gt;

&lt;h3 id=&quot;treemap&quot;&gt;4.3.TreeMap&lt;/h3&gt;

&lt;p&gt;TreeMap是基于红黑树结构来实现的，可以使用Comparable或Comparator接口来实现排序的比较算法。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;在日常开发中，如果不用考虑键值对元素的顺序，就使用HashMap；如果需要考虑元素插入顺序，就使用LinkedHashMap；如果需要根据Key自定义排序规则，那么就使用TreeMap。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-1&quot;&gt;5.其它集合&lt;/h2&gt;

&lt;p&gt;下面简单说几个不是很常用的集合。&lt;/p&gt;

&lt;h3 id=&quot;vector&quot;&gt;5.1.Vector&lt;/h3&gt;

&lt;p&gt;Vector的使用和ArrayList的使用基本一样，它是线程安全的线程安全，但是Vector的线程安全是使用关键字synchronized修饰实现的，所以Vector的效率很低。相对来说，ArrayList更加高效！&lt;/p&gt;

&lt;h3 id=&quot;stack&quot;&gt;5.2.Stack&lt;/h3&gt;

&lt;p&gt;Stack是Java2之前设计的栈结构，内部是使用数组实现的。我们知道栈结构的操作中会频繁的出现入栈和出栈，那么使用数组结构的话，在栈结构变长时，自然会带来性能上的折扣。
LinkedList也具备栈的功能，而且是基于链表实现的，所以在开发需要用到栈结构时，推荐使用LinkedList。&lt;/p&gt;

&lt;h3 id=&quot;hashtable&quot;&gt;5.3.HashTable&lt;/h3&gt;

&lt;p&gt;HashTable的功能和HashMap相似，它是Dictionary类的，并且使用了synchronized关键字实现了线程安全，所以性能会很差！
除此之外，HashTable的Key不能为空指针null,但是HashMap的key可以为null。&lt;/p&gt;

&lt;p&gt;关于集合的线程安全，后边会另写一篇详细说明。&lt;/p&gt;

&lt;p&gt;参考地址：
http://www.open-open.com/lib/view/open1474167415464.html
http://www.cnblogs.com/CarpenterLee/p/5414253.html&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;6.总结&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;JCF接口架构&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://7xriy2.com1.z0.glb.clouddn.com/JCF.gif&quot; alt=&quot;JCF接口架构&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;常用的集合分类情况&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://7xriy2.com1.z0.glb.clouddn.com/jcf%E4%BD%BF%E7%94%A8.png&quot; alt=&quot;常用的集合分类情况&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;接口功能实现&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面表格描述的比较好，每个接口对应不同数据结构的实现。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xriy2.com1.z0.glb.clouddn.com/jcf%20imp.png&quot; alt=&quot;JCF 接口实现&quot; /&gt;&lt;/p&gt;

&lt;p&gt;参考文档：
http://docs.oracle.com/javase/6/docs/technotes/guides/collections/overview.html
http://www.jianshu.com/p/63e76826e852&lt;/p&gt;
</description>
        <pubDate>Mon, 05 Jun 2017 00:00:00 +0800</pubDate>
        <link>http://leocook.github.io/2017/06/05/JCF-Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-%E6%A6%82%E6%8B%AC/</link>
        <guid isPermaLink="true">http://leocook.github.io/2017/06/05/JCF-Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-%E6%A6%82%E6%8B%AC/</guid>
        
        <category>java</category>
        
        
        <category>java</category>
        
      </item>
    
      <item>
        <title>Scipy生态系统初探</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#scipy&quot; id=&quot;markdown-toc-scipy&quot;&gt;1.SciPy技术栈的安装&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#numpyscipy&quot; id=&quot;markdown-toc-numpyscipy&quot;&gt;2.NumPy&amp;amp;scipy测试&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#matplotlib&quot; id=&quot;markdown-toc-matplotlib&quot;&gt;2.Matplotlib测试&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ipython&quot; id=&quot;markdown-toc-ipython&quot;&gt;3.IPython&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#scipy-1&quot; id=&quot;markdown-toc-scipy-1&quot;&gt;4.关于SciPy技术栈的发行版&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#anaconda&quot; id=&quot;markdown-toc-anaconda&quot;&gt;5.使用Anaconda管理软件包&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#theano&quot; id=&quot;markdown-toc-theano&quot;&gt;5.1. 安装Theano&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#tensorflow&quot; id=&quot;markdown-toc-tensorflow&quot;&gt;5.2 安装Tensorflow&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SciPy是一个基于Python的开源生态系统，也称为&lt;code&gt;SciPy技术栈&lt;/code&gt;，主要为数学计算、科学研究以及工程计算提供服务。&lt;/p&gt;

&lt;p&gt;Anaconda则是SciPy技术栈的发行版，它解决了SciPy技术栈各个组件之间的兼容、以及管理工作。
&lt;img src=&quot;http://7xriy2.com1.z0.glb.clouddn.com/SciPy%20stack.png&quot; alt=&quot;SciPy stack&quot; title=&quot;SciPy stack&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下面是SciPy生态圈中一些常用的包：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;NumPy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;NumPy是Python科学计算中的一个比较基础的包，它主要有下面几项功能：&lt;/p&gt;

&lt;p&gt;a.强大的矩阵计算能力&lt;/p&gt;

&lt;p&gt;b.用于整合C/C++和Fortran代码的工具包&lt;/p&gt;

&lt;p&gt;c.比较成熟的（广播）函数库&lt;/p&gt;

&lt;p&gt;d.支持线性代数求解、傅里叶变换，以及随机数处理&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SciPy library&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SciPy是组成SciPy技术栈的核心包之一，它的相关API使用起来都比较友好，且执行效率高。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Matplotlib&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Matplotlib是一个基于Python的2D绘图库，能绘制出出版社级别的高质量图。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;IPython&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一个功能强大的Python命令行，也是Jupyter的内核。
关于Jupyter，被人们广为熟知的有Jupyter Notebook，之前的名字叫IPython Notebook，是一个交互式笔记本，可以运行几十种语言。在Jupyter Notebook中，代码可以实时的生成图像、视频等。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sympy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;基于Python的符号计算包。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;pandas&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;pandas提供一些高效、易用的数据结构，以及数据分析工具。&lt;/p&gt;

&lt;h2 id=&quot;scipy&quot;&gt;1.SciPy技术栈的安装&lt;/h2&gt;

&lt;p&gt;直接使用pip安装&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install --user numpy scipy matplotlib ipython jupyter pandas sympy nose
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;numpyscipy&quot;&gt;2.NumPy&amp;amp;scipy测试&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import numpy as np
&amp;gt;&amp;gt;&amp;gt; a = np.arange(15).reshape(3, 5)
&amp;gt;&amp;gt;&amp;gt; a
array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14]])
&amp;gt;&amp;gt;&amp;gt; a.shape
(3, 5)
&amp;gt;&amp;gt;&amp;gt; a.ndim
2
&amp;gt;&amp;gt;&amp;gt; a.dtype.name
'int64'
&amp;gt;&amp;gt;&amp;gt; a.itemsize
8
&amp;gt;&amp;gt;&amp;gt; a.size
15
&amp;gt;&amp;gt;&amp;gt; type(a)
&amp;lt;type 'numpy.ndarray'&amp;gt;
&amp;gt;&amp;gt;&amp;gt; b = np.array([6, 7, 8])
&amp;gt;&amp;gt;&amp;gt; b
array([6, 7, 8])
&amp;gt;&amp;gt;&amp;gt; type(b)
&amp;lt;type 'numpy.ndarray'&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python
&amp;gt;&amp;gt;&amp;gt; import numpy as np
&amp;gt;&amp;gt;&amp;gt; np.test('full')
&amp;gt;&amp;gt;&amp;gt; import scipy
&amp;gt;&amp;gt;&amp;gt; scipy.test()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;matplotlib&quot;&gt;2.Matplotlib测试&lt;/h2&gt;

&lt;p&gt;关于matplotlib的例子，在http://matplotlib.org/examples/index.html这里有很多，下面随机选了两个运行一下作为例子让大家看下。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;animate_decay&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python animate_decay.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://7xriy2.com1.z0.glb.clouddn.com/animate_decay.gif&quot; alt=&quot;animate_decay&quot; title=&quot;animate_decay&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;dynamic_image&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python dynamic_image.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://7xriy2.com1.z0.glb.clouddn.com/dynamic_image.gif&quot; alt=&quot;dynamic_image&quot; title=&quot;dynamic_image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ipython&quot;&gt;3.IPython&lt;/h2&gt;

&lt;p&gt;直接使用命令ipython进入&lt;/p&gt;

&lt;h2 id=&quot;scipy-1&quot;&gt;4.关于SciPy技术栈的发行版&lt;/h2&gt;

&lt;p&gt;我们知道SciPy技术栈内有很多技术组件，那么不同的组件配合使用时，肯定会有兼容的问题。我们期望能有个工具，它可以帮助我们管理SciPy技术栈的各个组件，保证他们的兼容性，同事也方便我们安装管理。它就是&lt;code&gt;Anaconda&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;可以在这里选择自己的操作系统环境&lt;code&gt;https://www.continuum.io/downloads&lt;/code&gt;.
笔者使用的是macOS，在安装了Anaconda之后，系统的Python环境都变为了Anaconda安装的python了：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;leocookMacBook-Pro:~ leocook$ which python
/Users/wulin/anaconda/bin/python
leocookMacBook-Pro:~ leocook$ whereis python
/usr/bin/python
leocookMacBook-Pro:~ leocook$ python
Python 2.7.13 |Anaconda 4.3.1 (x86_64)| (default, Dec 20 2016, 23:05:08)
[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.57)] on darwin
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
Anaconda is brought to you by Continuum Analytics.
Please check out: http://continuum.io/thanks and https://anaconda.org
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;可以使用Anaconda命令查看我们安装了SciPy技术栈中的哪些组件：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;leocookMacBook-Pro:~ leocook$ conda list
# packages in environment at /Users/leocook/anaconda:
#
_license                  1.1                      py27_1
alabaster                 0.7.9                    py27_0
anaconda                  4.3.1               np111py27_0
anaconda-client           1.6.0                    py27_0
anaconda-navigator        1.5.0                    py27_0
anaconda-project          0.4.1                    py27_0
appdirs                   1.4.3                     &amp;lt;pip&amp;gt;
appnope                   0.1.0                    py27_0
appscript                 1.0.1                    py27_0
argcomplete               1.0.0                    py27_1
astroid                   1.4.9                    py27_0
astropy                   1.3                 np111py27_0
babel                     2.3.4                    py27_0
backports                 1.0                      py27_0
backports_abc             0.5                      py27_0
beautifulsoup4            4.5.3                    py27_0
bitarray                  0.8.1                    py27_0
blaze                     0.10.1                   py27_0
bokeh                     0.12.4                   py27_0
boto                      2.45.0                   py27_0
bottleneck                1.2.0               np111py27_0
cdecimal                  2.3                      py27_2
cffi                      1.9.1                    py27_0
chardet                   2.3.0                    py27_0
chest                     0.2.3                    py27_0
click                     6.7                      py27_0
cloudpickle               0.2.2                    py27_0
clyent                    1.2.2                    py27_0
colorama                  0.3.7                    py27_0
conda                     4.3.17                   py27_0
conda-env                 2.6.0                         0
configobj                 5.0.6                    py27_0
configparser              3.5.0                    py27_0
contextlib2               0.5.4                    py27_0
cryptography              1.7.1                    py27_0
curl                      7.52.1                        0
cycler                    0.10.0                   py27_0
cython                    0.25.2                   py27_0
cytoolz                   0.8.2                    py27_0
dask                      0.13.0                   py27_0
datashape                 0.5.4                    py27_0
decorator                 4.0.11                   py27_0
dill                      0.2.5                    py27_0
docutils                  0.13.1                   py27_0
entrypoints               0.2.2                    py27_0
enum34                    1.1.6                    py27_0
et_xmlfile                1.0.1                    py27_0
fastcache                 1.0.2                    py27_1
flask                     0.12                     py27_0
flask-cors                3.0.2                    py27_0
freetype                  2.5.5                         2
funcsigs                  1.0.2                     &amp;lt;pip&amp;gt;
funcsigs                  1.0.2                    py27_0
functools32               3.2.3.2                  py27_0
futures                   3.0.5                    py27_0
get_terminal_size         1.0.0                    py27_0
gevent                    1.2.1                    py27_0
greenlet                  0.4.11                   py27_0
grin                      1.2.1                    py27_3
h5py                      2.6.0               np111py27_2
hdf5                      1.8.17                        1
heapdict                  1.0.0                    py27_1
icu                       54.1                          0
idna                      2.2                      py27_0
imagesize                 0.7.1                    py27_0
ipaddress                 1.0.18                   py27_0
ipykernel                 4.5.2                    py27_0
ipython                   5.1.0                    py27_1
ipython_genutils          0.1.0                    py27_0
ipywidgets                5.2.2                    py27_1
isort                     4.2.5                    py27_0
itsdangerous              0.24                     py27_0
jbig                      2.1                           0
jdcal                     1.3                      py27_0
jedi                      0.9.0                    py27_1
jinja2                    2.9.4                    py27_0
jpeg                      9b                            0
jsonschema                2.5.1                    py27_0
jupyter                   1.0.0                    py27_3
jupyter_client            4.4.0                    py27_0
jupyter_console           5.0.0                    py27_0
jupyter_core              4.2.1                    py27_0
Keras                     2.0.4                     &amp;lt;pip&amp;gt;
lazy-object-proxy         1.2.2                    py27_0
libgpuarray               0.6.4                         0
libiconv                  1.14                          0
libpng                    1.6.27                        0
libtiff                   4.0.6                         3
libxml2                   2.9.4                         0
libxslt                   1.1.29                        0
llvmlite                  0.15.0                   py27_0
locket                    0.2.0                    py27_1
lxml                      3.7.2                    py27_0
mako                      1.0.6                    py27_0
markupsafe                0.23                     py27_2
matplotlib                2.0.0               np111py27_0
mistune                   0.7.3                    py27_1
mkl                       2017.0.1                      0
mkl-service               1.1.2                    py27_3
mock                      2.0.0                     &amp;lt;pip&amp;gt;
mpmath                    0.19                     py27_1
multipledispatch          0.4.9                    py27_0
nbconvert                 4.2.0                    py27_0
nbformat                  4.2.0                    py27_0
networkx                  1.11                     py27_0
nltk                      3.2.2                    py27_0
nose                      1.3.7                    py27_1
notebook                  4.3.1                    py27_0
numba                     0.30.1              np111py27_0
numexpr                   2.6.1               np111py27_2
numpy                     1.12.1                    &amp;lt;pip&amp;gt;
numpy                     1.11.3                   py27_0
numpydoc                  0.6.0                    py27_0
odo                       0.5.0                    py27_1
openpyxl                  2.4.1                    py27_0
openssl                   1.0.2k                        1
packaging                 16.8                      &amp;lt;pip&amp;gt;
pandas                    0.19.2              np111py27_1
partd                     0.3.7                    py27_0
path.py                   10.0                     py27_0
pathlib2                  2.2.0                    py27_0
patsy                     0.4.1                    py27_0
pbr                       3.0.0                     &amp;lt;pip&amp;gt;
pep8                      1.7.0                    py27_0
pexpect                   4.2.1                    py27_0
pickleshare               0.7.4                    py27_0
pillow                    4.0.0                    py27_0
pip                       9.0.1                    py27_1
ply                       3.9                      py27_0
prompt_toolkit            1.0.9                    py27_0
protobuf                  3.3.0                     &amp;lt;pip&amp;gt;
psutil                    5.0.1                    py27_0
ptyprocess                0.5.1                    py27_0
py                        1.4.32                   py27_0
pyasn1                    0.1.9                    py27_0
pyaudio                   0.2.7                    py27_0
pycosat                   0.6.1                    py27_1
pycparser                 2.17                     py27_0
pycrypto                  2.6.1                    py27_4
pycurl                    7.43.0                   py27_2
pyflakes                  1.5.0                    py27_0
pygments                  2.1.3                    py27_0
pygpu                     0.6.4                    py27_0
pylint                    1.6.4                    py27_1
pyopenssl                 16.2.0                   py27_0
pyparsing                 2.2.0                     &amp;lt;pip&amp;gt;
pyparsing                 2.1.4                    py27_0
pyqt                      5.6.0                    py27_1
pytables                  3.3.0               np111py27_0
pytest                    3.0.5                    py27_0
python                    2.7.13                        0
python-dateutil           2.6.0                    py27_0
python.app                1.2                      py27_4
pytz                      2016.10                  py27_0
pyyaml                    3.12                     py27_0
pyzmq                     16.0.2                   py27_0
qt                        5.6.2                         0
qtawesome                 0.4.3                    py27_0
qtconsole                 4.2.1                    py27_1
qtpy                      1.2.1                    py27_0
readline                  6.2                           2
redis                     3.2.0                         0
redis-py                  2.10.5                   py27_0
requests                  2.12.4                   py27_0
rope                      0.9.4                    py27_1
ruamel_yaml               0.11.14                  py27_1
scandir                   1.4                      py27_0
scikit-image              0.12.3              np111py27_1
scikit-learn              0.18.1              np111py27_1
scipy                     0.18.1              np111py27_1
seaborn                   0.7.1                    py27_0
setuptools                27.2.0                   py27_0
setuptools                35.0.2                    &amp;lt;pip&amp;gt;
simplegeneric             0.8.1                    py27_1
singledispatch            3.4.0.3                  py27_0
sip                       4.18                     py27_0
six                       1.10.0                   py27_0
six                       1.10.0                    &amp;lt;pip&amp;gt;
snowballstemmer           1.2.1                    py27_0
sockjs-tornado            1.0.3                    py27_0
sphinx                    1.5.1                    py27_0
spyder                    3.1.2                    py27_0
sqlalchemy                1.1.5                    py27_0
sqlite                    3.13.0                        0
ssl_match_hostname        3.4.0.2                  py27_1
statsmodels               0.6.1               np111py27_1
subprocess32              3.2.7                    py27_0
sympy                     1.0                      py27_0
tensorflow                1.1.0                     &amp;lt;pip&amp;gt;
terminado                 0.6                      py27_0
theano                    0.9.0                    py27_0
tk                        8.5.18                        0
toolz                     0.8.2                    py27_0
tornado                   4.4.2                    py27_0
traitlets                 4.3.1                    py27_0
unicodecsv                0.14.1                   py27_0
wcwidth                   0.1.7                    py27_0
Werkzeug                  0.12.1                    &amp;lt;pip&amp;gt;
werkzeug                  0.11.15                  py27_0
wheel                     0.29.0                    &amp;lt;pip&amp;gt;
wheel                     0.29.0                   py27_0
widgetsnbextension        1.2.6                    py27_0
wrapt                     1.10.8                   py27_0
xlrd                      1.0.0                    py27_0
xlsxwriter                0.9.6                    py27_0
xlwings                   0.10.2                   py27_0
xlwt                      1.2.0                    py27_0
xz                        5.2.2                         1
yaml                      0.1.6                         0
zlib                      1.2.8                         3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;anaconda&quot;&gt;5.使用Anaconda管理软件包&lt;/h2&gt;

&lt;h3 id=&quot;theano&quot;&gt;5.1. 安装Theano&lt;/h3&gt;

&lt;p&gt;Theano是一个基于Python的深度学习库。默认Theano是没有被安装的，那么我们下面使用Anaconda来安装它。
首先我们使用命令来查看一下Theano包的情况：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;leocookMacBook-Pro:~ leocook$ conda search theano
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后得到：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
Fetching package metadata .........
theano                       0.8.2                    py35_0  defaults
                             0.8.2                    py34_0  defaults
                             0.8.2                    py27_0  defaults
                             0.9.0                    py35_0  defaults
                             0.9.0                    py36_0  defaults
                          *  0.9.0                    py27_0  defaults
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们可以看到有多个版面，然后我们直接运行下面的命令：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conda install theano
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;它会选择和我们py版本兼容的最新版本&lt;code&gt;0.9.0                    py27_0&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;tensorflow&quot;&gt;5.2 安装Tensorflow&lt;/h3&gt;

&lt;p&gt;Tensorflow是Google开源的一个人工智能学习系统。我们使用&lt;code&gt;conda search tensorflow&lt;/code&gt;命令查看发现Anaconda库中没有Tensorflow的包。&lt;/p&gt;

&lt;p&gt;其实，我们也可以用Anaconda来管理那些使用其他方式安装的包，例如使用pip安装的包。下面简单说明一下使用Anaconda管理使用pip安装的Tensorflow。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;创建一个名称为tensorflow的conda环境&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conda create -n tensorflow
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;激活conda环境&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;source activate tensorflow
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;激活环境后，在这里执行命令安装的程序，都会被Anaconda管理。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用pip来安装TensorFlow&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在这里&lt;code&gt;https://www.tensorflow.org/install/install_mac#the_url_of_the_tensorflow_python_package&lt;/code&gt;找到对应版本的URL，也就是下面命令中将会使用到的&lt;code&gt;$TF_PYTHON_URL&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(tensorflow)$ pip install --ignore-installed --upgrade $TF_PYTHON_URL
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;例如笔者的是：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install --ignore-installed --upgrade https://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-1.1.0-py2-none-any.whl
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;安装完成后，退出tensorflow这个Anaconda环境：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;source deactivate tensorflow
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Wed, 10 May 2017 00:00:00 +0800</pubDate>
        <link>http://leocook.github.io/2017/05/10/SciPy%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F%E5%88%9D%E6%8E%A2/</link>
        <guid isPermaLink="true">http://leocook.github.io/2017/05/10/SciPy%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F%E5%88%9D%E6%8E%A2/</guid>
        
        <category>SciPy</category>
        
        <category>Anaconda</category>
        
        <category>NumPy</category>
        
        <category>Matplotlib</category>
        
        <category>IPython</category>
        
        <category>Sympy</category>
        
        <category>pandas</category>
        
        <category>Tensorflow</category>
        
        <category>Theano</category>
        
        
        <category>python</category>
        
        <category>SciPy</category>
        
      </item>
    
      <item>
        <title>Jvm内存模型</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;1.程序计数器&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#jvm&quot; id=&quot;markdown-toc-jvm&quot;&gt;2.JVM栈&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;3.本地方法栈&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#java&quot; id=&quot;markdown-toc-java&quot;&gt;4.Java堆&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;5.方法区&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;5.1.运行时常量池&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Java开发人员无需过多考虑因指针引起的如内存泄露和溢出问题，也不用为每个new出来的对象使用delete等方法来释放内存。JVM已经为开发人员处理好了这一切，但是由于各种原因，Java程序也会出现内存溢出等问题，如果不了解JVM的内存模型以及相关的管理策略，那么整个排查过程将会变得十分艰难。
&lt;img src=&quot;http://7xriy2.com1.z0.glb.clouddn.com/JVM%20mem%20model.png&quot; alt=&quot;JVM mem model&quot; title=&quot;JVM mem model&quot; /&gt;&lt;/p&gt;

&lt;p&gt;JVM的运行时内存共有5块区域，其中有3个是线程间隔离的，有2个是线程间共享的。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;1.程序计数器&lt;/h2&gt;
&lt;p&gt;它是线程间隔离的。字节码的行号指示器，用来标记当前线程所执行的字节码的行号。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Q1. 为什么每个线程都需要一个独立的计数器呢？
因为JVM的多线程是轮询在CPU上执行的，任何一个时间点，一个处理器上最多只有一条指定在执行。为保证线程切换后，能恢复从正确的执行位置执行指令，所以给每个线程都独立的使用一块空间作为程序计数器，使得多线程之间计数器互不影响。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;jvm&quot;&gt;2.JVM栈&lt;/h2&gt;

&lt;p&gt;它是线程间隔离的，也就是常说到的“栈内存”。每个方法执行的时候都会创建一个栈桢，用来存放局部变量表用来存放该方法内使用到的局部变量表、操作数栈、动态链接、方法出口灯信息。一个方法从调用到执行完成的过程也就对应着一个栈桢在JVM栈中入栈到出栈的过程。
局部变量表中存放了编译器可确定的各种基本数据类型（例如：boolean、byte、char、short等等），以及对象的引用。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;3.本地方法栈&lt;/h2&gt;

&lt;p&gt;它是线程间隔离的，和“JVM栈”的区别是：“JVM栈”是执行Java方法时所使用到的内存；“本地方法栈”是JVM执行Native方法时所使用到的内存存。
这一块内存在JVM规范中没有强制指定，所以不同的虚拟机实现它的方法可能不一样。Sum HotSpot虚拟机是把“JVM栈”和“本地方法栈”合二为一的。&lt;/p&gt;

&lt;h2 id=&quot;java&quot;&gt;4.Java堆&lt;/h2&gt;
&lt;p&gt;它是线程间共享的，存放JVM对象实例，也是GC发生的主要区域，所以也被称为GC堆。
关于GC算法垃圾回收器，后边会介绍。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;5.方法区&lt;/h2&gt;
&lt;p&gt;它是线程间共享的，存放已被JVM加载的类信息、常量、静态变量、即时编译器编译后的代码等。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;5.1.运行时常量池&lt;/h3&gt;
&lt;p&gt;它是方法区的一部分，存放编译器生成的各种常量值。&lt;/p&gt;
</description>
        <pubDate>Wed, 05 Apr 2017 00:00:00 +0800</pubDate>
        <link>http://leocook.github.io/2017/04/05/JVM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</link>
        <guid isPermaLink="true">http://leocook.github.io/2017/04/05/JVM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</guid>
        
        <category>jvm</category>
        
        
        <category>java</category>
        
      </item>
    
  </channel>
</rss>
