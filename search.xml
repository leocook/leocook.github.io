<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>均值，中位数，众数，方差，标准差，与常见的统计图表</title>
      <link href="/2019/05/23/math-2019-05-23-%E5%9D%87%E5%80%BC%EF%BC%8C%E4%B8%AD%E4%BD%8D%E6%95%B0%EF%BC%8C%E4%BC%97%E6%95%B0%EF%BC%8C%E6%96%B9%E5%B7%AE%EF%BC%8C%E6%A0%87%E5%87%86%E5%B7%AE%EF%BC%8C%E4%B8%8E%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BB%9F%E8%AE%A1%E5%9B%BE%E8%A1%A8/"/>
      <url>/2019/05/23/math-2019-05-23-%E5%9D%87%E5%80%BC%EF%BC%8C%E4%B8%AD%E4%BD%8D%E6%95%B0%EF%BC%8C%E4%BC%97%E6%95%B0%EF%BC%8C%E6%96%B9%E5%B7%AE%EF%BC%8C%E6%A0%87%E5%87%86%E5%B7%AE%EF%BC%8C%E4%B8%8E%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BB%9F%E8%AE%A1%E5%9B%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><p>统计学是应用数学的一个分支，主要通过利用<b>概率论</b>建立数学模型，收集所观察系统的数据，进行量化的分析、总结，并进而进行推断和预测，为相关决策提供依据和参考。它被广泛的应用在各门学科之上，从物理和社会科学到人文科学，甚至被用来工商业及政府的情报决策之上。当前应用比较热门的领域有：经济学、医学，以及心理学等等。</p><p>概率论是统计学的基础，统计学冲锋在应用第一线，概率论提供武器。说到概率论就不得不提<b>柯尔莫戈洛夫</b>，他是20世纪全球最具有影响力的数学家之一，同时也是他创建了现代概率论。</p><p>统计学主要分为描述统计学和推断统计学：</p><ul><li><p>描述统计学<br>使用特定的数字或图表来体现数据的集中程度和离散程度。例如：一次考试的平均分，最高分，各个分段的人数分布等。</p></li><li><p>推断统计学<br>根据样本数据推断总体数据特征。例如：产品质量检验，一般是抽检方式，使用抽样样本的质量合格率作为总体的质量合格率的一个估计。</p></li></ul><h2 id="2-集中趋势描述"><a href="#2-集中趋势描述" class="headerlink" title="2.集中趋势描述"></a>2.集中趋势描述</h2><p>样本集中趋势的统计量一般有均值、中位数、众数来描述：</p><ul><li>均值：算数平均数，描述平均水平使用；</li><li>中位数：将数据按大小排序后，位于正中间的数，描述中等水平；</li><li>众数：数据中出现最多的数，描述一般水平。</li></ul><h3 id="2-1-均值"><a href="#2-1-均值" class="headerlink" title="2.1.均值"></a>2.1.均值</h3><p>算术平均数，没啥好解释的。</p><h3 id="2-2-中位数"><a href="#2-2-中位数" class="headerlink" title="2.2.中位数"></a>2.2.中位数</h3><p>一批数据排序后中间位置的数。若这批数据的个数为奇数，中位数就是最中间的数；若这批数据个数为偶数，最中间的数据有2个，那么中位数也就是这2个数据的算术平均数。</p><h3 id="2-3-众数"><a href="#2-3-众数" class="headerlink" title="2.3.众数"></a>2.3.众数</h3><p>数据中出现次数最多，且出现次数大于或等于2的数。一组数据中可能存在多个众数，也可能不存在众数。例如：{1 2 2 3 3}中的众数是2和3；{1 2 3 4 5}中没有众数。</p><p>众数不仅适用于数值型数据，对非数值型数据也同样使用。例如：{苹果，苹果，香蕉，橙，橙，橙，桃}这一组数据，不存在均值和中位数，但是存在着众数”橙”。</p><h3 id="2-4-均值、中位数、众数对比"><a href="#2-4-均值、中位数、众数对比" class="headerlink" title="2.4.均值、中位数、众数对比"></a>2.4.均值、中位数、众数对比</h3><div class="table-container"><table><thead><tr><th></th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>均值</td><td>重复利用所有数据，适用性强</td><td>容易受到极端值影响</td></tr><tr><td>中位数</td><td>不受极端值影响</td><td>缺乏敏感性</td></tr><tr><td>众数</td><td>当数据具有明显的集中势时，代表性好；不受极端值影响</td><td>缺乏唯一性：可能有一个，可能有两个，可能一个都没有</td></tr></tbody></table></div><h2 id="3-离散程度描述"><a href="#3-离散程度描述" class="headerlink" title="3.离散程度描述"></a>3.离散程度描述</h2><p>例如有两组数据，A : {1,2,5,8,9}, B : {3,4,5,6,7}。两组数据的均值都是5，但是可以看出B组的数据更加集中。除了描述集中趋势的统计量，也需要描述数据离散程度的统计量，一般有极差、方差、标准差。</p><h3 id="3-1-极差"><a href="#3-1-极差" class="headerlink" title="3.1.极差"></a>3.1.极差</h3><p>$极差 = 最大值-最小值$。例如上面描述的集合A和B，A的极差：$9-1=8$，B的极差：$7-3=4$。A和B集合的均值相等，但是A的极差要大于B的极差，所以A比B要更分散。</p><p>同样的，只用极差来衡量数据的离散程度也存在不足，例如集合C:{1 2 5 8 9}，和集合D:{1 4 5 6 9}。均值和极差都相等，但明显的C集合要比D集合更离散。</p><h3 id="3-2-方差"><a href="#3-2-方差" class="headerlink" title="3.2.方差"></a>3.2.方差</h3><p>统计学上，一般比较常用方差来描述数据的离散程度。方差的现实意义是：数据离中心越远越离散。使用$X_i$表示集合中的第$i$个数值，$u$表示数据集的均值，则方差$\sigma^2$的表达式如下：</p><p>$\sigma^2 = \frac{1}{N} \sum^{N}_{i}{(X_i - u)^2}$</p><ul><li>对于上述的集合A : {1,2,5,8,9}, B : {3,4,5,6,7}，他们的方差分别是：</li></ul><p>$\sigma^2_A = \frac{1}{5}[(1-5)^2+(2-5)^2+(5-5)^2+(8-5)^2+(9-5)^2]=10$</p><p>$\sigma^2_B = \frac{1}{5}[(3-5)^2+(4-5)^2+(5-5)^2+(6-5)^2+(9-5)^2]=2$</p><ul><li>对于上述的集合C:{1 2 5 8 9}，和集合D:{1 4 5 6 9}，他们的方差分别是：</li></ul><p>$\sigma^2_C = 10$</p><p>$\sigma^2_D = \frac{1}{5}[(1-5)^2+(4-5)^2+(5-5)^2+(6-5)^2+(9-5)^2]=6.8$</p><p>我们对方差进行推导转换得到：<br>$\sigma^2 = \frac{1}{N}\sum^{N}_{i=1}{(X_i - u)^2}$<br>$ = \frac{1}{N} [(X_1 - u)^2 + (X_2 - u)^2 + … + (X_N - u)^2]$<br>$ = \frac{1}{N} [(X_1^2 - 2X_1u + u^2) + (X_2^2 - 2X_2u + u^2) + … + (X_N^2 - 2X_Nu + u^2)]$<br>$ = \frac{1}{N} [X_1^2+X_2^2+…+X_N^2 - 2u(X_1+X_2+…+X_N)+Nu^2]$<br>$ = \frac{1}{N} (X_1^2+X_2^2+…+X_N^2) - 2u·\frac{1}{N}(X_1+X_2+…+X_N)+u^2$<br>$ = \frac{1}{N}\sum^{N}_{i=1}X_i^2 - 2u^2 + u^2$<br>$ = \frac{1}{N}\sum^{N}_{i=1}X_i^2-u^2 $</p><p>这么来看，方差的计算就变得简单很多了。</p><h3 id="3-3-标准差"><a href="#3-3-标准差" class="headerlink" title="3.3.标准差"></a>3.3.标准差</h3><p>标准差：$\sigma = \sqrt[2]{\sigma^2}$</p><p>和方差一样，标准差的值越大，表示数据越分散。</p><h2 id="4-常见的数学图形"><a href="#4-常见的数学图形" class="headerlink" title="4.常见的数学图形"></a>4.常见的数学图形</h2><h3 id="4-1-直方图"><a href="#4-1-直方图" class="headerlink" title="4.1.直方图"></a>4.1.直方图</h3><h3 id="4-2-箱线图"><a href="#4-2-箱线图" class="headerlink" title="4.2.箱线图"></a>4.2.箱线图</h3><h3 id="4-3-茎叶图"><a href="#4-3-茎叶图" class="headerlink" title="4.3.茎叶图"></a>4.3.茎叶图</h3><h3 id="4-4-线图"><a href="#4-4-线图" class="headerlink" title="4.4.线图"></a>4.4.线图</h3><h3 id="4-5-柱形图"><a href="#4-5-柱形图" class="headerlink" title="4.5.柱形图"></a>4.5.柱形图</h3><h3 id="4-6-饼图"><a href="#4-6-饼图" class="headerlink" title="4.6.饼图"></a>4.6.饼图</h3><h3 id="4-6-不同图形之间的对比"><a href="#4-6-不同图形之间的对比" class="headerlink" title="4.6.不同图形之间的对比"></a>4.6.不同图形之间的对比</h3><ul><li>柱形图和直方图对比</li></ul>]]></content>
      
      
      <categories>
          
          <category> 统计学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 统计学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet的那些二三事儿</title>
      <link href="/2017/08/31/java-2017-08-31-Servlet%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8C%E4%B8%89%E4%BA%8B%E5%84%BF/"/>
      <url>/2017/08/31/java-2017-08-31-Servlet%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8C%E4%B8%89%E4%BA%8B%E5%84%BF/</url>
      
        <content type="html"><![CDATA[<p>Servlet（Server Applet），全称Java Servlet。主要是使用Java来开发一些web应用，例如网站、web service等等。下面就从几个方面来总结一下servlet的关键点，当然也会提及到jsp、http等。</p><h2 id="servlet的生命周期"><a href="#servlet的生命周期" class="headerlink" title="servlet的生命周期"></a>servlet的生命周期</h2><ul><li><p>初始阶段<br>Web容器加载servlet，调用init()方法。</p></li><li><p>运行阶段<br>当请求到达时，运行其service()方法。service()识别请求类型，并调用相对应的doGet、doPost方法。</p></li><li><p>销毁阶段<br>服务结束，web容器会调用servlet的distroy()方法销毁servlet。</p></li></ul><h2 id="如何去实现一个Servlet"><a href="#如何去实现一个Servlet" class="headerlink" title="如何去实现一个Servlet"></a>如何去实现一个Servlet</h2><p>先了解一下Servlet API的两个包：<code>javax.servlet.*</code>和<code>javax.servlet.http.*</code>。<code>javax.servlet.*</code>包下放的主要是一些接口，<code>javax.servlet.http.*</code>包下方的主要是上述接口在http协议中的实现。<br>目前网络数据交互式传输中，http协议占据这主导的地位，说不准哪天出现一个新的协议，那时servlet可能还会对新协议做支持。<br>实现一个Servlet目前有两种方式，一种是直接实现最底层的Servlet接口；第二种则是实现继承HttpServlet类。</p><h3 id="javax-servlet-Servlet接口"><a href="#javax-servlet-Servlet接口" class="headerlink" title="javax.servlet.Servlet接口"></a>javax.servlet.Servlet接口</h3><p>有下面这几个方法</p><ul><li><p>init<br>在servlet初始化时，会调用它。</p></li><li><p>service<br>在servlet处理请求的时候，会调用它。</p></li><li><p>destroy<br>在服务结束时，销毁servlet的时候，会调用它。</p></li><li><p>getServletConfig  </p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;ServletConfigTest&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;com.vae.servlet.ServletConfigTest&lt;/servlet-class&gt;</span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line">        &lt;param-name&gt;name1&lt;/param-name&gt;</span><br><span class="line">        &lt;param-value&gt;value1&lt;/param-value&gt;</span><br><span class="line">    &lt;/init-param&gt;</span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line">        &lt;param-name&gt;encode&lt;/param-name&gt;</span><br><span class="line">        &lt;param-value&gt;utf-8&lt;/param-value&gt;</span><br><span class="line">    &lt;/init-param&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br></pre></td></tr></table></figure><p>获取servlet的配置信息,<code>init-param</code>标签下的内容。</p><ul><li>getServletInfo<br>获取servlet信息，</li></ul><h3 id="javax-servlet-http-HttpServlet类"><a href="#javax-servlet-http-HttpServlet类" class="headerlink" title="javax.servlet.http.HttpServlet类"></a>javax.servlet.http.HttpServlet类</h3><ul><li><p>doGet<br>处理get请求时，会执行该方法。</p></li><li><p>doPost<br>处理post请求时，会执行该方法。</p></li><li><p>init<br>在servlet初始化时，会调用它。相当于Servlet接口中的init方法。</p></li><li><p>destroy<br>在servlet初始化时，会调用它。相当于Servlet接口中的init方法。</p></li></ul><h2 id="JSP和Servlet的关系"><a href="#JSP和Servlet的关系" class="headerlink" title="JSP和Servlet的关系"></a>JSP和Servlet的关系</h2><p>这里说明一下，JSP在被编译后生成的就是Servlet，所以访问jsp，其实访问的也就是其对于的Servlet。</p><h3 id="四种会话作用域"><a href="#四种会话作用域" class="headerlink" title="四种会话作用域"></a>四种会话作用域</h3><p>由于在web开发中，数据传输的范围是不同的，所以产生了<code>四种会话作用域</code>，其实就是提供了4种生命周期的对象，用于存储数据使用。</p><ul><li>page<br>单个页面级别</li><li>request<br>单个请求级别</li><li>session<br>单个session级别</li><li>application<br>服务器从启动到停止</li></ul><h3 id="Jsp的九个内置对象"><a href="#Jsp的九个内置对象" class="headerlink" title="Jsp的九个内置对象"></a>Jsp的九个内置对象</h3><ul><li><p>page<br>指JSP也变本身，代表的是java.lang.Object类的对象。</p></li><li><p>request<br>包含了客户端请求的信息，代表的是javax.servlet.HttpServletRequest类的对象</p></li><li><p>session<br>包含了当前会话的信息，代表的是javax.servlet.http.HttpSession类的对象。</p></li><li><p>application<br>包含了当前服务器全局的信息，重启后失效。代表的是javax.servlet.ServletContext类的对象。</p></li><li><p>response<br>包含了服务端返回客户端的响应信息，代表的是javax.servlet.HttpServletResponse类的对象。</p></li><li><p>out<br>向客户端输出数据。</p></li><li><p>config<br>ServletConfig类的一个实例，</p></li><li><p>pageContext<br>包含了当前页面的信息</p></li><li><p>exception<br>处理异常使用</p></li></ul><h3 id="内置对象和作用域的对照"><a href="#内置对象和作用域的对照" class="headerlink" title="内置对象和作用域的对照"></a>内置对象和作用域的对照</h3><div class="table-container"><table><thead><tr><th>内置对象名</th><th>对应的Java类</th><th>作用域</th></tr></thead><tbody><tr><td>page</td><td>java.lang.Object</td><td>Page</td></tr><tr><td>request</td><td>javax.servlet.http.HttpServletRequest</td><td>Request</td></tr><tr><td>session</td><td>javax.servlet.http.HttpSession</td><td>Session</td></tr><tr><td>application</td><td>javax.servlet.ServletContext</td><td>Application</td></tr><tr><td>response</td><td>javax.servlet.http.HttpServletResponse</td><td>Page</td></tr><tr><td>out</td><td>javax.servlet.jsp.JspWriter</td><td>Page</td></tr><tr><td>config</td><td>javax.servlet.ServletConfig</td><td>Page</td></tr><tr><td>pageContext</td><td>javax.servlet.jsp.PageContext</td><td>Page</td></tr><tr><td>exception</td><td>java.lang.Throwable</td><td>Page</td></tr></tbody></table></div><h2 id="转发和重定向"><a href="#转发和重定向" class="headerlink" title="转发和重定向"></a>转发和重定向</h2><h3 id="什么是转发和重定向"><a href="#什么是转发和重定向" class="headerlink" title="什么是转发和重定向"></a>什么是转发和重定向</h3><p>从体验上来说，转发后浏览器的URL不会变，而重定向时URL会变。从执行的原理上来说，转发是服务端的行为，期间request域共享；重定向是客户端的行为，客户端发现返回的http状态码是302时，将会向新的URL发送</p><h3 id="Servlet中如何实现转发和重定向"><a href="#Servlet中如何实现转发和重定向" class="headerlink" title="Servlet中如何实现转发和重定向"></a>Servlet中如何实现转发和重定向</h3><ul><li><p>转发<br>request.getRequestDispatcher(“目标文件”).forward(request,response)</p></li><li><p>重定向<br>response.sendRedirect(“目标文件”)</p></li></ul><h3 id="JSP中如何实现转发和重定向"><a href="#JSP中如何实现转发和重定向" class="headerlink" title="JSP中如何实现转发和重定向"></a>JSP中如何实现转发和重定向</h3><ul><li><p>转发<br><code> &lt;jsp:forward page=”目标文件” /&gt; </code></p></li><li><p>重定向<br><code>&lt;%response.sendRedirect(“目标文件”);//重定向到new.jsp%&gt;</code></p></li></ul><h3 id="如何选择转发和重定向"><a href="#如何选择转发和重定向" class="headerlink" title="如何选择转发和重定向"></a>如何选择转发和重定向</h3><ul><li><p>何时选择转发  </p><ul><li>当需要隐藏地址的时候，选用转发；</li><li>当需要共享request域数据时，选用转发。</li></ul></li><li><p>何时选择重定向<br>当不需要隐藏地址的时候，且不需要共享request域数据时，选用重定向。重定向只是单纯的重新访问一个新的地址。</p></li></ul><h2 id="Servlet中的过滤器"><a href="#Servlet中的过滤器" class="headerlink" title="Servlet中的过滤器"></a>Servlet中的过滤器</h2><h3 id="为什么需要过滤器"><a href="#为什么需要过滤器" class="headerlink" title="为什么需要过滤器"></a>为什么需要过滤器</h3><p>在web开发中，我们可能需要对所有的请求都做一层过滤，例如权限验证这些操作等等。此时我们就需要一种技术，所有或者一类请求在处理前都会经过这个技术来进行一次预处理。</p><h3 id="什么是过滤器"><a href="#什么是过滤器" class="headerlink" title="什么是过滤器"></a>什么是过滤器</h3><p>过滤器就是在请求到达Servlet之前会经过的一层，在过滤器这一层我们可以检查权限、可以对所有或者部分请求做统一的处理。</p><h3 id="如何使用过滤器"><a href="#如何使用过滤器" class="headerlink" title="如何使用过滤器"></a>如何使用过滤器</h3><p>过滤器类一般都会实现<code>javax.servlet.Filter</code>这个接口。然后在web.xml中进行配置，下面是一个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;filter&gt;</span><br><span class="line">    &lt;filter-name&gt;filter01&lt;/filter-name&gt; &lt;!-- filter的名字，自定义 --&gt;</span><br><span class="line">    &lt;filter-class&gt;filter.class&lt;/filter-class&gt; &lt;!-- filter类，可以是自己实现的，也可以使用默认的 --&gt;</span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line">        &lt;param-name&gt;key&lt;/param-name&gt;&lt;!-- 初始化参数，可选配置 --&gt;</span><br><span class="line">        &lt;param-value&gt;value&lt;/param-value&gt;</span><br><span class="line">    &lt;/init-param&gt;</span><br><span class="line">&lt;/filter&gt;</span><br><span class="line">&lt;filter-mapping&gt; &lt;!-- 配置filter生效的url，当访问这些url时，都会执行该filter --&gt;</span><br><span class="line">    &lt;filter-name&gt;filter01&lt;/filter-name&gt; &lt;!-- filter的名字，自定义 --&gt;</span><br><span class="line">    &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;!-- 这里可以精确匹配，也可以模糊匹配，例如匹配所有的url就是“/*”，匹配所有的jsp，就是“*.jsp”.注意，路径和扩展名匹配不可以同时使用 --&gt;</span><br><span class="line">&lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure><h3 id="过滤器链"><a href="#过滤器链" class="headerlink" title="过滤器链"></a>过滤器链</h3><h2 id="Servlet中的监听器"><a href="#Servlet中的监听器" class="headerlink" title="Servlet中的监听器"></a>Servlet中的监听器</h2><p>Servlet的监听器是实现了javax.servlet.ServletContextListener接口的服务端程序，它随web的启动而启动，在启动期间可以监听web应用内部发生的一系列事件。可以对不同域的不同事件设置监听，例如域内部属性的变化，request、session和application的创建和销毁等等。</p><h3 id="官方提供的几个监听器"><a href="#官方提供的几个监听器" class="headerlink" title="官方提供的几个监听器"></a>官方提供的几个监听器</h3><p>Servlet监听器对特定的事件进行监听，当产生这些事件的时候，会执行监听器的代码。可以对应用的加载、卸载，对session的初始化、销毁，对session中值变化等事件进行监听。官方提供了一些对ServletContext、session、request的监听。</p><h3 id="Session级别的监听"><a href="#Session级别的监听" class="headerlink" title="Session级别的监听"></a>Session级别的监听</h3><h4 id="HttpSessionListener"><a href="#HttpSessionListener" class="headerlink" title="HttpSessionListener"></a>HttpSessionListener</h4><p>全局监听session的创建和销毁，在XML中配置监听，全局的。</p><ul><li>sessionCreated<br>有新的session创建时，会出发执行这个方法</li><li>sessionDestroyed<br>执行session.invalidate()方法时，或者session超时（默认30分钟）会执行该方法。</li></ul><h4 id="HttpSessionBindingListener"><a href="#HttpSessionBindingListener" class="headerlink" title="HttpSessionBindingListener"></a>HttpSessionBindingListener</h4><p>实例化后设置为session的属性，绑定到单个session。只能监听单个session，一个session对应一个HttpSessionBindingListener对象的实例。</p><ul><li>valueBound<br>当对象被绑定到session上时，例如：application.setAttribute(“onlineUserList”, onlineUserList);</li><li>valueUnbound<br>执行方法session.invalidate()；或者session超时；或者修改了session域的属性，例如：session.setAttribute(“onlineUserListener”, “其他对象”);或者删除了某一个属性，例如：session.removeAttribute(“onlineUserListener”)。都会触发valueUnbound方法的执行。</li></ul><h4 id="HttpSessionAttributeListener"><a href="#HttpSessionAttributeListener" class="headerlink" title="HttpSessionAttributeListener"></a>HttpSessionAttributeListener</h4><p>监听session的属性变化</p><ul><li>attributeAdded<br>当有新的属性添加时，将会将会触发</li><li>attributeRemoved<br>当有属性移除时，将会触发</li><li>attributeReplaced<br>当有属性被覆盖时，将会触发</li></ul><h4 id="HttpSessionActivationListener"><a href="#HttpSessionActivationListener" class="headerlink" title="HttpSessionActivationListener"></a>HttpSessionActivationListener</h4><p>和HttpSessionBindingListener一样，需要绑定到session上，是对单个session的监听。有的时候需要对session做持久化，即将session持久化写到磁盘上，当服务器挂了重启后，还能恢复session中的信息。</p><ul><li>sessionWillPassivate<br>当执行这个方法的时候，可以把session保存到硬盘上</li><li>sessionDidActivate<br>当执行这个方法的时候，就是把session从硬盘读取出来，并使用</li></ul><h3 id="ServletContext级别的监听"><a href="#ServletContext级别的监听" class="headerlink" title="ServletContext级别的监听"></a>ServletContext级别的监听</h3><h4 id="ServletContextAttributeListener"><a href="#ServletContextAttributeListener" class="headerlink" title="ServletContextAttributeListener"></a>ServletContextAttributeListener</h4><p>ServletContext上存在属性变化时，将会出发此类监听。</p><ul><li>attributeAdded<br>ServletContext上添加属性时触发。</li><li>attributeRemoved<br>ServletContext上删除属性时触发。</li><li>attributeReplaced<br>ServletContext上添加属性值被修改时触发。</li></ul><h4 id="ServletContextListener"><a href="#ServletContextListener" class="headerlink" title="ServletContextListener"></a>ServletContextListener</h4><p>监听ServletContext的创建和销毁</p><ul><li>contextInitialized<br>初始化ServletContext对象</li><li>contextDestroyed<br>销毁ServletContext对象</li></ul><h3 id="request级别的监听"><a href="#request级别的监听" class="headerlink" title="request级别的监听"></a>request级别的监听</h3><h4 id="ServletRequestAttributeListener"><a href="#ServletRequestAttributeListener" class="headerlink" title="ServletRequestAttributeListener"></a>ServletRequestAttributeListener</h4><p>监听request属性变化事件</p><ul><li>attributeAdded<br>当request域有新的属性添加时，触发事件</li><li>attributeRemoved<br>当request域有属性移除时，触发事件</li><li>attributeReplaced<br>当request域有属性被覆盖时，触发事件</li></ul><h4 id="ServletRequestListener"><a href="#ServletRequestListener" class="headerlink" title="ServletRequestListener"></a>ServletRequestListener</h4><p>监听request生命周期的变化</p><ul><li>requestDestroyed<br>当request销毁时，触发该事件</li><li>requestInitialized<br>当request初始化时，触发该事件</li></ul><h2 id="servlet的单例与多线程问题"><a href="#servlet的单例与多线程问题" class="headerlink" title="servlet的单例与多线程问题"></a>servlet的单例与多线程问题</h2><p>servlet是单例，多线程的。servlet类在web容器中只会被创建一个实例。但是多线程环境下，多个线程可以同时调用同一个Servlet的service方法。<br>所以在Servlet对象中使用共享变量的时候要小心，很容易出现线程安全问题。</p><h2 id="servlet的单线程模式"><a href="#servlet的单线程模式" class="headerlink" title="servlet的单线程模式"></a>servlet的单线程模式</h2><p>默认Jsp的Servlet是单例、多线程的。但也可以在Jsp页面里声明<code> &lt;%@page isThreadSafe=”false”%&gt; </code>，表示Jsp的Servlet类将以Singleton模式来运行。即：Jsp对应的Servlet实例将不会同时被多个线程调用，一个请求创建一个Servlet实例。</p><blockquote><p>Jsp的Servlet里一般不会有很复杂的业务逻辑，更多的是页面展示，以及一些简单的数据处理，所以一般情况下不用配置<code>isThreadSafe=false</code>的，推荐配置为true.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java并发(七)：JCF线程安全问题</title>
      <link href="/2017/07/22/java-2017-07-22-Java%E5%B9%B6%E5%8F%91-%E4%B8%83-%EF%BC%9AJCF%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/"/>
      <url>/2017/07/22/java-2017-07-22-Java%E5%B9%B6%E5%8F%91-%E4%B8%83-%EF%BC%9AJCF%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>Jdk本身给我实现了很多数据结构，例如List、Set、Queue以及Map等。但是这些类都不是线程安全的，在Jdk1.0的时候提供了<code>Hashtable</code>、<code>Vector</code>以及<code>Stack</code>这些线程安全集合，但由于它们只是在原来集合的基础上通过关键字<code>synchronized</code>来保证功能的<strong>原子性和可见性</strong>，这样做的缺点就是效率地下，当有一个线程执行get的时候，其它所有线程都被阻塞。</p><h3 id="什么是线程安全"><a href="#什么是线程安全" class="headerlink" title="什么是线程安全"></a>什么是线程安全</h3><p>线程安全是一个很难一言表达清楚的，通俗的说就是：一个程序在单线程的环境下可以正常运行，在多线程环境下也能正确的运行，并且可以返回确定的结果，那么这个程序就是线程安全的。<br>一个线程安全的类，在多线程环境下不会因为执行的顺序导致对象成为无效状态，同样也不会违反任何先验条件和后验条件。</p><p>关于无效状态、先验条件、后验条件，下面是一些说明：</p><ul><li>无效状态</li></ul><p>在做选择排序的过程中，前边已经排序好的那段数据顺序被其它线程给打乱了，这时候就可以说这个被排序的类处于无效状态。</p><ul><li>先验条件</li></ul><p>在做二分查找的时候，被查找的集合必须是已经排好序的，这就是执行二份查找的条件，也就是先验条件。</p><ul><li>后验条件</li></ul><p>指的代码的业务目标是否正确。</p><h3 id="fail-fast机制"><a href="#fail-fast机制" class="headerlink" title="fail-fast机制"></a>fail-fast机制</h3><p>当迭代器实现了fail-fast机制，创建了该集合的迭代器后，使用该集合迭代器遍历或者修改集合元素的之前，若该集合被直接调用方法并产生了修改（size的变化），那么将会抛出<code>java.util.ConcurrentModificationException</code>异常。  </p><blockquote><p>例如<code>ArrayList</code>对象，线程1在用迭代器遍历里边元素的同时，线程2put了一个新的元素，那么就会抛出异常<code>java.util.ConcurrentModificationException</code>。</p></blockquote><p>fail-fast机制是使用了<code>modCount</code>变量（集合类持有的字段）和<code>expectedModCount</code>（迭代器持有的字段）来实现。<br>在迭代器创建的时候将exceptedModCount被初始化为modCount的值，任何对集合的修改都会改变modCount的值.每当调用next等方法的时候，会判断expectedModCount和当前的modCount是否相等，不相等的话则抛出CME异常.</p><ul><li><p>modCount<br><code>modCount变量是集合类中的变量</code>，在集合被修改时，modCount变量将会加1；当调用迭代器的方法改变了集合size的方法时，modCount变量也会加1。</p></li><li><p>expectedModCount<br><code>expectedModCount变量是迭代器类中的变量</code>，在创建的迭代器对象时，会使用modCount的值来对其进行初始化。只有在调用迭代器改变了集合size的时候，才会加1。</p></li><li><p>ArrayList、LikedList<br>它们都是AbstractList的子类，它们的modCount都是从AbstractList类中继承来的，当执行会使集合size发生变化的方法时，例如：add、remove等，modCount会加1。执行set、get操作不会使modCount发生变化，因为他们没有使集合的size发生变化。<br>当调用迭代器的next、add、remove、previous、set等访问集合元素的方法时，都会校验exceptedModCount和modCount是否相等，如果不相等，则抛出CME异常。</p></li><li><p>HashMap、LinkedHashMap<br>当调用Map的方法或者Map的迭代器使得Map集合被修改（值被修改，或者顺序发生变化）时，modCount加1。<br>在调用Map的迭代器访问、修改Map集合元素的时候，都会判断expectedModCount和当前的modCount是否相等，不相等的话则抛出CME异常.</p></li></ul><blockquote><p>很显然，只使用modCount和expectedModCount并不能保证集合的线程安全。  </p><ul><li>modCount是集合类的成员变量，expectedModCount是迭代器的成员变量</li><li>在使用迭代器遍历集合元素时，会判断modCount和expectedModCount是否相等来校验集合是否被修改过，很显然这个办法是存在bug的。</li><li>对于Map结构，数据只要变化modCount就会加1；对于List结构，当集合size变化时，modCount才会加1。  </li></ul><p>这些规则表述的可能不是很准确，具体可以查看相关源码。Set结构是什么样的呢？留给读者自己查看源码吧！</p></blockquote><h3 id="Collections-synchronizedXXX"><a href="#Collections-synchronizedXXX" class="headerlink" title="Collections.synchronizedXXX"></a>Collections.synchronizedXXX</h3><p>发展到Jdk1.2时，Jdk提供了<code>Collections.synchronizedXXX</code>系列的方法：</p><ul><li><p>Collections.synchronizedCollection<br>包装Collection接口的实现类，使其具备线程安全</p></li><li><p>Collections.synchronizedList<br>包装List接口的实现类，使其具备线程安全</p></li><li><p>Collections.synchronizedMap<br>包装Map接口的实现类，使其具备线程安全</p></li><li><p>Collections.synchronizedSet<br>包装Set接口的实现类，使其具备线程安全</p></li></ul><p>这里我们查看<code>java.util.Collections.SynchronizedCollection</code>类的源码，可以看出，这也是在原来集合的基础上包装了一层<code>synchronized</code>关键字，只是提供了并发集合使用的便利性，并没有从本质上提高并发集合的效率！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">static class SynchronizedCollection&lt;E&gt; implements Collection&lt;E&gt;, Serializable &#123;</span><br><span class="line">    private static final long serialVersionUID = 3053995032091335093L;</span><br><span class="line"></span><br><span class="line">    final Collection&lt;E&gt; c;  // Backing Collection</span><br><span class="line">    final Object mutex;     // Object on which to synchronize</span><br><span class="line"></span><br><span class="line">    SynchronizedCollection(Collection&lt;E&gt; c) &#123;</span><br><span class="line">        if (c==null)</span><br><span class="line">            throw new NullPointerException();</span><br><span class="line">        this.c = c;</span><br><span class="line">        mutex = this;</span><br><span class="line">    &#125;</span><br><span class="line">    SynchronizedCollection(Collection&lt;E&gt; c, Object mutex) &#123;</span><br><span class="line">        this.c = c;</span><br><span class="line">        this.mutex = mutex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int size() &#123;</span><br><span class="line">        synchronized (mutex) &#123;return c.size();&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public boolean isEmpty() &#123;</span><br><span class="line">        synchronized (mutex) &#123;return c.isEmpty();&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public boolean contains(Object o) &#123;</span><br><span class="line">        synchronized (mutex) &#123;return c.contains(o);&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public Object[] toArray() &#123;</span><br><span class="line">        synchronized (mutex) &#123;return c.toArray();&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">        synchronized (mutex) &#123;return c.toArray(a);&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Iterator&lt;E&gt; iterator() &#123;</span><br><span class="line">        return c.iterator(); // Must be manually synched by user!</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean add(E e) &#123;</span><br><span class="line">        synchronized (mutex) &#123;return c.add(e);&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public boolean remove(Object o) &#123;</span><br><span class="line">        synchronized (mutex) &#123;return c.remove(o);&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean containsAll(Collection&lt;?&gt; coll) &#123;</span><br><span class="line">        synchronized (mutex) &#123;return c.containsAll(coll);&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public boolean addAll(Collection&lt;? extends E&gt; coll) &#123;</span><br><span class="line">        synchronized (mutex) &#123;return c.addAll(coll);&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public boolean removeAll(Collection&lt;?&gt; coll) &#123;</span><br><span class="line">        synchronized (mutex) &#123;return c.removeAll(coll);&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public boolean retainAll(Collection&lt;?&gt; coll) &#123;</span><br><span class="line">        synchronized (mutex) &#123;return c.retainAll(coll);&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public void clear() &#123;</span><br><span class="line">        synchronized (mutex) &#123;c.clear();&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        synchronized (mutex) &#123;return c.toString();&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    private void writeObject(ObjectOutputStream s) throws IOException &#123;</span><br><span class="line">        synchronized (mutex) &#123;s.defaultWriteObject();&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="java-util-concurrent概述"><a href="#java-util-concurrent概述" class="headerlink" title="java.util.concurrent概述"></a>java.util.concurrent概述</h3><p>Jdk1.5开始，Java的并发模型发生了翻天覆地的变化,具体可以查看<code>java.util.concurrent</code>包下的类。</p><ul><li><p>CAS的实现<br>目前大多数CPU硬件级别都只是CAS了，jdk1.5后封装了CAS的实现，并以Unsafe类供jdk中其它类调用。这个设计的初衷是给Jdk的类库使用，都不是给开发人员。</p></li><li><p>锁和原子类<br>在CAS的基础上，实现了AQS，并实现了ReentrantLock锁，一般很少创建ReentrantLock对象，而是继承ReentrantLock类并在此基础上构建。<br><code>java.util.concurrent.atomic</code>包下提供了一系列的原子变量，例如在并发环境下计算自增值，就可以使用该包下面的类。</p></li><li><p>高级的工具类<br>例如下面三个：</p><ul><li>Executor框架：线程池</li><li>TimerTask类：定时器</li><li>Semaphore类：资源计数器</li><li>CountdownLatch类：倒计时计数器</li></ul></li></ul><p>上面简单的介绍了<code>java.util.concurrent</code>包，那么该包下关于集合线程安全的实现体现在哪些方面呢？</p><ul><li><p>阻塞的线程安全集合<br>集合被其它线程访问时，例如使用迭代器迭代、get或者put的时候，当其它线程在访问该资源时，会进入阻塞状态。这种集合在并发执行时，可以保证数据的强一致性。</p></li><li><p>非阻塞的线程安全集合<br>集合被其它线程访问时，例如使用迭代器迭代、get或者put的时候，当其它线程在访问该资源时，不会进入阻塞状态。这种集合在并发执行时，可以保证数据的弱强一致性，更新的数据在经过某一段时间之后才会被访问到。</p></li></ul><h4 id="ConcurrentXXX"><a href="#ConcurrentXXX" class="headerlink" title="ConcurrentXXX"></a>ConcurrentXXX</h4><p>以<code>Concurrent</code>开头的集合类，都是<code>非阻塞的线程安全类</code>。<br>非阻塞的线程安全集合在使用时只能保证数据的弱一致性，无法保证数据的强一致性。如果必须要保证数据的强一致性，可以使用阻塞的线程安全类。前边提到的使用synchronized来保证线程安全的集合类，就是阻塞的线程安全类。</p><p>这里号称是非阻塞的线程安全类，只是理想状态下非阻塞，使用时阻塞的概率较低，效率较高，但还是会可能线程被阻塞的。</p><ul><li><p>ConcurrentHashMap<br>非阻塞线程安全的HashMap</p></li><li><p>ConcurrentLinkedDeque<br>非阻塞线程安全的双端队列</p></li><li><p>ConcurrentLinkedQueue<br>非阻塞线程安全的队列</p></li><li><p>ConcurrentSkipListMap<br>非阻塞线程安全的TreeMap（有序）</p></li><li><p>ConcurrentSkipListSet<br>非阻塞线程安全的TreeSet（有序）</p></li></ul><h4 id="CopyOnWriteArrayXXX"><a href="#CopyOnWriteArrayXXX" class="headerlink" title="CopyOnWriteArrayXXX"></a>CopyOnWriteArrayXXX</h4><p>这一类集合在数据发生变化时，会通过内存拷贝来创建一个新的集合。若在迭代器遍历过程中集合的元素发生变化，迭代器会继续遍历“老”的集合，其它操作会访问“新”的集合。<br>这类集合适合“数据量小”、“读多写少”的场景。</p><ul><li><p>CopyOnWriteArrayList<br>线程安全的ArrayList，基于内存拷贝实现的。</p></li><li><p>CopyOnWriteArraySet<br>线程安全的ArrayList，基于内存拷贝实现的。其实就是对CopyOnWriteArrayList的包装，调用add方法的时候会调用CopyOnWriteArrayList类的addIfAbsent方法，当元素不存在的时候才会被加入到集合中。</p></li></ul><h4 id="BlockingXXX"><a href="#BlockingXXX" class="headerlink" title="BlockingXXX"></a>BlockingXXX</h4><p>阻塞线程安全类，其中BlockingDeque接口继承了BlockingQueue接口。这一类集合在并发过程中，可以保证数据的强一致性。</p><ul><li><p>ArrayBlockingQueue<br>阻塞的线程安全队列，它是基于数组实现的，创建的时候就需要指定队列的长度。</p></li><li><p>LinkedBlockingQueue<br>阻塞的线程安全队列，是基于链表实现的。</p></li><li><p>LinkedBlockingDeque<br>阻塞的线程安全双端队列，是基于链表实现的。</p></li><li><p>PriorityBlockingQueue<br>阻塞的线程安全优先队列，队列中的元素必须实现Comparable接口，在插入元素时，会调用接口的<code>compareTo</code>方法来判断元素的大小，从而确定元素的位置。</p></li></ul><h3 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h3><p>这里把<code>ConcurrentHashMap</code>单独拿出来说一下，因为ConcurrentXXX系列集合实现的核心思想和它基本上一样。CopyOnWriteArray系列和BlockingXXX系列实现手法比较简单，自己浏览一下源码就可以了。</p><p>ConcurrentHashMap的类部结构大概如下图这样：</p><p><img src="http://leocook-blog.test.upcdn.net/ConcurrentHashMap.png" alt="结构"></p><p>默认情况下Segment数组的大小是16(DEFAULT_INITIAL_CAPACITY),Segment下的HashEntry数组的默认大小是2(MIN_SEGMENT_TABLE_CAPACITY)。</p><h4 id="原理相关"><a href="#原理相关" class="headerlink" title="原理相关"></a>原理相关</h4><ul><li><p>锁的范围<br>ConcurrentHashMap中读数据是没有锁的，写数据时会有锁。在向同一个Segment元素下写数据时，会使用同一把锁。</p></li><li><p>非阻塞锁<br>这里号称是非阻塞的线程安全类，只是理想状态下非阻塞，使用时阻塞的概率较低，效率较高，但还是会可能线程被阻塞的。</p></li><li><p>弱一致性原理<br>ConcurrentHashMap的get是没有锁的，但是put是有锁的。可能会出现一种情况是：线程1先执行了put，但是在数据没还没完全写入时，线程2读取了集合里的数据，此时是读取不到线程1刚刚执行写操作写入的数据，但是在很短暂的一个时间段后，线程2就能读到线程1写入的数了。<br>这就是读写分离产生的弱一致性。</p></li></ul><h4 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h4><ul><li><p>HashEntry<br>该类实现的就是单纯的单向链表结构，和HashMap中的Entry类似。</p><ul><li>关键字段</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * hash值</span><br><span class="line"> */</span><br><span class="line">final int hash;</span><br><span class="line">final K key;</span><br><span class="line">volatile V value;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 下一个节点</span><br><span class="line"> */</span><br><span class="line">volatile HashEntry&lt;K,V&gt; next;</span><br></pre></td></tr></table></figure><ul><li>关键方法  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 使用UNSAFE来设置next节点</span><br><span class="line"> */</span><br><span class="line">final void setNext(HashEntry&lt;K,V&gt; n) &#123;</span><br><span class="line">    UNSAFE.putOrderedObject(this, nextOffset, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Unsafe相关的初始化</span><br><span class="line">static final sun.misc.Unsafe UNSAFE;</span><br><span class="line">static final long nextOffset;</span><br><span class="line">static &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        UNSAFE = sun.misc.Unsafe.getUnsafe();</span><br><span class="line">        Class k = HashEntry.class;</span><br><span class="line">        nextOffset = UNSAFE.objectFieldOffset</span><br><span class="line">            (k.getDeclaredField(&quot;next&quot;));</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        throw new Error(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>Segment<br>该类就是ConcurrentHashMap中分桶的实现。</p><ul><li>关键字段  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 处理器个数</span><br><span class="line"> */</span><br><span class="line">static final int MAX_SCAN_RETRIES =</span><br><span class="line">    Runtime.getRuntime().availableProcessors() &gt; 1 ? 64 : 1;</span><br><span class="line">    </span><br><span class="line">/**</span><br><span class="line"> * 基于数组实现的Hash表</span><br><span class="line"> */</span><br><span class="line">transient volatile HashEntry&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 分桶内的元素个数。</span><br><span class="line"> */</span><br><span class="line">transient int count;</span><br></pre></td></tr></table></figure><ul><li>关键方法 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line">final V put(K key, int hash, V value, boolean onlyIfAbsent) &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 1. 写数据前,先拿到当前的节点元素,并执行park</span><br><span class="line">     */</span><br><span class="line">    HashEntry&lt;K,V&gt; node = tryLock() ? null :</span><br><span class="line">        scanAndLockForPut(key, hash, value);</span><br><span class="line">    V oldValue;</span><br><span class="line">    try &#123;</span><br><span class="line">        //拿到分桶数组</span><br><span class="line">        HashEntry&lt;K,V&gt;[] tab = table;</span><br><span class="line"></span><br><span class="line">        //拿到该节点应该在的哪个</span><br><span class="line">        int index = (tab.length - 1) &amp; hash;</span><br><span class="line"></span><br><span class="line">        //拿到分桶中HashEntry的起始位置HashEntry链表下</span><br><span class="line">        HashEntry&lt;K,V&gt; first = entryAt(tab, index);</span><br><span class="line"></span><br><span class="line">        //往下迭代</span><br><span class="line">        for (HashEntry&lt;K,V&gt; e = first;;) &#123;</span><br><span class="line"></span><br><span class="line">            // 当分桶不为空时,持续遍历,找到节点,并修改它的value</span><br><span class="line">            if (e != null) &#123;</span><br><span class="line">                K k;</span><br><span class="line">                if ((k = e.key) == key/*基本类型,或同一对象*/ ||</span><br><span class="line">                    (e.hash == hash &amp;&amp; key.equals(k))/*+自定义对象*/) &#123;</span><br><span class="line">                    oldValue = e.value;</span><br><span class="line">                    if (!onlyIfAbsent) &#123;</span><br><span class="line">                        e.value = value;</span><br><span class="line">                        ++modCount;</span><br><span class="line">                    &#125;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                e = e.next;</span><br><span class="line">            &#125;</span><br><span class="line">            //当分桶非空的时候</span><br><span class="line">            else &#123;</span><br><span class="line"></span><br><span class="line">                //若node已经获取到了,设置node为first元素</span><br><span class="line">                if (node != null)</span><br><span class="line">                    node.setNext(first);</span><br><span class="line">                else</span><br><span class="line">                    node = new HashEntry&lt;K,V&gt;(hash, key, value, first);</span><br><span class="line">                int c = count + 1;</span><br><span class="line"></span><br><span class="line">                //集合元素超过阈值后,扩充</span><br><span class="line">                if (c &gt; threshold &amp;&amp; tab.length &lt; MAXIMUM_CAPACITY)</span><br><span class="line">                    rehash(node);</span><br><span class="line">                else</span><br><span class="line">                    //否则直接把节点的值放在分桶的第一个位置</span><br><span class="line">                    setEntryAt(tab, index, node);</span><br><span class="line">                ++modCount;</span><br><span class="line">                count = c;</span><br><span class="line">                oldValue = null;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    return oldValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 获取锁,并返回对应的 HashEntry 节点。</span><br><span class="line"> *</span><br><span class="line"> * 1.若对应的分桶数组不存在,表示该hash值还未出现过,则直接创建出一个node,并在尝试次数达到MAX_SCAN_RETRIES时,阻塞</span><br><span class="line"> * 2.若对应的分桶数组存在,则阻塞,接触阻塞后返回节点</span><br><span class="line"> *</span><br><span class="line"> * @return a new node if key not found, else null</span><br><span class="line"> */</span><br><span class="line">private HashEntry&lt;K,V&gt; scanAndLockForPut(K key, int hash, V value) &#123;</span><br><span class="line">    //拿到分桶数组的首元素</span><br><span class="line">    HashEntry&lt;K,V&gt; first = entryForHash(this, hash);</span><br><span class="line">    HashEntry&lt;K,V&gt; e = first;</span><br><span class="line">    HashEntry&lt;K,V&gt; node = null;</span><br><span class="line"></span><br><span class="line">    int retries = -1; // negative while locating node</span><br><span class="line"></span><br><span class="line">    //尝试获取锁,若获取不到锁,就一直轮询下去</span><br><span class="line">    while (!tryLock()) &#123;</span><br><span class="line">        HashEntry&lt;K,V&gt; f; // to recheck first below</span><br><span class="line">        if (retries &lt; 0) &#123;</span><br><span class="line">            if (e == null) &#123;    //首元素不存在,意思是hash还没有碰撞过</span><br><span class="line">                if (node == null) // speculatively create node</span><br><span class="line">                    node = new HashEntry&lt;K,V&gt;(hash, key, value, null);</span><br><span class="line">                retries = 0;</span><br><span class="line">            &#125;</span><br><span class="line">            else if (key.equals(e.key)) //查看key和首元素的key是否相等</span><br><span class="line">                retries = 0;</span><br><span class="line">            else</span><br><span class="line">                //如果key的位置不在首元素出</span><br><span class="line">                e = e.next;</span><br><span class="line">        &#125;</span><br><span class="line">        else if (++retries &gt; MAX_SCAN_RETRIES) &#123;</span><br><span class="line">            lock(); //独占</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        else if ((retries &amp; 1) == 0/*retries为偶数时*/ &amp;&amp;</span><br><span class="line">                 (f = entryForHash(this, hash)) != first) &#123;</span><br><span class="line">            /**</span><br><span class="line">             * 如果在次过程中HashEntry数组的first节点发生了变化,则重新遍历</span><br><span class="line">             */</span><br><span class="line">            e = first = f; // re-traverse if entry changed</span><br><span class="line">            retries = -1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 获取数据，key不能为null</span><br><span class="line"> */</span><br><span class="line">public V get(Object key) &#123;</span><br><span class="line">    Segment&lt;K,V&gt; s; // manually integrate access methods to reduce overhead</span><br><span class="line">    HashEntry&lt;K,V&gt;[] tab;</span><br><span class="line">    int h = hash(key);</span><br><span class="line"></span><br><span class="line">    //确定数据是在哪个分桶中的</span><br><span class="line">    long u = (((h &gt;&gt;&gt; segmentShift) &amp; segmentMask) &lt;&lt; SSHIFT) + SBASE;</span><br><span class="line"></span><br><span class="line">    //确定数据是在哪个分桶中的</span><br><span class="line">    if ((s = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(segments, u)) != null &amp;&amp;</span><br><span class="line">        (tab = s.table) != null) &#123;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 1.先确定数据是在哪个链表中</span><br><span class="line">         * 2.遍历下去,直到读到对应的key的值</span><br><span class="line">         */</span><br><span class="line">        for (HashEntry&lt;K,V&gt; e = (HashEntry&lt;K,V&gt;) UNSAFE.getObjectVolatile</span><br><span class="line">                 (tab, ((long)(((tab.length - 1) &amp; h)) &lt;&lt; TSHIFT) + TBASE);</span><br><span class="line">             e != null; e = e.next) &#123;</span><br><span class="line">            K k;</span><br><span class="line">            if ((k = e.key) == key || (e.hash == h &amp;&amp; key.equals(k)))</span><br><span class="line">                return e.value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>老的线程安全集合是基于<code>synchronized</code>关键字实现的，效率低下，但是具备强一致性的特性；</li><li>基于AQS实现的新版线程安全集合效率较高，强一致性和弱一致性的集合都有部分的实现；</li><li>个人觉得<code>ConcurrentHashMap</code>这个类源码研究透了，整个Java集合并发这部分知识就很好理解了；</li><li>原理级别的东西看下源码就知道了，不用每一步都刻意去记忆，理解并记住其中的设计思想就可以了。</li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ConcurrentHashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java并发(六)：ReentrantLock、synchronized</title>
      <link href="/2017/07/16/java-2017-07-16-Java%E5%B9%B6%E5%8F%91-%E5%85%AD-%EF%BC%9AReentrantLock%E3%80%81synchronized/"/>
      <url>/2017/07/16/java-2017-07-16-Java%E5%B9%B6%E5%8F%91-%E5%85%AD-%EF%BC%9AReentrantLock%E3%80%81synchronized/</url>
      
        <content type="html"><![CDATA[<p>ReentrantLock是基于AQS设计的可重入锁，synchronized是基于对象监视器实现的可重入锁。使用了它们后，代码都会具有原子性（atomicity）和 可见性（visibility）。</p><p>可重入锁也被称为递归锁，指同一个线程内，外层代码锁未被释放时，内层代码也可以获取到锁，递归就是一种很常见的场景。下面就是可重入锁的一种使用场景：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class Demo&#123;</span><br><span class="line">    Lock lock = new Lock();</span><br><span class="line">    public void outer()&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        inner();</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    public void inner()&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        //do something</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ReentrantLock和synchronized在并发编程中，有着相同的语义，但是它们实现的原理存在着较大的差异，在设计的思想上更是有着很多不同之处。</p><h3 id="实现原理上的区别"><a href="#实现原理上的区别" class="headerlink" title="实现原理上的区别"></a>实现原理上的区别</h3><h4 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h4><p>ReentrantLock是基于AQS实现的锁，我们知道AQS是调用了LockSupport类的park和unpark方法来实现阻塞和唤醒的。<br>如果之前看过<a href="http://www.leocook.org/2017/07/08/Java%E5%B9%B6%E5%8F%91(%E5%9B%9B" target="_blank" rel="noopener">Java并发(四)：locksupport</a>-LockSupport/)这篇文章的话，应该很好理解：ReentrantLock是通过一个<code>_counter</code>变量来标记阻塞状态的。<br>阅读ReentrantLock源码可以发现，AQS中的state字段在ReentrantLock中也被用作记录锁的重入次数（也就是同一个线程同时获得锁的次数），当state的值为0时，则表示资源没有被其它锁占用。</p><h4 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h4><p>在JVM中，对象（this）或者类（SomeClass.class）都会被分配一个监视器(Monitor)。Monitor可以理解为一种同步工具，也可以理解为伴随着对象实例的一种JVM内部对象。<br>synchronized关键字是使用了对象监视器(Monitor)来标识资源是否被锁占用，我们将下边代码反进行反编译：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 同步代码块</span><br><span class="line"> */</span><br><span class="line">public void method1()&#123;</span><br><span class="line">    synchronized (this)&#123;</span><br><span class="line">        System.out.println(&quot;method1 start&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 同步方法</span><br><span class="line"> */</span><br><span class="line">public synchronized void method2()&#123;</span><br><span class="line">    System.out.println(&quot;method2 start&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反编译后，我们可以看到字节码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">public void method1();</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=2, locals=3, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: dup</span><br><span class="line">         2: astore_1</span><br><span class="line">         3: monitorenter</span><br><span class="line">         4: getstatic     #2    // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">         7: ldc           #3    // String method1 start</span><br><span class="line">         9: invokevirtual #4    // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">        12: aload_1</span><br><span class="line">        13: monitorexit</span><br><span class="line">        14: goto          22</span><br><span class="line">        17: astore_2</span><br><span class="line">        18: aload_1</span><br><span class="line">        19: monitorexit</span><br><span class="line">        20: aload_2</span><br><span class="line">        21: athrow</span><br><span class="line">        22: return</span><br><span class="line">      Exception table:</span><br><span class="line">         from    to  target type</span><br><span class="line">             4    14    17   any</span><br><span class="line">            17    20    17   any</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 12: 0</span><br><span class="line">        line 13: 4</span><br><span class="line">        line 14: 12</span><br><span class="line">        line 15: 22</span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">               0      23     0  this   Lcom/xxx/bi/ThreadDemo;</span><br><span class="line">      StackMapTable: number_of_entries = 2</span><br><span class="line">           frame_type = 255 /* full_frame */</span><br><span class="line">          offset_delta = 17</span><br><span class="line">          locals = [ class com/xxx/bi/ThreadDemo, class java/lang/Object ]</span><br><span class="line">          stack = [ class java/lang/Throwable ]</span><br><span class="line">           frame_type = 250 /* chop */</span><br><span class="line">          offset_delta = 4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  public synchronized void method2();</span><br><span class="line">    flags: ACC_PUBLIC, ACC_SYNCHRONIZED</span><br><span class="line">    Code:</span><br><span class="line">      stack=2, locals=1, args_size=1</span><br><span class="line">         0: getstatic     #2    // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">         3: ldc           #5    // String method2 start</span><br><span class="line">         5: invokevirtual #4    // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">         8: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 19: 0</span><br><span class="line">        line 20: 8</span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">               0       9     0  this   Lcom/xxx/bi/ThreadDemo;</span><br></pre></td></tr></table></figure><p>阅读上面字节码，我们可以从两个方面来看：</p><ul><li><p><strong>synchronized同步代码块(method1)</strong><br>我们能看到在进入同步代码块时，会执行<code>monitorenter</code>(占用监视器)，退出代码块时会执行<code>monitorexit</code>(退出监视器)。<br>  <strong>关于monitorenter</strong></p><ul><li>若monitor的entry count为0，则该线程进入monitor，然后将entry count设置为1，该线程成为了monitor的所有者；</li><li>若monitor的entry count不为0，且该进程已经占用了monitor，则线程只是重新进入该代码块，且entry count加1；</li><li><p>若monitor的entry count不为0，且被其它进程已经占用了monitor，则该线程进入阻塞状态，直到monitor的entry count为0时，再重新尝试成为monitor的所有者；</p><p><strong>关于monitorexit</strong></p></li><li>指令执行的时候，monitor的entry count减1，当减1后为0的时候，释放monitor不在占有。其它被这个monitor阻塞的线程开始尝试获取该monitor的所有权。</li><li>object的wait/notify方法是依赖monitor的，所以只能在同步代码块或者方法中才能调用wait/notify等方法，否则会抛出异常。<br>执行monitorexit必须是某个已经占用了monitor的线程的对象实例。</li></ul></li><li><p><strong>synchronized同步方法(method2)</strong><br>我们可以看出该方法的access_flags中存在<code>ACC_SYNCHRONIZED</code>标签，该method加上了该标签之后，可以理解进入方法的时候，会做和monitorenter一样的事情，当退出方法的时候将会作出和monitorexit一样的事情。</p></li></ul><p>关于synchronized，有下面几个总结：</p><blockquote><p>1.使用同步代码块后，JVM会用monitorenter和monitorexit指令完成同步。<br>2.使用同步方法后，JVM会使用方法的访问修饰符ACC_SYNCHRONIZED来完成同步。<br>3.synchronized只能持有一个对象监视器。<br>4.synchronized强制所有锁的获取和释放都在一个代码块中。<br>5.synchronized对锁的释放是隐式的。运行超出代码块时，自动释放。<br>6.synchronized在释放了monitor之后，随机选取新的线程获取monitor。当线程数多的时候，可能会导致部分线程一直获取不到锁</p></blockquote><h3 id="API使用上的区别"><a href="#API使用上的区别" class="headerlink" title="API使用上的区别"></a>API使用上的区别</h3><p>何时获取锁、何时释放锁，<code>ReentrantLock</code>相对来说更自由，可以由开发者自己来决定，且支持多个条件变量。但<code>synchronized</code>却不行，只能被动的在synchronized代码范围结束时释放锁。</p><p><code>ReentrantLock</code>还支持公平锁和非公平锁，在一些需要保证线程FIFO获取锁的场景下，可以使用ReentrantLock的公平锁，synchronized是没有这个特性的。<br>但是为了避免出现死锁，<code>ReentrantLock</code>的锁必须在finally中释放，例如下面代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Lock lock = new ReentrantLock();</span><br><span class="line">lock.lock();</span><br><span class="line">try &#123; </span><br><span class="line">  // do something</span><br><span class="line">&#125;</span><br><span class="line">finally &#123;</span><br><span class="line">  lock.unlock(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以在使用<code>ReentrantLock</code>时需要慎重！</p><h3 id="锁的范围"><a href="#锁的范围" class="headerlink" title="锁的范围"></a>锁的范围</h3><p>关于锁的范围我是这么理解的，如果某个类的对象中存在一把锁可以被该类的所有对象访问，那么这个锁就是类级别的锁；如果某个类的对象中存在一把锁只能被该对象访问，那么这个锁就是对象级别的锁。其实这样解释不是很严谨，下面具体看例子。</p><h4 id="ReentrantLock-1"><a href="#ReentrantLock-1" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h4><p>当ReentrantLock对象是静态的时候就是类级别的锁，否则锁就是对象级别的锁。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//类级别的锁</span><br><span class="line">static Lock lock1 = new ReentrantLock();</span><br><span class="line"></span><br><span class="line">//对象级别的锁</span><br><span class="line">Lock lock2 = new ReentrantLock();</span><br></pre></td></tr></table></figure><h4 id="synchronized-1"><a href="#synchronized-1" class="headerlink" title="synchronized"></a>synchronized</h4><p>当synchronized同步的变量或者方法是静态的时候，锁就是类级别的锁，否则就是对象级别的锁</p><ul><li>类级别的锁<br>这里使用的是类监视器</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//变量</span><br><span class="line">static int count = 0;</span><br><span class="line">synchronized(count)&#123;</span><br><span class="line">    //...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//方法</span><br><span class="line">public synchronized static void method()&#123;</span><br><span class="line">    //...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//类加载器</span><br><span class="line">synchronized(Demo2.class)&#123;</span><br><span class="line">    //...</span><br><span class="line">&#125;</span><br><span class="line">//或者</span><br><span class="line">synchronized(this.getClass())&#123;</span><br><span class="line">    //...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>对象级别的锁  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//变量</span><br><span class="line">int count = 0;</span><br><span class="line">synchronized(count)&#123;</span><br><span class="line">    //...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//方法</span><br><span class="line">public synchronized void method()&#123;</span><br><span class="line">    //...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">synchronized(this)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ReentrantLock源码解析"><a href="#ReentrantLock源码解析" class="headerlink" title="ReentrantLock源码解析"></a>ReentrantLock源码解析</h2><p>如果阅读过看AQS的相关源码，查看ReentrantLock类源码将会很轻松的。阅读ReentrantLock源码时主要就是查看它<code>三个静态内部类的实现</code>，以及<code>公平锁</code>和<code>非公平锁</code>的实现差异。  </p><blockquote><p>在查看源码的时候需要注意，在实现ReentrantLock的时候，AbstractQueuedSynchronizer类中的<code>state</code>字段的作用是记录重入锁的重入次数，每次获取锁的时候state字段值加一，释放锁的时候state值减一。</p></blockquote><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>主要有这三个静态内部类<code>java.util.concurrent.locks.ReentrantLock.Sync</code>、<code>java.util.concurrent.locks.ReentrantLock.NonfairSync</code>以及<code>java.util.concurrent.locks.ReentrantLock.FairSync</code>。Sync类是另外两个的父类，NonfairSync类实现的是非公平锁，FairSync类实现的是公平锁。</p><h4 id="Sync"><a href="#Sync" class="headerlink" title="Sync"></a>Sync</h4><p>Sync类是一个抽象类，它主要声明了<code>lock抽象方法</code>,实现了获取非公平锁的方法<code>nonfairTryAcquire</code>，以及释放锁的方法<code>tryRelease</code>。</p><ul><li>final boolean nonfairTryAcquire(int acquires)<br>尝试获取非公平锁。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">final boolean nonfairTryAcquire(int acquires) &#123;</span><br><span class="line">    final Thread current = Thread.currentThread();</span><br><span class="line">    int c = getState();</span><br><span class="line">    if (c == 0) &#123;</span><br><span class="line">        //重入次数为0, 锁未被占用时,直接占用就可以了</span><br><span class="line">        if (compareAndSetState(0, acquires)) &#123;</span><br><span class="line">            setExclusiveOwnerThread(current);</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else if (current == getExclusiveOwnerThread()) &#123;//锁已经被当前线程占用了</span><br><span class="line">        int nextc = c + acquires;   //重入次数加1</span><br><span class="line">        if (nextc &lt; 0) // overflow  重入次数超过int范围的时候,报错</span><br><span class="line">            throw new Error(&quot;Maximum lock count exceeded&quot;);</span><br><span class="line">        setState(nextc);    //更新重入次数</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //锁已经被其它线程占用了</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>protected final boolean tryRelease(int releases)<br>尝试释放锁，当重入计数器state值变为0后，表示以及没有锁的占用了。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">protected final boolean tryRelease(int releases) &#123;</span><br><span class="line">    //重入次数减一</span><br><span class="line">    int c = getState() - releases;</span><br><span class="line"></span><br><span class="line">    //当前的线程不可以释放其它线程的锁</span><br><span class="line">    if (Thread.currentThread() != getExclusiveOwnerThread())</span><br><span class="line">        throw new IllegalMonitorStateException();</span><br><span class="line"></span><br><span class="line">    boolean free = false;</span><br><span class="line">    if (c == 0) &#123; //当state为0时,说明锁已经完全释放了</span><br><span class="line">        free = true;</span><br><span class="line">        setExclusiveOwnerThread(null);</span><br><span class="line">    &#125;</span><br><span class="line">    setState(c);</span><br><span class="line">    return free;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="NonfairSync"><a href="#NonfairSync" class="headerlink" title="NonfairSync"></a>NonfairSync</h4><p>非公平锁的实现，主要是实现了lock方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//获取锁</span><br><span class="line">final void lock() &#123;</span><br><span class="line">    //判断一下锁是否已经被获取:</span><br><span class="line">    //若锁已经被获取,则进入阻塞;否则直接获取</span><br><span class="line">    if (compareAndSetState(0, 1)) //CAS判断锁是否已经被获取</span><br><span class="line">        //符合条件</span><br><span class="line">        setExclusiveOwnerThread(Thread.currentThread()); //直接锁定</span><br><span class="line">    else</span><br><span class="line">        //锁已经被获取,调用AQS尝试获取锁以及进入阻塞</span><br><span class="line">        acquire(1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//尝试获取锁，被AQS调用</span><br><span class="line">protected final boolean tryAcquire(int acquires) &#123;</span><br><span class="line">    return nonfairTryAcquire(acquires);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="FairSync"><a href="#FairSync" class="headerlink" title="FairSync"></a>FairSync</h4><p>公平锁的实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 由于需要判断是否公平,所以和NonfairSync#lock()的实现稍有不同,并没有在AQS的state值为0时,立马获取到锁。</span><br><span class="line"> */</span><br><span class="line">final void lock() &#123;</span><br><span class="line">    acquire(1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 除了多调用了hasQueuedPredecessors方法,其它和和nonfairTryAcquire几乎一样</span><br><span class="line"> */</span><br><span class="line">protected final boolean tryAcquire(int acquires) &#123;</span><br><span class="line">    final Thread current = Thread.currentThread();</span><br><span class="line">    int c = getState(); //获取到重入次数</span><br><span class="line">    if (c == 0) &#123;</span><br><span class="line">        //未重入过</span><br><span class="line">        if (!hasQueuedPredecessors()/*查看是否有比当前线程等待更久的线程,有就返回true(不通过),没有就返回false(通过),和nonfairTryAcquire相比,只多出了这一块*/ &amp;&amp;</span><br><span class="line">            compareAndSetState(0, acquires)) &#123;</span><br><span class="line">            setExclusiveOwnerThread(current);</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else if (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">        int nextc = c + acquires;</span><br><span class="line">        if (nextc &lt; 0)</span><br><span class="line">            throw new Error(&quot;Maximum lock count exceeded&quot;);</span><br><span class="line">        setState(nextc);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对比<code>ReentrantLock.Sync#nonfairTryAcquire</code>方法的实现，我可以看出公平锁中多调用了方法<code>java.util.concurrent.locks.AbstractQueuedSynchronizer#hasQueuedPredecessors</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 查看是否有比当前线程等待更久的线程,有就返回true,没有就返回false.&lt;br /&gt;</span><br><span class="line"> *</span><br><span class="line"> * 若存在比当前线程等待还要久的线程需要满足下面2个条件中的任意一个即可:</span><br><span class="line"> * 1. 线程等待队列中存在等待的线程,且线程不是队列中的第一个线程;  </span><br><span class="line"> * 2. 线程等待队列中存在等待的线程,其它线程正在初始化线程队列,已经修改好了tail指针，但head的next指针还没有修改好，导致head.next为空，可以查看方法java.util.concurrent.locks.AbstractQueuedSynchronizer#enq</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public final boolean hasQueuedPredecessors() &#123;</span><br><span class="line">    // thread is first in queue.</span><br><span class="line">    Node t = tail; // Read fields in reverse initialization order</span><br><span class="line">    Node h = head;</span><br><span class="line">    Node s;</span><br><span class="line">    return h != t &amp;&amp;</span><br><span class="line">            ((s = h.next) == null || s.thread != Thread.currentThread());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码有点饶人，其实简单理解，就是判断线程队列中，当前线程前边有没有其它线程，是的话返回true，没有的话就返回false。</p><h3 id="关键方法"><a href="#关键方法" class="headerlink" title="关键方法"></a>关键方法</h3><p>平时用的比较多的方法就是<code>lock</code>和<code>unlock</code>。截止到jdk1.7时<code>ReentrantLock</code>类的很多方法都是对<code>Sync</code>类的二次封装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//创建非公平锁</span><br><span class="line">Lock lock1 = new ReentrantLock();</span><br><span class="line">Lock lock2 = new ReentrantLock(false);</span><br><span class="line"></span><br><span class="line">//创建公平锁</span><br><span class="line">Lock lock3 = new ReentrantLock(true);</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>ReentrantLock是一个基于AQS实现的高性能的可重入锁，相比synchronized来说使用时更灵活、且效率更高。<br>如果对线程调用的顺序不是很关系，可以使用非公平锁；否则就使用公平锁。非公平锁的性能是优于公平锁的。<br>相比synchronized来说，ReentrantLock太过灵活，新手使用很容易出现问题，unlock的代码务必写到<code>finally</code>代码块中。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ReentrantLock synchronized </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java并发(五)：AQS框架</title>
      <link href="/2017/07/15/java-2017-07-15-Java%E5%B9%B6%E5%8F%91-%E4%BA%94-%EF%BC%9AAQS%E6%A1%86%E6%9E%B6/"/>
      <url>/2017/07/15/java-2017-07-15-Java%E5%B9%B6%E5%8F%91-%E4%BA%94-%EF%BC%9AAQS%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<p>关键词：AQS CLH </p><p><code>AQS</code>指的是<code>java.util.concurrent.locks.AbstractQueuedSynchronizer</code>这个类，在阅读Jdk源码时，你会发现这个类是<code>java.util.concurrent</code>包的核心。<br>例如在<code>ReentrantLock</code>、<code>ReentrantReadWriteLock</code>、<code>CountDownLatch</code>等类中存在内部类<code>Sync</code>，都是用了AQS。如果想清楚整个Java的并发体系，这个类必读不可。</p><h3 id="AQS概括"><a href="#AQS概括" class="headerlink" title="AQS概括"></a>AQS概括</h3><p>先说说几个概念</p><ul><li><p>独占锁&amp;共享共享锁  </p><ul><li>独占锁<br>资源最多同时只能被一个线程占用</li><li>共享共享锁<br>资源同时可以被多个线程占用</li></ul></li><li><p>公平锁&amp;非公平锁  </p><ul><li>公平锁<br>线程按照提交的顺序依次去获取资源，按照一定的优先级来，FIFO</li><li>非公平锁<br>线程获取资源的顺序是无序的</li></ul></li></ul><p>AQS中的线程阻塞队列是基于<code>CLH lock queue</code>来实现的，后边会重点说明一下。</p><h4 id="AQS的关键点有三个"><a href="#AQS的关键点有三个" class="headerlink" title="AQS的关键点有三个"></a>AQS的关键点有三个</h4><ul><li>提供变量<code>state</code>来维护状态</li><li>维护线程阻塞队列</li><li>阻塞和唤醒线程</li></ul><h4 id="AQS中的关键字段"><a href="#AQS中的关键字段" class="headerlink" title="AQS中的关键字段"></a>AQS中的关键字段</h4><ul><li>private volatile int state;<br>同步状态，通过设置state来达到同步的效果.<code>该字段在不同的子类中，代表的意义是不同的</code></li><li>private transient volatile Node tail;<br>线程等待队列的尾部，只有<code>enq</code>方法在向队列添加新线程时，才会修改该值</li><li>private transient volatile Node head;<br>线程等待队列的头部</li></ul><p>下面是offset相关的变量，主要是为了提供CAS操作而设立的变量：</p><ul><li>private static final long stateOffset;<br>同步状态的offset</li><li>private static final long headOffset;<br>等待队列头的offset</li><li>private static final long tailOffset;<br>等待队列尾的offset</li><li>private static final long waitStatusOffset;<br>当前节点的等待状态的offset</li><li>private static final long nextOffset;<br>当前节点的下一个节点offset</li></ul><h4 id="AQS中的关键方法"><a href="#AQS中的关键方法" class="headerlink" title="AQS中的关键方法"></a>AQS中的关键方法</h4><p>已经实现的方法如下</p><ul><li>public final void acquire(int arg)<br>获取锁，一般会调用acquire(1)来获取。</li><li>public final boolean release(int arg)<br>释放锁，一般会调用release(1)来释放。</li></ul><p>需要被子类实现的方法</p><ul><li><p>protected boolean tryAcquire(int arg)<br>尝试获取独占锁,在获取前会检查同步状态是否允许获取独占锁。获取成功则返回true，返回false则把线程加入到等待队列。</p></li><li><p>protected boolean tryRelease(int arg)<br>尝试通过设置同步状态，来释放独占锁。</p></li><li><p>protected int tryAcquireShared(int arg)<br>尝试获取共享锁,在获取前会检查同步状态是否允许获取共享锁。获取成功则返回true，返回false则把线程加入到等待队列。</p></li><li><p>protected boolean tryReleaseShared(int arg)<br>尝试通过设置同步状态，来释放共享锁。</p></li></ul><h3 id="CLH-lock-queue和自旋锁"><a href="#CLH-lock-queue和自旋锁" class="headerlink" title="CLH lock queue和自旋锁"></a>CLH lock queue和自旋锁</h3><h4 id="CLH-lock-queue"><a href="#CLH-lock-queue" class="headerlink" title="CLH lock queue"></a>CLH lock queue</h4><p>CLH lock queue是一个存放线程的FIFO队列，队列中的每个线程都在等待它前一个线程释放锁，前面的线程释放了锁之后，该线程将会开始回解除锁并开始执行线程。</p><h4 id="Spin-Lock（自旋锁）"><a href="#Spin-Lock（自旋锁）" class="headerlink" title="Spin Lock（自旋锁）"></a>Spin Lock（自旋锁）</h4><p>是线程通过循环来等待而不是睡眠。</p><h4 id="java-util-concurrent-locks-AbstractQueuedSynchronizer-Node类"><a href="#java-util-concurrent-locks-AbstractQueuedSynchronizer-Node类" class="headerlink" title="java.util.concurrent.locks.AbstractQueuedSynchronizer.Node类"></a>java.util.concurrent.locks.AbstractQueuedSynchronizer.Node类</h4><p>该类实现了<code>CLH lock queue</code>的一个变种，它的数据结构大致如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">     +------+  prev +-----+       +-----+</span><br><span class="line">head |      | &lt;---- |     | &lt;---- |     |  tail</span><br><span class="line">     +------+       +-----+       +-----+</span><br></pre></td></tr></table></figure></p><blockquote><p>图中没有把next指向描述出来。</p></blockquote><ul><li><p>关键字段  </p><ul><li>SHARED<br>共享模式的节点常量，供其方式使用</li><li>EXCLUSIVE<br>独占模式的节点常量，供其方式使用</li><li>waitStatus<br>当前节点/线程的等待状态,该变量会有下面几个值：CANCELLED/SIGNAL/CONDITION/PROPAGATE</li><li>CANCELLED<br>由于超时或者中断线程被中断，节点/线程的状态变为该值时，状态将不会发生变化，可以理解线程被中断之后，就停止了，状态自然不会发生什么变化了。</li><li>SIGNAL<br>表示当前节点以及成功执行,等待unpark</li><li>CONDITION<br>标识线程在condition queue中处于等待状态,等待某一个条件</li><li>PROPAGATE<br>后续结点会传播唤醒的操作，共享锁可执行,独占锁不可</li><li>prev<br>等待队列中，该节点的上一个节点</li><li>next<br>等待队列中，该节点的下一个节点</li><li>thread<br>当前的线程</li></ul></li><li><p>关键方法<br>其实没有什么重要的方法需要在这里提，<code>Node</code>这个类就是个用来实现双向队列的数据结构，它是双向队列中的一个节点。</p></li></ul><h3 id="AQS详解"><a href="#AQS详解" class="headerlink" title="AQS详解"></a>AQS详解</h3><p>在“AQS概括”中已经简单的描述了一些关键的字段和方法，相信在了解了<code>CLH lock queue</code>、<code>自旋锁</code>，以及<code>LockSupport</code>类的设计和实现之后，再回过头来查看AQS内部的实现细节将会很轻松。<br>AQS重要实现了这几个重要的功能，CLH lock queue的维护、独占模式的获取/释放、共享模式的获取/释放。</p><h4 id="CLH-lock-queue的维护"><a href="#CLH-lock-queue的维护" class="headerlink" title="CLH lock queue的维护"></a>CLH lock queue的维护</h4><p>我们知道AQS维护了一个FIFO的队列，那肯定就有入队和出队的操作。</p><ul><li>CLH lock queue入队</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">private Node addWaiter(Node mode) &#123;</span><br><span class="line">    Node node = new Node(Thread.currentThread(), mode);</span><br><span class="line">    // Try the fast path of enq; backup to full enq on failure</span><br><span class="line">    Node pred = tail;</span><br><span class="line">    if (pred != null) &#123;</span><br><span class="line">        node.prev = pred;</span><br><span class="line">        if (compareAndSetTail(pred, node)) &#123;</span><br><span class="line">            pred.next = node;</span><br><span class="line">            return node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    enq(node); //把节点放入队列</span><br><span class="line">    return node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private Node enq(final Node node) &#123;</span><br><span class="line">    for (;;) &#123;</span><br><span class="line">        Node t = tail;</span><br><span class="line">        if (t == null) &#123; // Must initialize</span><br><span class="line">            if (compareAndSetHead(new Node()))</span><br><span class="line">                tail = head;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            node.prev = t;</span><br><span class="line">            if (compareAndSetTail(t, node)) &#123;</span><br><span class="line">                t.next = node;</span><br><span class="line">                return t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private final boolean compareAndSetTail(Node expect, Node update) &#123;</span><br><span class="line">    return unsafe.compareAndSwapObject(this, tailOffset, expect, update);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private final boolean compareAndSetHead(Node update) &#123;</span><br><span class="line">    return unsafe.compareAndSwapObject(this, headOffset, null, update);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当队列不为空时，节点添加到队列前，队列状态如下图所示：<br><img src="http://leocook-blog.test.upcdn.net/queue-notnull-before.png" alt="queue-notnull-before"></p><p>节点加入队列的过程如下图所示：<br><img src="http://leocook-blog.test.upcdn.net/queue-notnull-after.png" alt="queue-notnull-after"></p><p>当队列为空时，首次加入节点会进行一些初始化，具体的操作过程可以看下图：<br><img src="http://leocook-blog.test.upcdn.net/queue-null-init.png" alt="queue-null-init"></p><ul><li>CLH lock queue出队  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">private void setHead(Node node) &#123;</span><br><span class="line">    head = node;</span><br><span class="line">    node.thread = null;</span><br><span class="line">    node.prev = null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="独占模式的实现"><a href="#独占模式的实现" class="headerlink" title="独占模式的实现"></a>独占模式的实现</h4><h5 id="独占模式的获取"><a href="#独占模式的获取" class="headerlink" title="独占模式的获取"></a>独占模式的获取</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public final void acquire(int arg) &#123;</span><br><span class="line">    if (!tryAcquire(arg)/*尝试获取锁*/ &amp;&amp;</span><br><span class="line">        acquireQueued(addWaiter(Node.EXCLUSIVE/*设置为独占锁状态,并把当前线程放入了队列中*/), arg)/*放入队列后,阻塞该线程*/)</span><br><span class="line">        selfInterrupt(); //若park的原因是线程被interrupt掉了,则中断线程</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这块的原理大概如下：</p><ul><li>先通过<code>tryAcquire</code>来尝试获取锁，如果能获取到锁的话就返回；否则加入到队列，并阻塞线程；</li><li>线程退出阻塞的时候，通过<code>Thread.interrupted()</code>来判断线程是否是因为被中断才退出park的，若是的话，则中断当前线程。</li></ul><p>具体我们可以查阅下面这几个方法的源码：</p><ul><li><p>acquireQueued<br>线程节点之前以及加入到队列中了，该方法将要阻塞该线程，在退出阻塞的时候，返回该线程是否是被中断退出的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">final boolean acquireQueued(final Node node, int arg) &#123;</span><br><span class="line">    boolean failed = true;</span><br><span class="line">    try &#123;</span><br><span class="line">        boolean interrupted = false;</span><br><span class="line"></span><br><span class="line">        //自旋锁,double check</span><br><span class="line">        //等待前面的节点释放锁</span><br><span class="line">        for (;;) &#123;</span><br><span class="line">            final Node p = node.predecessor(); //获取该节点的上一个节点</span><br><span class="line"></span><br><span class="line">            //如果前继节点就是head,现在就可以直接去尝试获取锁,如果没有其它线程的干扰,肯定是能够获取到的</span><br><span class="line">            if (p == head/*前继节点就是head*/ &amp;&amp; tryAcquire(arg)/*尝试获取锁*/) &#123;</span><br><span class="line"></span><br><span class="line">                //前继节点出队,当前的node设置为head</span><br><span class="line">                setHead(node);</span><br><span class="line">                p.next = null; // help GC</span><br><span class="line">                failed = false;</span><br><span class="line">                return interrupted;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //去除前面被取消的(CANCELLED)的线程</span><br><span class="line">            //若前继节点没有没被取消,则表示当前线程可以被park</span><br><span class="line">            //park当前线程,park结束时检查是否被interrupt,若是则设置interrupted为true,跳出循环后中断线程</span><br><span class="line">            if (shouldParkAfterFailedAcquire(p, node) &amp;&amp; parkAndCheckInterrupt())</span><br><span class="line">                interrupted = true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        //若线程失败,则取消获取锁</span><br><span class="line">        if (failed)</span><br><span class="line">            cancelAcquire(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>shouldParkAfterFailedAcquire<br>去除前面被取消的(CANCELLED)的线程,若前继节点没有没被取消,则表示当前线程可以被park</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">private static boolean shouldParkAfterFailedAcquire(Node pred, Node node) &#123;</span><br><span class="line">    int ws = pred.waitStatus;</span><br><span class="line">    if (ws == Node.SIGNAL)</span><br><span class="line">        /*</span><br><span class="line">         * 前继节点已经成功执行,等待释放锁,所以当前的线程可以安全的park。</span><br><span class="line">         */</span><br><span class="line">        return true;</span><br><span class="line">    if (ws &gt; 0) &#123;</span><br><span class="line">        /*</span><br><span class="line">         * 前继节点的线程已经被取消,所以跳过已经被取消的节点,并一直往前跳过所有连续的CANCELLED节点</span><br><span class="line">         *</span><br><span class="line">         */</span><br><span class="line">        do &#123;</span><br><span class="line">            node.prev = pred = pred.prev;</span><br><span class="line">        &#125; while (pred.waitStatus &gt; 0);</span><br><span class="line">        pred.next = node;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        /*</span><br><span class="line">         * 当前继节点的waitStatus非SIGNAL &amp; 非CANCELLED,需要设置waitStatus的值为SIGNAL,并返回false,继续自旋</span><br><span class="line">         */</span><br><span class="line">        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>parkAndCheckInterrupt<br>park当前线程,并返回线程是否被中断</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">private final boolean parkAndCheckInterrupt() &#123;</span><br><span class="line">    LockSupport.park(this);</span><br><span class="line"></span><br><span class="line">    //阻塞结束时,调用Thread.interrupted()来检查结束阻塞的原因是什么</span><br><span class="line">    return Thread.interrupted();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="独占模式的释放"><a href="#独占模式的释放" class="headerlink" title="独占模式的释放"></a>独占模式的释放</h5><p>释放独占模式，解除线程阻塞；该过程中会唤醒队列中后继节点的线程。</p><ul><li><p>release<br>该方法一般会被子类调用，例如<code>java.util.concurrent.locks.ReentrantLock#unlock</code>这个方法，release的实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public final boolean release(int arg) &#123;</span><br><span class="line">    if (tryRelease(arg)/*该方法被子类实现*/) &#123;</span><br><span class="line">        Node h = head;</span><br><span class="line">        if (h != null &amp;&amp; h.waitStatus != 0)</span><br><span class="line">            unparkSuccessor(h)/*唤醒后继节点的线程*/;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>unparkSuccessor<br>唤醒后继节点的线程   </p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">private void unparkSuccessor(Node node) &#123;</span><br><span class="line">    /*</span><br><span class="line">     * node节点以及执行完成,不用加锁了,所以可以把等待状态设置为0。</span><br><span class="line">     */</span><br><span class="line">    int ws = node.waitStatus;</span><br><span class="line">    if (ws &lt; 0)</span><br><span class="line">        compareAndSetWaitStatus(node, ws, 0);</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * 唤醒node节点的后继节点线程。</span><br><span class="line">     */</span><br><span class="line">    Node s = node.next;</span><br><span class="line">    if (s == null || s.waitStatus &gt; 0) &#123;</span><br><span class="line">        s = null;</span><br><span class="line">        for (Node t = tail; t != null &amp;&amp; t != node; t = t.prev)</span><br><span class="line">            if (t.waitStatus &lt;= 0)</span><br><span class="line">                s = t;</span><br><span class="line">    &#125;</span><br><span class="line">    if (s != null)</span><br><span class="line">        LockSupport.unpark(s.thread);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="共享模式的实现"><a href="#共享模式的实现" class="headerlink" title="共享模式的实现"></a>共享模式的实现</h4><h5 id="共享模式的获取"><a href="#共享模式的获取" class="headerlink" title="共享模式的获取"></a>共享模式的获取</h5><ul><li><p>acquireShared  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public final void acquireShared(int arg) &#123;</span><br><span class="line">    if (tryAcquireShared(arg)/*尝试获取共享模式,若无许可则进入等待*/ &lt; 0)</span><br><span class="line">        doAcquireShared(arg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>doAcquireShared<br>该方法和独占模式的<code>acquireQueued</code>方法很像，主要的区别就是在<code>setHeadAndPropagate</code>中，如果当前节点获取到了许可，且还有多余的许可，则继续让后继节点获取许可并唤醒他们，并一直往后传递下去。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">private void doAcquireShared(int arg) &#123;</span><br><span class="line">    final Node node = addWaiter(Node.SHARED)/*添加节点到队列*/;</span><br><span class="line">    boolean failed = true;</span><br><span class="line">    try &#123;</span><br><span class="line">        boolean interrupted = false;</span><br><span class="line">        for (;;) &#123;</span><br><span class="line">            //获取到前继节点</span><br><span class="line">            final Node p = node.predecessor();</span><br><span class="line">            if (p == head) &#123; //如果前继节点就是head节点的话</span><br><span class="line">                int r = tryAcquireShared(arg);//尝试获取共享模式</span><br><span class="line">                if (r &gt;= 0) &#123;</span><br><span class="line">                    setHeadAndPropagate(node, r); //设置当前节点为head节点</span><br><span class="line">                    p.next = null; // help GC</span><br><span class="line">                    if (interrupted)    //判断退出xxxx的时候,是否是被interrupt掉的</span><br><span class="line">                        selfInterrupt();</span><br><span class="line">                    failed = false;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //去除前面被取消的(CANCELLED)的线程</span><br><span class="line">            //若前继节点没有没被取消,则表示当前线程可以被park</span><br><span class="line">            //park当前线程,park结束时检查是否被interrupt,若是则设置interrupted为true,跳出循环后中断线程</span><br><span class="line">            if (shouldParkAfterFailedAcquire(p, node) &amp;&amp; parkAndCheckInterrupt())</span><br><span class="line">                interrupted = true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        if (failed)</span><br><span class="line">            cancelAcquire(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>setHeadAndPropagate  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">private void doReleaseShared() &#123;</span><br><span class="line">    for (;;) &#123;</span><br><span class="line">        Node h = head;</span><br><span class="line">        if (h != null &amp;&amp; h != tail) &#123; //若队列里有线程节点</span><br><span class="line">            int ws = h.waitStatus;</span><br><span class="line"></span><br><span class="line">            //线程状态为SIGNAL的时候,才可以唤醒后继节点的线程</span><br><span class="line">            if (ws == Node.SIGNAL) &#123;</span><br><span class="line"></span><br><span class="line">                //重置Node的状态为0,unpark该节点</span><br><span class="line">                if (!compareAndSetWaitStatus(h, Node.SIGNAL, 0))</span><br><span class="line">                    continue;            // loop to recheck cases</span><br><span class="line">                unparkSuccessor(h); //unpark</span><br><span class="line">            &#125;</span><br><span class="line">            else if (ws == 0 &amp;&amp;</span><br><span class="line">                     !compareAndSetWaitStatus(h, 0, Node.PROPAGATE))</span><br><span class="line">                //如果线程状态为0则更新状态为PROPAGATE，让后继节点传播唤醒操作,失败重试</span><br><span class="line">                continue;                // loop on failed CAS</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //head变化了,说明该节点被唤醒了,则继续唤醒后边的节点</span><br><span class="line">        if (h == head)                   // loop if head changed</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>共享模式的释放<br>当tryReleaseShared返回true的时候,会把一个或多个线程从共享模式中唤醒。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public final boolean releaseShared(int arg) &#123;</span><br><span class="line">    if (tryReleaseShared(arg)/*该方法由子类实现*/) &#123;</span><br><span class="line">        doReleaseShared();</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>AQS是<code>java.util.concurrent</code>中的核心，它的内部类<code>java.util.concurrent.locks.AbstractQueuedSynchronizer.Node</code>通过实现<code>CLH lock queue</code>的一个变种来轮询执行CAS操作来调用<code>Unsafe.park()</code>获取锁。<br>AQS理解了，下一篇会聊聊它的一个具体的实现<code>java.util.concurrent.locks.ReentrantLock</code>类，这样会更直观的展现AQS的精妙。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AQS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java并发(四)：LockSupport</title>
      <link href="/2017/07/08/java-2017-07-08-Java%E5%B9%B6%E5%8F%91-%E5%9B%9B-%EF%BC%9ALockSupport/"/>
      <url>/2017/07/08/java-2017-07-08-Java%E5%B9%B6%E5%8F%91-%E5%9B%9B-%EF%BC%9ALockSupport/</url>
      
        <content type="html"><![CDATA[<p>关键词：LockSupport</p><p>前面我们讨论了<code>sun.misc.Unsafe</code>类，该类提供了面向操作系统直接操作内存和CPU的方法，例如分配内心和阻塞线程等等。但是该类在使用时是不安全的，所以jdk在不同的场景下对它做了不同的包装。</p><p><code>java.util.concurrent.locks.LockSupport</code>类就是对<code>sun.misc.Unsafe</code>类进行了一些封装，主要提供一些锁的基础操作。</p><p>LockSupport阻塞线程的机制与<code>Object</code>的wait和notify是不一样的：</p><ul><li>调用API层面的区别<br><code>LockSupport</code>的park和unpark可以用“线程”作为该方法的参数，语义更合乎逻辑。<br><code>Object</code>的wait和notify是由<code>监视器对象</code>来调用的，对线程来说，它的阻塞和唤醒是被动的，不能准确的控制某个指定的线程，要么随机唤醒（notify）、要么唤醒全部（notifyAll）。</li><li>实现原理的区别<br><code>Object</code>的wait和notify以及<code>synchronized</code>都是通过占用和释放该<code>对象的监视器</code>来实现锁的获取和释放。<br><code>LockSupport</code>不使用对象的监视器，每次执行<code>park</code>时会消耗1个<code>许可</code>，每次执行<code>unpark</code>时会获得1个<code>许可</code>。</li></ul><blockquote><p>如果查看Unsafe的C++<a href="http://hg.openjdk.java.net/jdk7/jdk7/hotspot/file/81d815b05abb/src/os/linux/vm/os_linux.cpp" target="_blank" rel="noopener">源码</a>会发现，这个<code>许可</code>，其实就是一个<code>_counter</code>变量。<br>当执行<code>park</code>的时候，若<code>_counter</code>值大于0则立马返回并把<code>_counter</code>的值设置为0，线程不会阻塞；若<code>_counter</code>值等于0，则阻塞当前线程。可以理解这个过程将会消耗一个许可，若没有许可被消耗，则阻塞。<br>当执行<code>unpark</code>的时候，将会把<code>_counter</code>的值设置为1。可以理解这个过程是是给线程添加一个许可，且多次调用也只会添加一个许可。<br><code>_counter</code>为1的时候表示许可可用，为0的时候表示许可不可用。如果能够很好的理解这个“许可”的设计，在查看LockSupport类源码的时候，将会轻松很多。</p></blockquote><h4 id="LockSupport类的核心字段"><a href="#LockSupport类的核心字段" class="headerlink" title="LockSupport类的核心字段"></a>LockSupport类的核心字段</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//unsafe，用于CAS操作</span><br><span class="line">private static final Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class="line"></span><br><span class="line">//Thread中parkBlocker的内存偏移量</span><br><span class="line">private static final long parkBlockerOffset;</span><br></pre></td></tr></table></figure><p>在<code>java.lang.Thread</code>类中有个字段<code>parkBlocker</code>用来存放该线程阻塞时是被哪个对象阻塞的。</p><h4 id="LockSupport类的核心方法"><a href="#LockSupport类的核心方法" class="headerlink" title="LockSupport类的核心方法"></a>LockSupport类的核心方法</h4><ul><li><p>public static void park()<br>如果许可可用，则使用该许可，并立刻返回；否则阻塞当前线程。</p></li><li><p>public static void park(Object blocker)<br>如果许可可用，则使用该许可，并立刻返回；否则阻塞当前线程，并告诉线程是谁阻塞了它。</p></li><li><p>public static void parkNanos(long nanos)<br>如果许可可用，则使用该许可，并立刻返回；否则阻塞当前线程nanos纳秒。</p></li><li><p>public static void parkNanos(Object blocker, long nanos)<br>如果许可可用，则使用该许可，并立刻返回；否则阻塞当前线程nanos纳秒，并告诉线程是谁阻塞了它。</p></li><li><p>public static void parkUntil(long deadline)<br>如果许可可用，则使用该许可，并立刻返回；否则阻塞当前线程直到时间deadline。与parkNanos相比，这里的时间是绝对时间戳。</p></li><li><p>public static void parkUntil(Object blocker, long deadline)<br>如果许可可用，则使用该许可，并立刻返回；否则阻塞当前线程直到时间deadline，并告诉线程是谁阻塞了它。</p></li><li><p>public static void unpark(Thread thread)<br>若许可不可用，则使许可可用。若线程因为调用了park而阻塞，则它将解除阻塞状态。否则保证下一次调用park不会受阻。</p></li><li><p>private static void setBlocker(Thread t, Object arg)<br>给线程t设置阻塞对象，告诉t是谁阻塞了它。</p></li><li><p>public static Object getBlocker(Thread t)<br>获取是谁阻塞了线程t</p></li></ul><h4 id="Thread-interrupt-方法"><a href="#Thread-interrupt-方法" class="headerlink" title="Thread.interrupt()方法"></a>Thread.interrupt()方法</h4><p>Thread.interrupt()方法不会中断一个正在运行的线程。当线程被Object.wait、Thread.join和Thread.sleep三种方法阻塞时，若调用了Thread.interrupt()方法，线程将退出阻塞状态，并会抛出一个<code>InterruptedException</code>中断异常。</p><blockquote><p><code>LockSupport.park()</code>也能够响应中断信号，但是它不会抛出<code>InterruptedException</code>中断异常。</p></blockquote><ul><li>Thread.interrupted() &amp; Thread.isInterrupted()方法<br>测试线程是否已经中断。前者是静态方法，后者不是。当我们需要停止一个线程的时候，一般有两种方式：<ul><li>通过共享变量；</li><li>通过调用线程的<code>interrupt</code>方法。</li></ul></li></ul><p>前者在线程阻塞的时候不能够被中断，只有当线程执行的时候才可以;而后者只能在线程处于阻塞的时候才能够被中断，线程执行时不可以中断。</p><ul><li>interrupted status<br><code>interrupted status</code>是线程的中断状态，被JVM的C++代码维护着。<ul><li>在调用Thread.join和Thread.sleep之后，将会设置interrupted status；</li><li>当退出阻塞、抛出<code>InterruptedException</code>异常的时候，interrupted status将会被清除；</li><li>调用<code>public static boolean interrupted()</code>方法后，会清除interrupted status</li></ul></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><code>java.util.concurrent.locks.LockSupport</code>类是对<code>sun.misc.Unsafe</code>类的二次封装，主要提供了一些线程阻塞的工具。<br>该类在AQS中被大量的运用，在阅读AQS的源码时，需要对该类有所了解。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LockSupport </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java并发(三)：Unsafe和CAS</title>
      <link href="/2017/06/24/java-2017-06-24-Java%E5%B9%B6%E5%8F%91-%E4%B8%89-%EF%BC%9AUnsafe%E5%92%8CCAS/"/>
      <url>/2017/06/24/java-2017-06-24-Java%E5%B9%B6%E5%8F%91-%E4%B8%89-%EF%BC%9AUnsafe%E5%92%8CCAS/</url>
      
        <content type="html"><![CDATA[<p>关键词：CAS、Unsafe</p><p>CAS是JSR-166和核心思想，Java中的CAS思想被C/C++实现，并被sun.misc.Unsafe类包装，供Java调用。查看其对应的C/C++源码可以<a href="https://github.com/aeste/gcc/blob/master/libjava/sun/misc/natUnsafe.cc" target="_blank" rel="noopener">点击这里</a>。<br>Java中的非阻塞锁是基于AQS实现的，而AQS的设计就是建立在CAS和Unsafe类上的，所以学习本文还是很有必要性的。</p><p>在学习CAS、sun.misc.Unsafe类之前，我们需要知道一些基础的概念：</p><ul><li><a href="http://www.leocook.org/2017/06/12/Java%E5%B9%B6%E5%8F%91-%E5%8E%9F%E5%AD%90%E6%80%A7-%E5%8F%AF%E8%A7%81%E6%80%A7-%E6%9C%89%E5%BA%8F%E6%80%A7/" target="_blank" rel="noopener">Java并发：原子性、可见性、有序性</a></li><li><a href="http://www.leocook.org/2017/06/17/Java%E5%B9%B6%E5%8F%91-volatile%E5%85%B3%E9%94%AE%E5%AD%97/" target="_blank" rel="noopener">Java并发：volatile关键字</a></li></ul><h2 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h2><p>CAS是<code>Compare and Swap</code>的缩写，即比较并转换。在设计并发算法的时候会用到的技术，JSR-166特性是完全建立在CAS的基础上的，可见其重要性。<br>维基百科对CAS的解释可以看这里：<a href="https://zh.wikipedia.org/wiki/%E6%AF%94%E8%BE%83%E5%B9%B6%E4%BA%A4%E6%8D%A2" target="_blank" rel="noopener">CAS比较并交换</a></p><p>Java就是通过Unsafe类的compareAndSwap系列方法实现的CAS，当前的绝大多是CPU都是支持CAS的，不同厂商的CPU的CAS指令可能是不同的。</p><h4 id="CAS原理"><a href="#CAS原理" class="headerlink" title="CAS原理"></a>CAS原理</h4><p>CAS有三个操作数：内存位置V，预期值A和新值B（将要被修改成的值）。<br>在修改值的时候，若内存位置V存的值和预期值A相等，那么就把内存位置的V的值修改为B，返回true；否则，什么都不做，并返回false。<br>在Java的实现中，V可以是一个存储A地址的long整数，A是一个使用了volatile修饰的基础数据类型或者对象，B的类型和A的类型一致。</p><h4 id="AtomicInteger示例"><a href="#AtomicInteger示例" class="headerlink" title="AtomicInteger示例"></a>AtomicInteger示例</h4><p>java.util.concurrent.atomicAtomicInteger是Jdk提供的一个类，如果你需要一个读写有原子性的整数类型，使用它就对了！<br>我们可以趴一下AtomicInteger的源码，可以观察到下面这个方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 在当前值上原子性的自增1</span><br><span class="line"> */</span><br><span class="line">public final int getAndIncrement() &#123;</span><br><span class="line">    for (;;) &#123;</span><br><span class="line">        int current = get();</span><br><span class="line">        int next = current + 1;</span><br><span class="line">        if (compareAndSet(current, next))</span><br><span class="line">            return current;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public final boolean compareAndSet(int expect, int update) &#123;</span><br><span class="line">    return unsafe.compareAndSwapInt(this, valueOffset, expect, update);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们能够看到，为了保证操作的原子性，调用了<code>compareAndSet</code>方法，而<code>compareAndSet</code>方法又调用了Unsafe的<code>compareAndSwapInt</code>方法。</p><h4 id="CAS的ABA问题"><a href="#CAS的ABA问题" class="headerlink" title="CAS的ABA问题"></a>CAS的ABA问题</h4><p>维基百科上的说明是如下：</p><ul><li>1.进程P1读取了一个数值A</li><li>2.P1被挂起(时间片耗尽、中断等)，进程P2开始执行</li><li>3.P2修改数值A为数值B，然后又修改回A</li><li>4.P1被唤醒，比较后发现数值A没有变化，程序继续执行。<br>对于线程P1来说，数值一直是A未变化过，但实际上数值发生过变化的。关于这个维基百科里说的很清楚。</li></ul><h2 id="sun-misc-Unsafe"><a href="#sun-misc-Unsafe" class="headerlink" title="sun.misc.Unsafe"></a>sun.misc.Unsafe</h2><p>我们在日常开发的时候，Java是无法直接做操作系统级别的访问，如果想访问操作系统，我们可以使用C/C++来开发，然后使用JNI或者JNA来调用C/C++的库。<br>JVM中存在<code>sun.misc.Unsafe</code>这样的一个类，该类中提供了一系列的底层方法，这些方法可以直接操作操作系统的内存等。该类在设计的时候，默认是不让一般的开发人员不可以使用，只有授信代码才可以使用。</p><h4 id="Unsafe类是单例的"><a href="#Unsafe类是单例的" class="headerlink" title="Unsafe类是单例的"></a>Unsafe类是单例的</h4><p>从下面的代码中，我们可以看出Unsafe是单例的。且只能通过类加载器来获取，不能直接使用new来创建。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">private static final Unsafe theUnsafe;</span><br><span class="line"></span><br><span class="line">private Unsafe() &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@CallerSensitive</span><br><span class="line">public static Unsafe getUnsafe() &#123;</span><br><span class="line">    Class var0 = Reflection.getCallerClass();</span><br><span class="line">    if(var0.getClassLoader() != null) &#123;</span><br><span class="line">        throw new SecurityException(&quot;Unsafe&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return theUnsafe;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建Unsafe对象"><a href="#创建Unsafe对象" class="headerlink" title="创建Unsafe对象"></a>创建Unsafe对象</h4><p>如果你直接调用getUnsafe方法来创建Unsafe对象，那么在编译的时候你将会得到警告提示，例如对于下面这段代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import sun.misc.Unsafe;</span><br><span class="line"></span><br><span class="line">public class ThreadDemo&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们编译时将会看到如下的警告信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ThreadDemo.java:1: 警告: Unsafe是内部专用 API, 可能会在未来发行版中删除</span><br><span class="line">import sun.misc.Unsafe;</span><br><span class="line">               ^</span><br><span class="line">ThreadDemo.java:6: 警告: Unsafe是内部专用 API, 可能会在未来发行版中删除</span><br><span class="line">Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class="line">^</span><br><span class="line">ThreadDemo.java:6: 警告: Unsafe是内部专用 API, 可能会在未来发行版中删除</span><br><span class="line">Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class="line">                ^</span><br><span class="line">3 个警告</span><br></pre></td></tr></table></figure><p>但是我可以对代码进行授信处理，Java是通过内加载器是否为根类加载器判断是否授信的，我们可以使用JVM参数bootclasspath：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Xbootclasspath:/usr/java/jdk1.7.0/jre/lib/rt.jar:. com.mishadoff.magic.UnsafeClient</span><br></pre></td></tr></table></figure><p><strong>Jdk不建议开发者直接创建Unsafe对象</strong>，如果我们必须要创建，那么我们可以使用<strong>反射</strong>的方式来创建：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import java.lang.reflect.Field;</span><br><span class="line">import sun.misc.Unsafe;</span><br><span class="line">import sun.reflect.Reflection;</span><br><span class="line"></span><br><span class="line">Field field = Unsafe.class.getDeclaredField(&quot;theUnsafe&quot;);</span><br><span class="line">field.setAccessible(true);</span><br><span class="line">Unsafe unsafe = (Unsafe) field.get(null);</span><br><span class="line">System.out.println(unsafe);</span><br></pre></td></tr></table></figure><h4 id="Unsafe类的方法介绍"><a href="#Unsafe类的方法介绍" class="headerlink" title="Unsafe类的方法介绍"></a>Unsafe类的方法介绍</h4><p>Unsafe类中的方法有很多，其实我们需要关注只有这么几个。</p><ul><li><p>内存分配<br>allocateMemory：分配内存（非堆内存）<br>reallocateMemory：重新分配内存<br>freeMemory：释放内存</p></li><li><p>线程操作<br>park：锁定当前的线程<br>unpark：解锁指定的线程</p></li><li><p>CAS操作<br>public final native boolean compareAndSwapXXX(Object o,long offset,K expected,K x)<br>例如：compareAndSwapInt、compareAndSwapLong、compareAndSwapObject等等。<br>该方法也就是Java中的CAS的实现，这个方法会比较expected的值和内存地址在offset位置的值是否一样，如果一样则会更新expected的值为x，并返回true，否则返回false。</p></li></ul><p>还有其它的相关方法可以看下面：</p><ul><li><p>public native int addressSize()<br>本地指针所占用的存储大小，值为4或8.</p></li><li><p>public native int pageSize()<br>返回内存页信息</p></li><li><p>public native Object allocateInstance(Class cls)<br>分配一个指定的对象，但是不执行任何构造方法。</p></li><li><p>public native int arrayBaseOffset(Class arrayClass)<br>返回数组的内存起始位置</p></li><li><p>copyMemory<br>把某段内存块中的数据copy到另外一段内存块中。</p></li><li><p>defineAnonymousClass<br>定义一个匿名类。</p></li><li><p>defineClass<br>让JVM定义一个类，不进行安全性检查。</p></li><li><p>ensureClassInitialized<br>确定类已经被初始化了。这个经常在访问类的静态成员变量时会结合访问。</p></li><li><p>fieldOffset<br>返回字段在对象中的内存offset</p></li><li><p>freeMemory<br>释放内存</p></li><li><p>getXXX(Object o,long offset)<br>获取对象o中内存偏移量为offset的值。</p></li><li><p>getUnsafe<br>单例，获取Unsafe对象</p></li><li><p>monitorEnter(Object o)<br>锁定对象，直到调用了monitorExit(Object o)后才会被解锁</p></li><li><p>monitorExit(Object o)<br>解锁对象，该对象必须是之前就已经被锁定了(被执行过monitorExit)</p></li></ul><p>详情可以查看：<code><a href="http://www.docjar.com/docs/api/sun/misc/Unsafe.html" target="_blank" rel="noopener">http://www.docjar.com/docs/api/sun/misc/Unsafe.html</a></code></p><h4 id="Examples-for-Unsafe"><a href="#Examples-for-Unsafe" class="headerlink" title="Examples for Unsafe"></a>Examples for Unsafe</h4><ul><li>sun.misc.Unsafe#allocateInstance()<br>不使用类的构造方法，来生成一个类的对象。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import java.lang.reflect.Field;</span><br><span class="line">import sun.misc.Unsafe;</span><br><span class="line">import sun.reflect.Reflection;</span><br><span class="line"></span><br><span class="line">Field field = Unsafe.class.getDeclaredField(&quot;theUnsafe&quot;);</span><br><span class="line">field.setAccessible(true);</span><br><span class="line">Unsafe unsafe = (Unsafe) field.get(null);</span><br><span class="line"></span><br><span class="line">Person person1 = (Person)unsafe.allocateInstance(Person.class);</span><br><span class="line">System.out.println(person1); //null: 0</span><br><span class="line"></span><br><span class="line">Person person2 = new Person();</span><br><span class="line">System.out.println(person2);//test: 22</span><br></pre></td></tr></table></figure><p>我们对比person1和person2，可以发现person1是没有使用构造方法的，而person2是使用了构造方法的。</p><ul><li>objectFieldOffset、putXXX<br>操作对象成员的值：<br><code>objectFieldOffset(Field var1)</code>是获取成员变量的相对于对象内存的偏移量。<br><code>putLong，putInt，putDouble，putChar，putObject</code>等，可以直接修改对象内存中的数据，可以突破访问修饰符(private/protected)的限制。可以查看下面的例子：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import java.lang.reflect.Field;</span><br><span class="line">import sun.misc.Unsafe;</span><br><span class="line">import sun.reflect.Reflection;</span><br><span class="line"></span><br><span class="line">Field field = Unsafe.class.getDeclaredField(&quot;theUnsafe&quot;);</span><br><span class="line">field.setAccessible(true);</span><br><span class="line">Unsafe unsafe = (Unsafe) field.get(null);</span><br><span class="line"></span><br><span class="line">Person person1 = (Person)unsafe.allocateInstance(Person.class);</span><br><span class="line">System.out.println(person1);    //null: 0</span><br><span class="line"></span><br><span class="line">Class clazz = person1.getClass();</span><br><span class="line">Field name = clazz.getDeclaredField(&quot;name&quot;);</span><br><span class="line">Field age = clazz.getDeclaredField(&quot;age&quot;);</span><br><span class="line"></span><br><span class="line">unsafe.putObject(person1, unsafe.objectFieldOffset(name),&quot;张三&quot;);</span><br><span class="line">unsafe.putInt(person1, unsafe.objectFieldOffset(age),18);</span><br><span class="line"></span><br><span class="line">System.out.println(person1);    //张三: 18</span><br></pre></td></tr></table></figure><p>关于Unsafe类里的方法，感兴趣的网上查找阅读相关的C/C++实现。</p><ul><li>大数组操作<br>Java最大只能创建长度为<code>Integer.MAX_VALUE</code>的数组，我们知道当JVM消耗内存过高的时候发生GC，性能上会大打折扣。那么当我们需要创建一个大数组，且不想因为GC而引起大的性能损耗时，我们能想到的就是使用堆外内存。例如下边的代码就实现了一个大的字节数组：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class BigByteArray &#123;</span><br><span class="line">    private final static int BYTE = 1;</span><br><span class="line"></span><br><span class="line">    private long size;</span><br><span class="line">    private long address;</span><br><span class="line"></span><br><span class="line">    public BigArray(long size) &#123;</span><br><span class="line">        this.size = size;</span><br><span class="line">        address = getUnsafe().allocateMemory(size * BYTE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void set(long i, byte value) &#123;</span><br><span class="line">        getUnsafe().putByte(address + i * BYTE, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int get(long idx) &#123;</span><br><span class="line">        return getUnsafe().getByte(address + idx * BYTE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public long size() &#123;</span><br><span class="line">        return size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>学习完Unsafe和CAS之后，我们再来学习Java中的AQS的实现，就好理解了。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CAS Unsafe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CAP理论</title>
      <link href="/2017/06/24/java-2017-07-01-CAP%E7%90%86%E8%AE%BA/"/>
      <url>/2017/06/24/java-2017-07-01-CAP%E7%90%86%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<p>关键词：CAP、可用性、分区容错性、强一致性、弱一致性、最终一致性</p><p>CAP理论在互联网的知名度挺高，有些开发在设计分布式系统的时候甚至会把它作为衡量系统设计的标准。CAP理论指出任何分布式系统在可用性、一致性、分区容错性这3个点上最多只能同时满足2点。但事实上，CAP理论在被人称之为定理的同时，也伴随着很多争议。其实我个人并不觉得它是一个定理。</p><h3 id="CAP理论的起源"><a href="#CAP理论的起源" class="headerlink" title="CAP理论的起源"></a>CAP理论的起源</h3><p>CAP理论起源于伯克莱加州大学的计算机科学家Eric Brewer在2000年的分布式计算原则研讨会（PODC）上提出的猜想：一致性（Consistency）、可用性（Availability）、分区容错性（Partition tolerance）三者无法在分布式系统中同时满足。其实Eric Brewer教授当时的猜想是建立在webservice集群场景上的，并对CAP理论进行定义：</p><ul><li><p>C(一致性)<br>系统在执行过某项操作后，仍处于状态一致。</p></li><li><p>A(可用性)<br>分布式系统中的每个节点都能响应客户端的请求，数据可以不是最新的。</p></li><li><p>P(分区容错性)<br>当分布式系统遇到节点故障、网络分区故障的时候，仍然能够提供一致性和可用性保障。</p></li></ul><p>单看上面的理论，很抽象。下面简单聊聊我对它的理解：</p><ul><li>C(一致性)<br>一致性可以从客户端和服务端两个角度来看。从服务端来说，一致性就是指在分布式系统中修改了某个值之后，该值在其它节点上的副本也能立马更新到最新的值，并且客户端写、各分区数据更新到最新这一系列的操作组合是原子的。从客户端来说，当修改了某条记录之后，后续的所有请求都能够返回到更新后的新数据。<br>为此又衍生出了三个概念：<ul><li>强一致性<br>分布式系统中某个值发生了变化后，必须要保证节点的副本值同时更新到最新值。保证该值在更新后，后续所有访问都能访问到返回最新的值。</li><li>弱一致性<br>分布式系统中某个值发生了变化后，不能保证部分和所有的数据的副本能立马被更新到最新状态。后续的访问可能部分请求不能返回最新的值，可能所有请求都不能返回最新的值，但经过“不一致时间窗口”这段时间后，所有数据的副本都更新到了最新状态，客户端后续的访问也都会返回最新的数值。</li><li>最终一致性<br>最终一致性是弱一致性的特殊形式，系统保证数据在后续没有再次被更新的前提下，该数据的所有副本最终都将会变为最新的数据，且客户端对它后续的所有访问返回的都是最新的数据。</li></ul></li><li><p>A(可用性)<br>这里的可用性指的不是分布式环境的可用性，这里的可以性是指分布式中单个节点可响应客户端的请求，响应返回的数据可以是最新状态，也可以不是最新状态，只要客户端的请求能被响应，就算该节点是可用的。</p></li><li><p>P(分区容错性)<br>当分布式系统遇到节点故障、网络分区故障的时候，分布式系统仍然能够给客户端提供服务。其实，就是客户端在请求到故障节点时，会跳过该节点，并继续请求其它正常的节点。</p></li></ul><h4 id="CAP三选二"><a href="#CAP三选二" class="headerlink" title="CAP三选二"></a>CAP三选二</h4><ul><li>CA without P（一致性、可用性）<br>如果同时满足了一致性和可用性，那么存在两种情况：第一种是单机环境，这样就可以保证C和A了；第二种是分布式环境，每次数据修改时都对分区中对这条数据的副本加锁，不给其它操作来修改它，当所有副本数据都是最新之后，再释放锁，但是这些设计出来的系统效率极为低下，甚至还不如单机环境。所以无法满足P。</li><li>CP without A（一致性、分区容错性）<br>如果要保证在多个节点环境下，每个节点之间都是强一致的，那么肯定会导致分区之间存在同步时间，当并发高的时候，同步时间可能会延长很多，这样就不能保证每个节点的数据都是最新的了。但是可以通过P保证用户请求指向更新后的那些节点，以此来保障整个系统可以正常工作。</li><li>AP without C（可用性、分区容错性）<br>如果保证了可用性、以及分区容错性，那就必须要放弃一致性，例如某个节点故障了，这时候该节点将会被划分到“故障分区”进行隔离，隔离后节点将接收不到请求，自然就失去了一致性。</li></ul><h3 id="CAP理论的确定"><a href="#CAP理论的确定" class="headerlink" title="CAP理论的确定"></a>CAP理论的确定</h3><p>2002年，麻省理工学院的Lynch和Gilbert证明了Eric Brewer对CAP的猜想，并发表了论文。从此CAP理论成为了定理。</p><h3 id="对CAP理论的质疑"><a href="#对CAP理论的质疑" class="headerlink" title="对CAP理论的质疑"></a>对CAP理论的质疑</h3><p>其实初看CAP理论的人都会对此表示一头雾水，很难用一两句简洁的语言来把它描述清楚。业界对它的质疑还是比较多的，下面简单的列两个：</p><ul><li>质疑1<br>不适合用于数据库事务架构。</li><li>质疑2<br>使用不可变模型来降低CAP的复杂性，传统的CURD变为CR，例如Hadoop中HDFS的设计，以及Hbase的WAL Log设计。</li></ul><p>还有其他质疑就不列举了。</p><h3 id="作者的回应"><a href="#作者的回应" class="headerlink" title="作者的回应"></a>作者的回应</h3><p>作者的回应主要是明确、缩小CAP理论的使用场景，例如CAP理论只局限在原子读写的场景，并申明不支持数据库事务等的场景。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>个人觉得学习CAP理论，当做了解分布式中几个重要场景就可以了，例如：如何保障数据多副本同步问题；故障转移的实现等。<br>除此以外，在查看一些并发资料的时候，会经常遇到强一致性、弱一致性、最终一致性这些词，这些名词的意义，以及这几种一致性场景在不同技术中的设计思想，是需要我们去留意的。最后，相信技术但不迷信技术！</p>]]></content>
      
      
      <categories>
          
          <category> 编程思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CAP 可用性 分区容错性 强一致性 弱一致性 最终一致性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java并发(二)：volatile关键字</title>
      <link href="/2017/06/17/java-2017-06-17-Java%E5%B9%B6%E5%8F%91-%E4%BA%8C-%EF%BC%9Avolatile%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2017/06/17/java-2017-06-17-Java%E5%B9%B6%E5%8F%91-%E4%BA%8C-%EF%BC%9Avolatile%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<p>关键词：volatile、happen-before、内存屏障</p><p>在阅读Java并发编程相关的jdk源码中，有个关键字<code>volatile</code>会经常看到，在并发编程中偶尔也会用到该关键字，但是在使用它的过程中又很容易引起混淆。<br><code>volatile</code>关键字一方面通过内存屏障禁止了指令重排，从而保证了有序性；另一方面通过内存屏障实现了可见性。</p><p>阅读本文前，你需要理解原子性、可见性、有序性这三个基本的并发特性。可以查看这里：<a href="http://www.leocook.org/2017/06/12/Java%E5%B9%B6%E5%8F%91-%E5%8E%9F%E5%AD%90%E6%80%A7-%E5%8F%AF%E8%A7%81%E6%80%A7-%E6%9C%89%E5%BA%8F%E6%80%A7/" target="_blank" rel="noopener">Java并发：原子性、可见性、有序性</a></p><p>本文会先聊聊CPU从内存中读取值的硬件层面的过程，然后说一说volatile关键字是如何保证可见性、有序性的，以及相关的原理。最后还会列出几个示例来说明volatile不能解决的一些场景。</p><h3 id="CPU读取值的过程"><a href="#CPU读取值的过程" class="headerlink" title="CPU读取值的过程"></a>CPU读取值的过程</h3><p>CPU在读取数据进行计算的时候，cpu并不是直接读取内存中的值，而是先把内存中的值读到cpu的高速Cache中，然后cpu直接操作Cache中的值。cpu在完成计算后，把结果写到Cache中，然后再把Cache写回到内存中。具体的过程可以查看下图：</p><p><img src="http://leocook-blog.test.upcdn.net/volition1.png" alt="CPU读取值的过程"></p><p>如果修改某个变量的值，大概会有下面几步操作：</p><ul><li>把值从内存中读到CPU Cache中</li><li>CPU读取Cache中的值执行操作，并把修改后的值写入到CPU Cache中</li><li>数据从CPU Cache中刷到内存中</li></ul><p>所以，只有上面三个步骤在执行的过程中不被其它操作干扰时，这个修改操作才会正常完成。</p><h3 id="volatile变量具有可见性"><a href="#volatile变量具有可见性" class="headerlink" title="volatile变量具有可见性"></a>volatile变量具有可见性</h3><p>简言之，被volatile关键字修饰的变量在修改后，将会强制被刷到内存中，且该变量在其它CPU中的Cache将会失效，从而保证线程在修改变量值后，其它线程能立马读到。</p><p>下面详细说说使用与不使用volatile关键字的差异：</p><ul><li>未使用volatile关键字</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int i=0;//共享变量</span><br><span class="line"></span><br><span class="line">//线程1的操作</span><br><span class="line">i=i+1</span><br><span class="line"></span><br><span class="line">//线程2的操作</span><br><span class="line">j=i</span><br></pre></td></tr></table></figure><p>我们假设先执行的线程1，然后执行线程2，一般会想到j=1，但事实上却不一定。</p><p>在创建线程的时候，内存结构如下：</p><p><img src="http://leocook-blog.test.upcdn.net/%E5%B9%B6%E5%8F%911.png" alt></p><p>当执行一次线程1之后，cpu缓存中i变为了1，并把cache中的1刷到了内存中，内存结构如下：</p><p><img src="http://leocook-blog.test.upcdn.net/%E5%B9%B6%E5%8F%913.png" alt></p><p>由于在线程启动的时候已经把i的值读到了cpu的cache中，所以在执行<code>j=i</code>的时候，给j赋的值是0，而不是1。<br>很显然，在线程1修改了i的值之后，线程2并没有读到修改后的i值，可以理解i的读取操作不具备可见性。</p><ul><li>使用volatile关键字</li></ul><p>在Java中，我们可以使用<code>volatile</code>关键字来保证变量的可见性，<strong>被volatile修饰后的变量在被修改后，会直接把缓存刷入内存，从而保证下次读取能够读到最新的值</strong>。如下分析：</p><p>第一步：线程1直接读取内存的i值</p><p><img src="http://leocook-blog.test.upcdn.net/vvv1.png" alt></p><p>第二步：执行<code>i=i+1</code>，并把结果刷回内存，CPU2中的缓存失效，然后CPU2更新缓存，把i值赋值给j，并写回内存</p><p><img src="http://leocook-blog.test.upcdn.net/vvv2.png" alt></p><p>这样就保证了i的操作是具备可见性的了，所以线程1修改了i之后，线程2能立刻读到修改后的值。</p><h3 id="volatile变量不具有原子性"><a href="#volatile变量不具有原子性" class="headerlink" title="volatile变量不具有原子性"></a>volatile变量不具有原子性</h3><p>volatile可以理解为一个轻量级的synchronized，但是volatile变量不具备原子性。synchronized对比volatile实现的是锁，锁提供了两个重要的特性：互斥（mutual exclusion） 和可见性（visibility）。正是互斥保证了操作的原子性。</p><p>那么什么时候使用volatile，什么时候使用synchronized呢？</p><ul><li>当变量只需要具备可见性的时候使用volatile，例如：对变量的写操作不依赖于该变量当前值；</li><li>当变量需要同时具备原子性和可见性的时候，就使用synchronized。</li><li>在使用volatile和synchronized都可以的时候，优先使用volatile，因为volatile的同步机制性能要高于锁的性能。</li></ul><h3 id="volatile变量一定程度上具有有序性"><a href="#volatile变量一定程度上具有有序性" class="headerlink" title="volatile变量一定程度上具有有序性"></a>volatile变量一定程度上具有有序性</h3><p>在使用了volatile关键字之后，将会禁用指令重排，从而保证有序性。<br>当程序执行到volatile变量的读取或写操作时，将会保证该操作前面的语句都已经执行完成且结果对后边代码具有可见性；该操作后边的代码都没有执行。</p><p>我们可以查看下面这个代码块：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = 2;        //语句1</span><br><span class="line">y = 0;        //语句2</span><br><span class="line">flag = true;  //语句3</span><br><span class="line">x = 4;         //语句4</span><br><span class="line">y = -1;       //语句5</span><br></pre></td></tr></table></figure></p><ul><li><p>flag变量没有被volatile关键字修饰时<br>由于指令重排的原因，我们可以得到下面依赖关系：<br><img src="http://leocook-blog.test.upcdn.net/volition11.png" alt><br>我们可以看出：<br>语句1执行完之后才可以执行语句4；<br>语句2执行完之后才可以执行语句5；<br>其它执行的顺序不一定。</p></li><li><p>flag变量被volatile关键字修饰后<br>由于volatile禁用了指令重排，我们可以得到下面依赖关系：<br><img src="http://leocook-blog.test.upcdn.net/volition12.png" alt><br>我们可以看出：<br>语句1和语句2的顺序不一定；<br>语句1和语句2都执行完之后执行语句3；<br>语句3执行完之后才执行语句4和语句5；<br>语句4和语句5谁先执行不一定。</p></li></ul><h3 id="volatile关键字的实现原理"><a href="#volatile关键字的实现原理" class="headerlink" title="volatile关键字的实现原理"></a>volatile关键字的实现原理</h3><h4 id="happen-before"><a href="#happen-before" class="headerlink" title="happen-before"></a>happen-before</h4><p>如果A happen-before B，那么A的所有操作完成后并产生结果才会执行B操作，可以说A所做的任何操作对B都是可见的。happen-before大概有下面几种场景：</p><ul><li>1.程序次序规则：在一个单独的线程中，按照程序代码的执行流顺序，（时间上）先执行的操作happen—before（时间上）后执行的操作；</li><li>2.管理锁定规则：一个unlock操作happen—before后面（时间上的先后顺序，下同）对同一个锁的lock操作；</li><li>3.volatile变量规则：对一个volatile变量的写操作happen—before后面对该变量的读操作。</li><li>4.线程启动规则：Thread对象的start()方法happen—before此线程的每一个动作；</li><li>5.线程终止规则：线程的所有操作都happen—before对此线程的终止检测，可以通过调用Thread.join()方法、获取Thread.isAlive()的返回值等手段检测到线程已经终止执行；</li><li>6.线程中断规则：对线程interrupt()方法的调用happen—before发生于被中断线程的代码检测到中断时事件的发生；</li><li>7.对象终结规则：一个对象的初始化完成（构造函数执行结束）happen—before它的finalize（）方法的开始；</li><li>8.传递性：如果操作A happen—before操作B，操作B happen—before操作C，那么可以得出A happen—before操作C。</li></ul><p>其实我们这里主要查看的是第3条，即volatile变量保证的有序性。在代码重排中，主要分为编译器重排和指令重排，为了实现volatile变量的内存语义，JMM会限制这两类重排，下面是JMM针对volatile变量所规定的重排规则表：</p><div class="table-container"><table><thead><tr><th>1st operation</th><th>2st operation</th><th>2st operation</th><th>2st operation</th></tr></thead><tbody><tr><td></td><td>Normal Load<br>Normal Store</td><td>Volatile Load</td><td>Volatile Store</td></tr><tr><td>Normal Load</td><td></td><td></td><td>No</td></tr><tr><td>Normal Store</td><td></td><td></td><td>No</td></tr><tr><td>Volatile Load</td><td>No</td><td>No</td><td>No</td></tr><tr><td>Volatile Store</td><td></td><td>No</td><td>No</td></tr></tbody></table></div><p>观察上述表格，可以得知Volation变量的happen—before原则：</p><ul><li>所有的Volatile变量读都happen—before改变量的其它操作</li><li>Volation变量的所有操作都happen—before该变量的写操作</li><li>Volation变量的写操作happen—before该变量的读操作</li></ul><h4 id="内存屏障"><a href="#内存屏障" class="headerlink" title="内存屏障"></a>内存屏障</h4><p>内存屏障也称之为内存栅栏，是一组处理器指令，用于实现对内存操作顺序限制。</p><div class="table-container"><table><thead><tr><th>1st operation</th><th>2st operation</th><th>2st operation</th><th>2st operation</th><th>2st operation</th></tr></thead><tbody><tr><td></td><td>Normal Load</td><td>Normal Store</td><td>Volatile Load</td><td>Volatile Store</td></tr><tr><td>Normal Load</td><td></td><td></td><td></td><td>LoadStore</td></tr><tr><td>Normal Store</td><td></td><td></td><td></td><td>StoreStore</td></tr><tr><td>Volatile Load</td><td>LoadLoad</td><td>LoadStore</td><td>LoadLoad</td><td>LoadStore</td></tr><tr><td>Volatile Store</td><td></td><td></td><td>StoreLoad</td><td>StoreStore</td></tr></tbody></table></div><p>JMM中共有这4种屏障：</p><ul><li><p>LoadLoad屏障<br>执行顺序：Load1—&gt;Loadload—&gt;Load2<br>Load2以及后序的Load指令在加载数据之前，都能访问到Load1加载的数据。</p></li><li><p>LoadStore屏障<br>执行顺序： Load1—&gt;LoadStore—&gt;Store2<br>Store2以及后序的Store指令在存储数据之前，都能访问到Load1加载的数据。</p></li><li><p>StoreStore屏障<br>执行顺序：Store1—&gt;StoreStore—&gt;Store2<br>Store2以及后序的Store指令在存储数据之前，都能访问到Store1操作所存储的数据。</p></li><li><p>StoreLoad屏障<br>执行顺序: Store1—&gt; StoreLoad—&gt;Load2<br>Load2以及后序的Load指令在加载数据之前，都可以访问到Store1操作所存储的数据。</p></li></ul><h4 id="volatile关键字原理"><a href="#volatile关键字原理" class="headerlink" title="volatile关键字原理"></a>volatile关键字原理</h4><p>volatile实际上就是使用内存屏障的来实现可见性和有序性的：</p><ul><li>有序性：它会确保指令重排时，使用内存屏障保证volatile变量操作前的操作都已经完成了，且在volatile变量操作完成后，才会执行后边的代码</li><li>可见性：CPU每次在修改volatile变量值之后，它会强制把数据从缓存刷到内存中去，才算本次操作完成</li><li>可见性：volatile变量值修改后，它会导致其他CPU中的缓存失效</li></ul><h3 id="volatile的几个使用场景"><a href="#volatile的几个使用场景" class="headerlink" title="volatile的几个使用场景"></a>volatile的几个使用场景</h3><ul><li>状态标记量  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//使用volatile来保证标记变量的可见性</span><br><span class="line">volatile boolean flag = false;</span><br><span class="line"> </span><br><span class="line">while(!flag)&#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public void setFlag() &#123;</span><br><span class="line">    flag = true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//使用volatile来保证标有序性</span><br><span class="line">volatile boolean inited = false;</span><br><span class="line">//线程1:</span><br><span class="line">context = loadContext();  </span><br><span class="line">inited = true;            </span><br><span class="line"> </span><br><span class="line">//线程2:</span><br><span class="line">while(!inited )&#123;</span><br><span class="line">sleep()</span><br><span class="line">&#125;</span><br><span class="line">doSomethingwithconfig(context);</span><br></pre></td></tr></table></figure><ul><li>双重检查锁  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//除了饿汉模式，这种写法创建单例效率最高</span><br><span class="line">class Singleton&#123;</span><br><span class="line">    private volatile static Singleton instance = null;</span><br><span class="line">     </span><br><span class="line">    private Singleton() &#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    public static Singleton getInstance() &#123;</span><br><span class="line">        if(instance==null) &#123;</span><br><span class="line">            synchronized (Singleton.class) &#123;</span><br><span class="line">                if(instance==null)</span><br><span class="line">                    //一定会把数据刷到内存中</span><br><span class="line">                    instance = new Singleton();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="volatile关键字陷阱"><a href="#volatile关键字陷阱" class="headerlink" title="volatile关键字陷阱"></a>volatile关键字陷阱</h3><p>Java是一门支持多线程的语言，为了解决线程的并发问题，使用了<code>同步块</code>和<code>volatile关键字</code>机制。<br>synchronized关键字是同时具备原子性、可见性和有序性；而volatile关键字只具备可见性和有序性，并不具备原子性，问题就出在这里，下面我们举例代码来看看。</p><ul><li>代码一  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">public class Counter &#123;</span><br><span class="line"></span><br><span class="line">    public static Integer count = 0;</span><br><span class="line">    static CountDownLatch countDownLatch = null;</span><br><span class="line"></span><br><span class="line">    public static void inc() &#123;</span><br><span class="line"></span><br><span class="line">        //这里延迟1毫秒，使得结果明显</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(1);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        count++;</span><br><span class="line">        countDownLatch.countDown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        int threadCount = 1000;</span><br><span class="line"></span><br><span class="line">        countDownLatch = new CountDownLatch(threadCount);</span><br><span class="line">        //同时启动1000个线程，去进行i++计算，看看实际结果</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; threadCount; i++) &#123;</span><br><span class="line">            Thread t = new Thread(new Runnable() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void run() &#123;</span><br><span class="line">                    Counter.inc();</span><br><span class="line">                &#125;&#125;);</span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        countDownLatch.await();</span><br><span class="line"></span><br><span class="line">        //这里每次运行的值都有可能不同,可能为1000</span><br><span class="line">        System.out.println(&quot;运行结果:Counter.count=&quot; + Counter.count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>我这边计算的结果是978，每次运行的结果应该都是不一样的。这段代码应该很好理解，上面代码是很常见的线程不安全实例。</p><ul><li>代码二<br>在上面代码的基础上，使用volatile来修饰count：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public volatile static int count = 0;</span><br></pre></td></tr></table></figure></li></ul><p>当执行完之后，我们发现结果仍然不是1000，原因是volatile无法保证变量的操作是原子的，只能保证变量的操作是具备可见性的。</p><ul><li>代码三<br>在代码一的基础上，修改了inc方法,给<code>count++;</code>添加同步代码：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public synchronized static void inc() &#123;</span><br><span class="line"></span><br><span class="line">    //这里延迟1毫秒，使得结果明显</span><br><span class="line">    try &#123;</span><br><span class="line">        Thread.sleep(1);</span><br><span class="line">    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    count++;</span><br><span class="line">    </span><br><span class="line">    countDownLatch.countDown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>查看上面的代码，我们可以发现volatile关键字是不具备原子性的。我们再使用的时候，需要避免这个坑。</p><p>当我们需要使用具备原子操作的基础类型时，我们除了使用同步代码块，还可以使用<code>java.util.concurrent.atomic</code>包下的原子类型,例如代码一可以这样修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">public class Counter &#123;</span><br><span class="line"></span><br><span class="line">    public static AtomicInteger count = new AtomicInteger(0);</span><br><span class="line">    static CountDownLatch countDownLatch = null;</span><br><span class="line"></span><br><span class="line">    public static void inc() &#123;</span><br><span class="line"></span><br><span class="line">        //这里延迟1毫秒，使得结果明显</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(1);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        count.incrementAndGet();</span><br><span class="line">        countDownLatch.countDown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        int threadCount = 1000;</span><br><span class="line"></span><br><span class="line">        countDownLatch = new CountDownLatch(threadCount);</span><br><span class="line">        //同时启动1000个线程，去进行i++计算，看看实际结果</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; threadCount; i++) &#123;</span><br><span class="line">            Thread t = new Thread(new Runnable() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void run() &#123;</span><br><span class="line">                    Counter.inc();</span><br><span class="line">                &#125;&#125;);</span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        countDownLatch.await();</span><br><span class="line"></span><br><span class="line">        //这里每次运行的值都有可能不同,可能为1000</span><br><span class="line">        System.out.println(&quot;运行结果:Counter.count=&quot; + Counter.count.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>总结</li></ul><p>一句话总结下，volatile关键字通过内存屏障来保证了变量的可见性和有序性。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> volatile happen-before 内存屏障 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java并发(一)：原子性、可见性、有序性</title>
      <link href="/2017/06/12/java-2017-06-12-Java%E5%B9%B6%E5%8F%91-%E4%B8%80-%EF%BC%9A%E5%8E%9F%E5%AD%90%E6%80%A7%E3%80%81%E5%8F%AF%E8%A7%81%E6%80%A7%E3%80%81%E6%9C%89%E5%BA%8F%E6%80%A7/"/>
      <url>/2017/06/12/java-2017-06-12-Java%E5%B9%B6%E5%8F%91-%E4%B8%80-%EF%BC%9A%E5%8E%9F%E5%AD%90%E6%80%A7%E3%80%81%E5%8F%AF%E8%A7%81%E6%80%A7%E3%80%81%E6%9C%89%E5%BA%8F%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p>关键词：原子性、可见性、有序性、volatile、happen-before</p><p>并发编程中，有三个特性需要我们时刻关注的：原子性、可见性、有序性，本文主要是对这三个特性做解释，其中涉及到的volatile关键字，如果不是很理解的可以查看这里：<a href="http://www.leocook.org/2017/06/17/Java%E5%B9%B6%E5%8F%91-volatile%E5%85%B3%E9%94%AE%E5%AD%97/" target="_blank" rel="noopener">Java并发：volatile关键字</a></p><h3 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h3><p>如果某个操作是原子的，那么该操作要么不执行，若执行的话就一定会成功。可以理解该操作在执行期间不会被其它因素中断，若是被一些不可控的元素破坏，该操作也不会产生副作用。</p><p>银行转账的操作就具备原子性，例如A向B转账1000元，其中包括了2个动作：A账户减去1000元，B账户加上1000元。很好理解，这个转账操作要么不执行，若执行必须保证这两个动作都成功才行。</p><p>编程时，假设Int类型是4字节(32位)，我们把一个Int类型的内存结构用下图展示：<br><img src="http://leocook-blog.test.upcdn.net/%E5%8E%9F%E5%AD%90%E6%80%A7.png" alt="原子性"><br>当执行赋值语句<code>a = 128</code>的时候，如果能保证要么不执行，要执行的话<code>1~8B</code>、<code>9~16B</code>、<code>17~24B</code>、<code>26~32B</code>这四个字节都成功写入，且不会被其它线程操作干扰，那么这个赋值操作就具备原子性。</p><p>在Java中，<code>基础数据类型</code>的变量的<code>赋值</code>和<code>读取</code>是原子性的操作。例如下面代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = 10; //原子的</span><br><span class="line">y = x; //非原子的</span><br><span class="line">x++; //非原子的</span><br><span class="line">x = x + 1; //非原子的</span><br></pre></td></tr></table></figure><h3 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h3><p>可见性就是指当多个线程访问同一个变量时，若某个线程修改了变量的值，其他线程能够立即看得到修改的值。</p><p>例如下面的代码块：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">i=0;//共享变量</span><br><span class="line"></span><br><span class="line">//线程1的操作</span><br><span class="line">i=i+1</span><br><span class="line"></span><br><span class="line">//线程2的操作</span><br><span class="line">j=i</span><br></pre></td></tr></table></figure></p><p>我们假设先执行的线程1，然后执行线程2，且<code>线程1和线程2不同时执行</code>一般会想到j=1，但事实上却不一定。</p><ul><li><p>在创建线程的时候，内存结构如下：<br><img src="http://leocook-blog.test.upcdn.net/%E5%B9%B6%E5%8F%911.png" alt></p></li><li><p>当执行一次线程1之后，cpu缓存中i变为了1，并把cache中的1刷到了内存中，内存结构如下：<br><img src="http://leocook-blog.test.upcdn.net/%E5%B9%B6%E5%8F%913.png" alt><br>由于在线程启动的时候已经把i的值读到了cpu的cache中，所以在执行<code>j=i</code>的时候，给j赋的值是0，而不是1。</p></li></ul><p>所以上述的并发设计是不具备可见性的，因为在线程1修改了i的时候，线程2并没有立刻就能读到。面对这个问题，在Java中，我们可以使用<code>volatile</code>关键字声明变量不使用CPU缓存，这样就能保证了并发的可见性。如下分析：</p><p>第一步：线程1直接读取内存的i值</p><p><img src="http://leocook-blog.test.upcdn.net/vvv1.png" alt></p><p>第二步：执行<code>i=i+1</code>，并把结果刷回内存，CPU2中的缓存失效，然后CPU2更新缓存，把i值赋值给j，并写回内存</p><p><img src="http://leocook-blog.test.upcdn.net/vvv2.png" alt></p><p>这样就保证了i的操作是具备可见性的了，所以线程1修改了i之后，线程2能立刻读到修改后的值。</p><p>由于线程1修改了变量i的值之后，会立马把值刷到内存中，并使其它CPU中i的缓存失效，这样就能保证变量值修改后，其它线程能立刻读到最新的值。</p><h3 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h3><p>有序性指的是程序执行时按照代码的先后顺序执行。</p><h4 id="happen-before"><a href="#happen-before" class="headerlink" title="happen-before"></a>happen-before</h4><p>如果A happen-before B，那么A的所有操作完成后并产生结果才会执行B操作，可以说A所做的任何操作对B都是可见的。</p><ul><li>1.程序次序规则：在一个单独的线程中，按照程序代码的执行流顺序，（时间上）先执行的操作happen—before（时间上）后执行的操作；</li><li>2.管理锁定规则：一个unlock操作happen—before后面（时间上的先后顺序，下同）对同一个锁的lock操作；</li><li>3.volatile变量规则：对一个volatile变量的写操作happen—before后面对该变量的读操作。</li><li>4.线程启动规则：Thread对象的start（）方法happen—before此线程的每一个动作；</li><li>5.线程终止规则：线程的所有操作都happen—before对此线程的终止检测，可以通过Thread.join（）方法结束、Thread.isAlive（）的返回值等手段检测到线程已经终止执行；</li><li>6.线程中断规则：对线程interrupt（）方法的调用happen—before发生于被中断线程的代码检测到中断时事件的发生；</li><li>7.对象终结规则：一个对象的初始化完成（构造函数执行结束）happen—before它的finalize（）方法的开始；</li><li>8.传递性：如果操作A happen—before操作B，操作B happen—before操作C，那么可以得出A happen—before操作C。</li></ul><h4 id="指令重排"><a href="#指令重排" class="headerlink" title="指令重排"></a>指令重排</h4><p>在Java中，为了提高执行效率、CPU的利用率，在执行字节码文件的时候会发生<code>指令重排</code>操作。我们观察下面这段代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int a = 1; //语句1</span><br><span class="line">int b = 2; //语句2</span><br><span class="line">a += 1; //语句3</span><br><span class="line">b += 1; //语句4</span><br></pre></td></tr></table></figure></p><p>假设每行代码执行需要耗时1ms(实际上执行实际会比1ms短很多很多)，那么这四条语句会执行4ms时间，他们的执行顺序是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第1步：int a = 1; </span><br><span class="line">第2步：int b = 2; </span><br><span class="line">第3步：a += 1; </span><br><span class="line">第4步：b += 1;</span><br></pre></td></tr></table></figure></p><p>我们可以观察出这四行语句有如下的依赖关系：<code>语句3依赖语句1</code>、<code>语句4依赖语句2</code>。</p><p>其实在Java中，JVM在执行时会发生指令重排，<strong>语句1和语句2</strong>谁先执行是说不定的，<strong>语句3和语句4</strong>谁先执行也是说不定的。但一定是<strong>语句1</strong>执行完之后才执行<strong>语句3</strong>，<strong>语句2</strong>执行完之后才执行<strong>语句4</strong>，这样就可以把语句1和语句3放在一个cpu中，语句2和语句4放在一个cpu，两个cpu并行执行。这样的话，执行的顺序可能就是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第1步：int a = 1; a += 1; </span><br><span class="line">第2步：int b = 2; b += 1;</span><br></pre></td></tr></table></figure></p><p>这样操作完只需要花费2ms，相比于之前的4ms，时间节省了一倍！</p><p>虽然有序性在一定程度上提高了效率，但是在实际开发中也会带来一些灾难，例如下面的这段代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//线程1:</span><br><span class="line">context = loadContext();   //语句1</span><br><span class="line">inited = true;             //语句2</span><br><span class="line"> </span><br><span class="line">//线程2:</span><br><span class="line">while(!inited )&#123;</span><br><span class="line">  sleep()</span><br><span class="line">&#125;</span><br><span class="line">doSomethingwithconfig(context);</span><br></pre></td></tr></table></figure><p>由于语句2可能会在语句1之前运行，所以可能会在context还没有被初始化的时候，就开始执行doSomethingwithconfig(context)了。<br>在Java中可以使用volatile关键字来对inited进行修饰，从而保证语句1 happen-before 语句2。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>原子性保证了某（多）个操作在执行的时候不会被打断；<br>可见性保证了某个值被修改后在其它线程中可以立马看到，不会读到久值；<br>有序性保证了某些操作happen-before另外一些操作。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原子性 可见性 有序性 volatile happen-before </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JCF（Java集合框架）概括</title>
      <link href="/2017/06/05/java-2017-06-05-JCF%EF%BC%88Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%89%E6%A6%82%E6%8B%AC/"/>
      <url>/2017/06/05/java-2017-06-05-JCF%EF%BC%88Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%89%E6%A6%82%E6%8B%AC/</url>
      
        <content type="html"><![CDATA[<p>在Java中，集合也就是可以装载多个<strong>Java对象</strong>的某种对象，所以Java的集合只能装载对象，在装载基础数据类型的时候，事实上装载的是基础类型锁对应的包装类。</p><p>在学习JCF之前，我们先回顾一下，在计算机编程中我们期望<strong>集合能有哪些能力？</strong></p><ul><li>可以遍历集合全部的元素</li><li>关于集合类部元素的顺序<ul><li>保留写入集合的顺序</li><li>可根据元素的大小自动排序</li></ul></li><li>能快速查找出集合中的某个元素</li><li>可以根据位置来快速的修改元素</li><li>能高效的增加、删除集合中元素</li><li>集合内的元素可以快速去重</li></ul><p>聊到集合，那肯定少不了下面几种基础的数据结构：</p><ul><li>线性存储<ul><li>（可变）数组</li><li>链表</li></ul></li><li>Hash散列表</li><li>平衡树</li></ul><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><p>在Java2.0之前，只有一些简单的集合，例如Vector/Stack/Hashtable，由于这些集合直接使用synchronized关键字来实现线程安全，使得这些集合在使用的时候效率极低。从Java2.0开始之后，Java提供了一系列的Java Collections Framework（JCF）。</p><p><img src="http://leocook-blog.test.upcdn.net/JCF.gif" alt="JCF"></p><p>下面开始讲讲Java的集合框架（后面简称JCF）。JCF主要包括了两种类型的集合：<strong>Collection</strong>和<strong>Map</strong>。<br>Collection集合中的每个节点存放的是一个元素。Map集合中的每个元素存放的是<key,value>型的键值对。</key,value></p><h2 id="2-Iterator接口"><a href="#2-Iterator接口" class="headerlink" title="2.Iterator接口"></a>2.Iterator接口</h2><p>这是迭代器接口，不同集合的Iterator实现会不一样。例如ArrayList的Iterator实现是内部类Itr。<br>集合实现了Iterator之后，就可以使用迭代器顺序遍历了。<br>Iterator接口的定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Object next()：返回迭代器刚越过的元素的引用，返回值是Object，需要强制转换成自己需要的类型</span><br><span class="line"></span><br><span class="line">boolean hasNext()：判断容器内是否还有可供访问的元素</span><br><span class="line"></span><br><span class="line">void remove()：删除迭代器刚越过的元素</span><br></pre></td></tr></table></figure><p>查看源码的话，会看到下面这一段代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">* @see Collection</span><br><span class="line">* @see ListIterator</span><br><span class="line">* @see Iterable</span><br><span class="line">public interface Iterator&lt;E&gt; &#123;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><ul><li>Iterable</li></ul><p>所有实现了Iterable接口的集合，都可以使用增强的for循环，因为这个集合将会实现一个自己的Iterator。</p><ul><li>ListIterator</li></ul><p>ListIterator是针对List实现的迭代器。由于List是顺序存储结构，所以除了next()、hasNext()、remove()方法，ListIterator还提供了List下标处理的相关方法，例如获取上/下一个元素以及它们的下标情况。</p><h2 id="3-Collection"><a href="#3-Collection" class="headerlink" title="3.Collection"></a>3.Collection</h2><p>Collection是Java集合层次结构中的根节点，实现Collection的集合中，有的是允许存放重复的元素，有的不允许有重复的元素（set），有的集合是有序的，有的则是无序的。Collection下面有三种子接口，分别是List、Set、Queue，下面逐一介绍。</p><h3 id="3-1-List"><a href="#3-1-List" class="headerlink" title="3.1.List"></a>3.1.List</h3><p>实现List接口的集合有着两大特性：允许元素重复、元素是有序的。实现了List接口的集合，可以通过位置来操作集合的元素。下图展示了List接口中的全部方法：</p><p><img src="http://leocook-blog.test.upcdn.net/list.png" alt="List"></p><p>下面是几个常用的List类型集合。</p><ul><li>ArrayList</li></ul><p>基于数组实现的线性存储集合。数组的大小可以变化，当元素个数超过了数组的大小，将会重新创建一个更大长度的数组，并把当前数组中的内容复制进去，每次长度增长为原来的1.5倍左右，可以查看源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">private void grow(int minCapacity) &#123;</span><br><span class="line">    // overflow-conscious code</span><br><span class="line">    int oldCapacity = elementData.length;</span><br><span class="line">    int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);</span><br><span class="line">    if (newCapacity - minCapacity &lt; 0)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    if (newCapacity - MAX_ARRAY_SIZE &gt; 0)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    // minCapacity is usually close to size, so this is a win:</span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>LinkedList</li></ul><p>基于链表实现的线性存储集合。下面对比ArrayList和LinkedList：</p><div class="table-container"><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:left">ArrayList</th><th style="text-align:left">LinkedList</th></tr></thead><tbody><tr><td style="text-align:center">内部数据结构</td><td style="text-align:left">数组</td><td style="text-align:left">链表</td></tr><tr><td style="text-align:center">是否顺序结构</td><td style="text-align:left">是</td><td style="text-align:left">是</td></tr><tr><td style="text-align:center">位置检索</td><td style="text-align:left">快</td><td style="text-align:left">慢</td></tr><tr><td style="text-align:center">增、删</td><td style="text-align:left">慢</td><td style="text-align:left">快</td></tr></tbody></table></div><h3 id="3-2-Set"><a href="#3-2-Set" class="headerlink" title="3.2.Set"></a>3.2.Set</h3><p>实现Set接口的集合内部元素不重复，Set有三个具体的实现类：HashSet（散列集）、LinkedHashSet（顺序集）、TreeSet（平衡树）。</p><ul><li>HashSet</li></ul><p>基于hash的无序set。其实HashSet内部是用HashMap实现的，HashMap后边会说到。在散列集中，有两个名词需要关注，初始容量和客座率。客座率是确定在增加规则集之前，该规则集的饱满程度，当元素个数超过了容量与客座率的乘积时，容量就会自动翻倍。</p><ul><li>LinkedHashSet</li></ul><p>基于链表实现的HashSet，LinkedHashSet中的元素是有序的，且顺序和写入的顺序一致。</p><ul><li>TreeSet</li></ul><p>TreeSet是一个有序的Set，排序的比较器可以通过传入Comparator来自定义。</p><h3 id="3-3-Queue"><a href="#3-3-Queue" class="headerlink" title="3.3.Queue"></a>3.3.Queue</h3><p>队列是一种FIFO（First in first out）数据结构，元素在Queue的末尾添加，在头部删除。<br><img src="http://leocook-blog.test.upcdn.net/Queue.png" alt="Queue"><br>Queue接口分别定义了上面6个方法，分别有插入、移除和检查的功能，有的方法在某些特殊情况下回报错，有的则不会，具体见下表：</p><div class="table-container"><table><thead><tr><th style="text-align:center">Operation</th><th style="text-align:left">抛出异常</th><th style="text-align:left">返回特殊值</th><th style="text-align:left">操作失败的条件</th></tr></thead><tbody><tr><td style="text-align:center">Insert（插入）</td><td style="text-align:left">add(e)</td><td style="text-align:left">offer(e),return false</td><td style="text-align:left">当队列空间有限制，且没有多余的空间时</td></tr><tr><td style="text-align:center">Remove（移除）</td><td style="text-align:left">remove()</td><td style="text-align:left">poll(),return null</td><td style="text-align:left">队列为空</td></tr><tr><td style="text-align:center">Examine（检查）</td><td style="text-align:left">element()</td><td style="text-align:left">peek(),return null</td><td style="text-align:left">队列为空</td></tr></tbody></table></div><p>Queue平时用的不是很多，优先队列PriorityQueue有的时候会用到。</p><h2 id="4-Map"><a href="#4-Map" class="headerlink" title="4.Map"></a>4.Map</h2><p>Map是存储键值对映射（key,value）的容器类，可以存储任意类型的对象。但是key不能重复，且一个key只能对应一个值。如果使用对象作为key,那么必须要考虑一下该对象类的hashCode方法和equals方法是否需要重写，因为map是用着两个方法来判断key是否相等的，其中hashCode是用来加速判断的，如果hashCode相等，还会用equals方法来判断。</p><p>常用到的Map接口实现类，有三个：HashMap、LinkedHashMap、TreeMap。Map接口定义的方法列表可见下图：<br><img src="http://leocook-blog.test.upcdn.net/map.png" alt="Map"></p><h3 id="4-1-HashMap"><a href="#4-1-HashMap" class="headerlink" title="4.1.HashMap"></a>4.1.HashMap</h3><p>HashMap是基于数组+链表实现的Hash散列Map结构，数组里存放着索引，链表里存放的是元素数据。(key,value)键值对中，key的hash值就是数组的下标。</p><p>在Jdk1.8中，对HashMap做了优化，当链表的长度超过8时，链表结构将会变为了平衡树，这样做主要是为了在HashMap里的元素较多时，能够加快查找的速度。</p><p><img src="http://leocook-blog.test.upcdn.net/map%20struct.png" alt="map结构"></p><p>关于HashMap，其实有很多可以细聊的，它与很多集合都有着关系。后边会再来一篇，详细说一下Java中HashMap的设计，以及Java中散列存储的设计思想。</p><h3 id="4-2-LinkedHashMap"><a href="#4-2-LinkedHashMap" class="headerlink" title="4.2.LinkedHashMap"></a>4.2.LinkedHashMap</h3><p>LinkedHashMap类继承了HashMap类，HashMap中的元素是没有顺序的，但是LinkedHashMap中的元素是有顺序的。<br>LinkedHashMap里的元素顺序有两种排序方式：第一种是根据元素key被插入的顺序;第二种是根据元素被访问的顺序来排序（最近最少被访问的元素优先）。</p><h3 id="4-3-TreeMap"><a href="#4-3-TreeMap" class="headerlink" title="4.3.TreeMap"></a>4.3.TreeMap</h3><p>TreeMap是基于红黑树结构来实现的，可以使用Comparable或Comparator接口来实现排序的比较算法。</p><blockquote><p>在日常开发中，如果不用考虑键值对元素的顺序，就使用HashMap；如果需要考虑元素插入顺序，就使用LinkedHashMap；如果需要根据Key自定义排序规则，那么就使用TreeMap。</p></blockquote><h2 id="5-其它集合"><a href="#5-其它集合" class="headerlink" title="5.其它集合"></a>5.其它集合</h2><p>下面简单说几个不是很常用的集合。</p><h3 id="5-1-Vector"><a href="#5-1-Vector" class="headerlink" title="5.1.Vector"></a>5.1.Vector</h3><p>Vector的使用和ArrayList的使用基本一样，它是线程安全的线程安全，但是Vector的线程安全是使用关键字synchronized修饰实现的，所以Vector的效率很低。相对来说，ArrayList更加高效！</p><h3 id="5-2-Stack"><a href="#5-2-Stack" class="headerlink" title="5.2.Stack"></a>5.2.Stack</h3><p>Stack是Java2之前设计的栈结构，内部是使用数组实现的。我们知道栈结构的操作中会频繁的出现入栈和出栈，那么使用数组结构的话，在栈结构变长时，自然会带来性能上的折扣。<br>LinkedList也具备栈的功能，而且是基于链表实现的，所以在开发需要用到栈结构时，推荐使用LinkedList。</p><h3 id="5-3-HashTable"><a href="#5-3-HashTable" class="headerlink" title="5.3.HashTable"></a>5.3.HashTable</h3><p>HashTable的功能和HashMap相似，它是Dictionary类的，并且使用了synchronized关键字实现了线程安全，所以性能会很差！<br>除此之外，HashTable的Key不能为空指针null,但是HashMap的key可以为null。</p><p>关于集合的线程安全，后边会另写一篇详细说明。</p><p>参考地址：<br><a href="http://www.open-open.com/lib/view/open1474167415464.html" target="_blank" rel="noopener">http://www.open-open.com/lib/view/open1474167415464.html</a><br><a href="http://www.cnblogs.com/CarpenterLee/p/5414253.html" target="_blank" rel="noopener">http://www.cnblogs.com/CarpenterLee/p/5414253.html</a></p><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h2><ul><li>JCF接口架构</li></ul><p><img src="http://leocook-blog.test.upcdn.net/JCF.gif" alt="JCF接口架构"></p><ul><li>常用的集合分类情况</li></ul><p><img src="http://leocook-blog.test.upcdn.net/jcf%E4%BD%BF%E7%94%A8.png" alt="常用的集合分类情况"></p><ul><li>接口功能实现</li></ul><p>下面表格描述的比较好，每个接口对应不同数据结构的实现。</p><p><img src="http://leocook-blog.test.upcdn.net/jcf%20imp.png" alt="JCF 接口实现"></p><p>参考文档：<br><a href="http://docs.oracle.com/javase/6/docs/technotes/guides/collections/overview.html" target="_blank" rel="noopener">http://docs.oracle.com/javase/6/docs/technotes/guides/collections/overview.html</a><br><a href="http://www.jianshu.com/p/63e76826e852" target="_blank" rel="noopener">http://www.jianshu.com/p/63e76826e852</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SciPy生态系统初探</title>
      <link href="/2017/05/10/python-2017-05-10-SciPy%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F%E5%88%9D%E6%8E%A2/"/>
      <url>/2017/05/10/python-2017-05-10-SciPy%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F%E5%88%9D%E6%8E%A2/</url>
      
        <content type="html"><![CDATA[<p>SciPy是一个基于Python的开源生态系统，也称为<code>SciPy技术栈</code>，主要为数学计算、科学研究以及工程计算提供服务。</p><p>Anaconda则是SciPy技术栈的发行版，它解决了SciPy技术栈各个组件之间的兼容、以及管理工作。<br><img src="http://leocook-blog.test.upcdn.net/SciPy%20stack.png" alt="SciPy stack" title="SciPy stack"></p><p>下面是SciPy生态圈中一些常用的包：</p><ul><li>NumPy</li></ul><p>NumPy是Python科学计算中的一个比较基础的包，它主要有下面几项功能：</p><p>a.强大的矩阵计算能力</p><p>b.用于整合C/C++和Fortran代码的工具包</p><p>c.比较成熟的（广播）函数库</p><p>d.支持线性代数求解、傅里叶变换，以及随机数处理</p><ul><li>SciPy library</li></ul><p>SciPy是组成SciPy技术栈的核心包之一，它的相关API使用起来都比较友好，且执行效率高。</p><ul><li>Matplotlib</li></ul><p>Matplotlib是一个基于Python的2D绘图库，能绘制出出版社级别的高质量图。</p><ul><li>IPython</li></ul><p>一个功能强大的Python命令行，也是Jupyter的内核。<br>关于Jupyter，被人们广为熟知的有Jupyter Notebook，之前的名字叫IPython Notebook，是一个交互式笔记本，可以运行几十种语言。在Jupyter Notebook中，代码可以实时的生成图像、视频等。</p><ul><li>Sympy</li></ul><p>基于Python的符号计算包。</p><ul><li>pandas</li></ul><p>pandas提供一些高效、易用的数据结构，以及数据分析工具。</p><h2 id="1-SciPy技术栈的安装"><a href="#1-SciPy技术栈的安装" class="headerlink" title="1.SciPy技术栈的安装"></a>1.SciPy技术栈的安装</h2><p>直接使用pip安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --user numpy scipy matplotlib ipython jupyter pandas sympy nose</span><br></pre></td></tr></table></figure></p><h2 id="2-NumPy-amp-scipy测试"><a href="#2-NumPy-amp-scipy测试" class="headerlink" title="2.NumPy&amp;scipy测试"></a>2.NumPy&amp;scipy测试</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import numpy as np</span><br><span class="line">&gt;&gt;&gt; a = np.arange(15).reshape(3, 5)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">array([[ 0,  1,  2,  3,  4],</span><br><span class="line">       [ 5,  6,  7,  8,  9],</span><br><span class="line">       [10, 11, 12, 13, 14]])</span><br><span class="line">&gt;&gt;&gt; a.shape</span><br><span class="line">(3, 5)</span><br><span class="line">&gt;&gt;&gt; a.ndim</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; a.dtype.name</span><br><span class="line">&apos;int64&apos;</span><br><span class="line">&gt;&gt;&gt; a.itemsize</span><br><span class="line">8</span><br><span class="line">&gt;&gt;&gt; a.size</span><br><span class="line">15</span><br><span class="line">&gt;&gt;&gt; type(a)</span><br><span class="line">&lt;type &apos;numpy.ndarray&apos;&gt;</span><br><span class="line">&gt;&gt;&gt; b = np.array([6, 7, 8])</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">array([6, 7, 8])</span><br><span class="line">&gt;&gt;&gt; type(b)</span><br><span class="line">&lt;type &apos;numpy.ndarray&apos;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ python</span><br><span class="line">&gt;&gt;&gt; import numpy as np</span><br><span class="line">&gt;&gt;&gt; np.test(&apos;full&apos;)</span><br><span class="line">&gt;&gt;&gt; import scipy</span><br><span class="line">&gt;&gt;&gt; scipy.test()</span><br></pre></td></tr></table></figure><h2 id="2-Matplotlib测试"><a href="#2-Matplotlib测试" class="headerlink" title="2.Matplotlib测试"></a>2.Matplotlib测试</h2><p>关于matplotlib的例子，在<a href="http://matplotlib.org/examples/index.html这里有很多，下面随机选了两个运行一下作为例子让大家看下。" target="_blank" rel="noopener">http://matplotlib.org/examples/index.html这里有很多，下面随机选了两个运行一下作为例子让大家看下。</a></p><ul><li>animate_decay</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python animate_decay.py</span><br></pre></td></tr></table></figure><p><img src="http://leocook-blog.test.upcdn.net/animate_decay.gif" alt="animate_decay" title="animate_decay"></p><ul><li>dynamic_image</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python dynamic_image.py</span><br></pre></td></tr></table></figure><p><img src="http://leocook-blog.test.upcdn.net/dynamic_image.gif" alt="dynamic_image" title="dynamic_image"></p><h2 id="3-IPython"><a href="#3-IPython" class="headerlink" title="3.IPython"></a>3.IPython</h2><p>直接使用命令ipython进入</p><h2 id="4-关于SciPy技术栈的发行版"><a href="#4-关于SciPy技术栈的发行版" class="headerlink" title="4.关于SciPy技术栈的发行版"></a>4.关于SciPy技术栈的发行版</h2><p>我们知道SciPy技术栈内有很多技术组件，那么不同的组件配合使用时，肯定会有兼容的问题。我们期望能有个工具，它可以帮助我们管理SciPy技术栈的各个组件，保证他们的兼容性，同事也方便我们安装管理。它就是<code>Anaconda</code>。</p><p>可以在这里选择自己的操作系统环境<code><a href="https://www.continuum.io/downloads" target="_blank" rel="noopener">https://www.continuum.io/downloads</a></code>.<br>笔者使用的是macOS，在安装了Anaconda之后，系统的Python环境都变为了Anaconda安装的python了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">leocookMacBook-Pro:~ leocook$ which python</span><br><span class="line">/Users/wulin/anaconda/bin/python</span><br><span class="line">leocookMacBook-Pro:~ leocook$ whereis python</span><br><span class="line">/usr/bin/python</span><br><span class="line">leocookMacBook-Pro:~ leocook$ python</span><br><span class="line">Python 2.7.13 |Anaconda 4.3.1 (x86_64)| (default, Dec 20 2016, 23:05:08)</span><br><span class="line">[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.57)] on darwin</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">Anaconda is brought to you by Continuum Analytics.</span><br><span class="line">Please check out: http://continuum.io/thanks and https://anaconda.org</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>可以使用Anaconda命令查看我们安装了SciPy技术栈中的哪些组件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line">leocookMacBook-Pro:~ leocook$ conda list</span><br><span class="line"># packages in environment at /Users/leocook/anaconda:</span><br><span class="line">#</span><br><span class="line">_license                  1.1                      py27_1</span><br><span class="line">alabaster                 0.7.9                    py27_0</span><br><span class="line">anaconda                  4.3.1               np111py27_0</span><br><span class="line">anaconda-client           1.6.0                    py27_0</span><br><span class="line">anaconda-navigator        1.5.0                    py27_0</span><br><span class="line">anaconda-project          0.4.1                    py27_0</span><br><span class="line">appdirs                   1.4.3                     &lt;pip&gt;</span><br><span class="line">appnope                   0.1.0                    py27_0</span><br><span class="line">appscript                 1.0.1                    py27_0</span><br><span class="line">argcomplete               1.0.0                    py27_1</span><br><span class="line">astroid                   1.4.9                    py27_0</span><br><span class="line">astropy                   1.3                 np111py27_0</span><br><span class="line">babel                     2.3.4                    py27_0</span><br><span class="line">backports                 1.0                      py27_0</span><br><span class="line">backports_abc             0.5                      py27_0</span><br><span class="line">beautifulsoup4            4.5.3                    py27_0</span><br><span class="line">bitarray                  0.8.1                    py27_0</span><br><span class="line">blaze                     0.10.1                   py27_0</span><br><span class="line">bokeh                     0.12.4                   py27_0</span><br><span class="line">boto                      2.45.0                   py27_0</span><br><span class="line">bottleneck                1.2.0               np111py27_0</span><br><span class="line">cdecimal                  2.3                      py27_2</span><br><span class="line">cffi                      1.9.1                    py27_0</span><br><span class="line">chardet                   2.3.0                    py27_0</span><br><span class="line">chest                     0.2.3                    py27_0</span><br><span class="line">click                     6.7                      py27_0</span><br><span class="line">cloudpickle               0.2.2                    py27_0</span><br><span class="line">clyent                    1.2.2                    py27_0</span><br><span class="line">colorama                  0.3.7                    py27_0</span><br><span class="line">conda                     4.3.17                   py27_0</span><br><span class="line">conda-env                 2.6.0                         0</span><br><span class="line">configobj                 5.0.6                    py27_0</span><br><span class="line">configparser              3.5.0                    py27_0</span><br><span class="line">contextlib2               0.5.4                    py27_0</span><br><span class="line">cryptography              1.7.1                    py27_0</span><br><span class="line">curl                      7.52.1                        0</span><br><span class="line">cycler                    0.10.0                   py27_0</span><br><span class="line">cython                    0.25.2                   py27_0</span><br><span class="line">cytoolz                   0.8.2                    py27_0</span><br><span class="line">dask                      0.13.0                   py27_0</span><br><span class="line">datashape                 0.5.4                    py27_0</span><br><span class="line">decorator                 4.0.11                   py27_0</span><br><span class="line">dill                      0.2.5                    py27_0</span><br><span class="line">docutils                  0.13.1                   py27_0</span><br><span class="line">entrypoints               0.2.2                    py27_0</span><br><span class="line">enum34                    1.1.6                    py27_0</span><br><span class="line">et_xmlfile                1.0.1                    py27_0</span><br><span class="line">fastcache                 1.0.2                    py27_1</span><br><span class="line">flask                     0.12                     py27_0</span><br><span class="line">flask-cors                3.0.2                    py27_0</span><br><span class="line">freetype                  2.5.5                         2</span><br><span class="line">funcsigs                  1.0.2                     &lt;pip&gt;</span><br><span class="line">funcsigs                  1.0.2                    py27_0</span><br><span class="line">functools32               3.2.3.2                  py27_0</span><br><span class="line">futures                   3.0.5                    py27_0</span><br><span class="line">get_terminal_size         1.0.0                    py27_0</span><br><span class="line">gevent                    1.2.1                    py27_0</span><br><span class="line">greenlet                  0.4.11                   py27_0</span><br><span class="line">grin                      1.2.1                    py27_3</span><br><span class="line">h5py                      2.6.0               np111py27_2</span><br><span class="line">hdf5                      1.8.17                        1</span><br><span class="line">heapdict                  1.0.0                    py27_1</span><br><span class="line">icu                       54.1                          0</span><br><span class="line">idna                      2.2                      py27_0</span><br><span class="line">imagesize                 0.7.1                    py27_0</span><br><span class="line">ipaddress                 1.0.18                   py27_0</span><br><span class="line">ipykernel                 4.5.2                    py27_0</span><br><span class="line">ipython                   5.1.0                    py27_1</span><br><span class="line">ipython_genutils          0.1.0                    py27_0</span><br><span class="line">ipywidgets                5.2.2                    py27_1</span><br><span class="line">isort                     4.2.5                    py27_0</span><br><span class="line">itsdangerous              0.24                     py27_0</span><br><span class="line">jbig                      2.1                           0</span><br><span class="line">jdcal                     1.3                      py27_0</span><br><span class="line">jedi                      0.9.0                    py27_1</span><br><span class="line">jinja2                    2.9.4                    py27_0</span><br><span class="line">jpeg                      9b                            0</span><br><span class="line">jsonschema                2.5.1                    py27_0</span><br><span class="line">jupyter                   1.0.0                    py27_3</span><br><span class="line">jupyter_client            4.4.0                    py27_0</span><br><span class="line">jupyter_console           5.0.0                    py27_0</span><br><span class="line">jupyter_core              4.2.1                    py27_0</span><br><span class="line">Keras                     2.0.4                     &lt;pip&gt;</span><br><span class="line">lazy-object-proxy         1.2.2                    py27_0</span><br><span class="line">libgpuarray               0.6.4                         0</span><br><span class="line">libiconv                  1.14                          0</span><br><span class="line">libpng                    1.6.27                        0</span><br><span class="line">libtiff                   4.0.6                         3</span><br><span class="line">libxml2                   2.9.4                         0</span><br><span class="line">libxslt                   1.1.29                        0</span><br><span class="line">llvmlite                  0.15.0                   py27_0</span><br><span class="line">locket                    0.2.0                    py27_1</span><br><span class="line">lxml                      3.7.2                    py27_0</span><br><span class="line">mako                      1.0.6                    py27_0</span><br><span class="line">markupsafe                0.23                     py27_2</span><br><span class="line">matplotlib                2.0.0               np111py27_0</span><br><span class="line">mistune                   0.7.3                    py27_1</span><br><span class="line">mkl                       2017.0.1                      0</span><br><span class="line">mkl-service               1.1.2                    py27_3</span><br><span class="line">mock                      2.0.0                     &lt;pip&gt;</span><br><span class="line">mpmath                    0.19                     py27_1</span><br><span class="line">multipledispatch          0.4.9                    py27_0</span><br><span class="line">nbconvert                 4.2.0                    py27_0</span><br><span class="line">nbformat                  4.2.0                    py27_0</span><br><span class="line">networkx                  1.11                     py27_0</span><br><span class="line">nltk                      3.2.2                    py27_0</span><br><span class="line">nose                      1.3.7                    py27_1</span><br><span class="line">notebook                  4.3.1                    py27_0</span><br><span class="line">numba                     0.30.1              np111py27_0</span><br><span class="line">numexpr                   2.6.1               np111py27_2</span><br><span class="line">numpy                     1.12.1                    &lt;pip&gt;</span><br><span class="line">numpy                     1.11.3                   py27_0</span><br><span class="line">numpydoc                  0.6.0                    py27_0</span><br><span class="line">odo                       0.5.0                    py27_1</span><br><span class="line">openpyxl                  2.4.1                    py27_0</span><br><span class="line">openssl                   1.0.2k                        1</span><br><span class="line">packaging                 16.8                      &lt;pip&gt;</span><br><span class="line">pandas                    0.19.2              np111py27_1</span><br><span class="line">partd                     0.3.7                    py27_0</span><br><span class="line">path.py                   10.0                     py27_0</span><br><span class="line">pathlib2                  2.2.0                    py27_0</span><br><span class="line">patsy                     0.4.1                    py27_0</span><br><span class="line">pbr                       3.0.0                     &lt;pip&gt;</span><br><span class="line">pep8                      1.7.0                    py27_0</span><br><span class="line">pexpect                   4.2.1                    py27_0</span><br><span class="line">pickleshare               0.7.4                    py27_0</span><br><span class="line">pillow                    4.0.0                    py27_0</span><br><span class="line">pip                       9.0.1                    py27_1</span><br><span class="line">ply                       3.9                      py27_0</span><br><span class="line">prompt_toolkit            1.0.9                    py27_0</span><br><span class="line">protobuf                  3.3.0                     &lt;pip&gt;</span><br><span class="line">psutil                    5.0.1                    py27_0</span><br><span class="line">ptyprocess                0.5.1                    py27_0</span><br><span class="line">py                        1.4.32                   py27_0</span><br><span class="line">pyasn1                    0.1.9                    py27_0</span><br><span class="line">pyaudio                   0.2.7                    py27_0</span><br><span class="line">pycosat                   0.6.1                    py27_1</span><br><span class="line">pycparser                 2.17                     py27_0</span><br><span class="line">pycrypto                  2.6.1                    py27_4</span><br><span class="line">pycurl                    7.43.0                   py27_2</span><br><span class="line">pyflakes                  1.5.0                    py27_0</span><br><span class="line">pygments                  2.1.3                    py27_0</span><br><span class="line">pygpu                     0.6.4                    py27_0</span><br><span class="line">pylint                    1.6.4                    py27_1</span><br><span class="line">pyopenssl                 16.2.0                   py27_0</span><br><span class="line">pyparsing                 2.2.0                     &lt;pip&gt;</span><br><span class="line">pyparsing                 2.1.4                    py27_0</span><br><span class="line">pyqt                      5.6.0                    py27_1</span><br><span class="line">pytables                  3.3.0               np111py27_0</span><br><span class="line">pytest                    3.0.5                    py27_0</span><br><span class="line">python                    2.7.13                        0</span><br><span class="line">python-dateutil           2.6.0                    py27_0</span><br><span class="line">python.app                1.2                      py27_4</span><br><span class="line">pytz                      2016.10                  py27_0</span><br><span class="line">pyyaml                    3.12                     py27_0</span><br><span class="line">pyzmq                     16.0.2                   py27_0</span><br><span class="line">qt                        5.6.2                         0</span><br><span class="line">qtawesome                 0.4.3                    py27_0</span><br><span class="line">qtconsole                 4.2.1                    py27_1</span><br><span class="line">qtpy                      1.2.1                    py27_0</span><br><span class="line">readline                  6.2                           2</span><br><span class="line">redis                     3.2.0                         0</span><br><span class="line">redis-py                  2.10.5                   py27_0</span><br><span class="line">requests                  2.12.4                   py27_0</span><br><span class="line">rope                      0.9.4                    py27_1</span><br><span class="line">ruamel_yaml               0.11.14                  py27_1</span><br><span class="line">scandir                   1.4                      py27_0</span><br><span class="line">scikit-image              0.12.3              np111py27_1</span><br><span class="line">scikit-learn              0.18.1              np111py27_1</span><br><span class="line">scipy                     0.18.1              np111py27_1</span><br><span class="line">seaborn                   0.7.1                    py27_0</span><br><span class="line">setuptools                27.2.0                   py27_0</span><br><span class="line">setuptools                35.0.2                    &lt;pip&gt;</span><br><span class="line">simplegeneric             0.8.1                    py27_1</span><br><span class="line">singledispatch            3.4.0.3                  py27_0</span><br><span class="line">sip                       4.18                     py27_0</span><br><span class="line">six                       1.10.0                   py27_0</span><br><span class="line">six                       1.10.0                    &lt;pip&gt;</span><br><span class="line">snowballstemmer           1.2.1                    py27_0</span><br><span class="line">sockjs-tornado            1.0.3                    py27_0</span><br><span class="line">sphinx                    1.5.1                    py27_0</span><br><span class="line">spyder                    3.1.2                    py27_0</span><br><span class="line">sqlalchemy                1.1.5                    py27_0</span><br><span class="line">sqlite                    3.13.0                        0</span><br><span class="line">ssl_match_hostname        3.4.0.2                  py27_1</span><br><span class="line">statsmodels               0.6.1               np111py27_1</span><br><span class="line">subprocess32              3.2.7                    py27_0</span><br><span class="line">sympy                     1.0                      py27_0</span><br><span class="line">tensorflow                1.1.0                     &lt;pip&gt;</span><br><span class="line">terminado                 0.6                      py27_0</span><br><span class="line">theano                    0.9.0                    py27_0</span><br><span class="line">tk                        8.5.18                        0</span><br><span class="line">toolz                     0.8.2                    py27_0</span><br><span class="line">tornado                   4.4.2                    py27_0</span><br><span class="line">traitlets                 4.3.1                    py27_0</span><br><span class="line">unicodecsv                0.14.1                   py27_0</span><br><span class="line">wcwidth                   0.1.7                    py27_0</span><br><span class="line">Werkzeug                  0.12.1                    &lt;pip&gt;</span><br><span class="line">werkzeug                  0.11.15                  py27_0</span><br><span class="line">wheel                     0.29.0                    &lt;pip&gt;</span><br><span class="line">wheel                     0.29.0                   py27_0</span><br><span class="line">widgetsnbextension        1.2.6                    py27_0</span><br><span class="line">wrapt                     1.10.8                   py27_0</span><br><span class="line">xlrd                      1.0.0                    py27_0</span><br><span class="line">xlsxwriter                0.9.6                    py27_0</span><br><span class="line">xlwings                   0.10.2                   py27_0</span><br><span class="line">xlwt                      1.2.0                    py27_0</span><br><span class="line">xz                        5.2.2                         1</span><br><span class="line">yaml                      0.1.6                         0</span><br><span class="line">zlib                      1.2.8                         3</span><br></pre></td></tr></table></figure><h2 id="5-使用Anaconda管理软件包"><a href="#5-使用Anaconda管理软件包" class="headerlink" title="5.使用Anaconda管理软件包"></a>5.使用Anaconda管理软件包</h2><h3 id="5-1-安装Theano"><a href="#5-1-安装Theano" class="headerlink" title="5.1. 安装Theano"></a>5.1. 安装Theano</h3><p>Theano是一个基于Python的深度学习库。默认Theano是没有被安装的，那么我们下面使用Anaconda来安装它。<br>首先我们使用命令来查看一下Theano包的情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">leocookMacBook-Pro:~ leocook$ conda search theano</span><br></pre></td></tr></table></figure><p>然后得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Fetching package metadata .........</span><br><span class="line">theano                       0.8.2                    py35_0  defaults</span><br><span class="line">                             0.8.2                    py34_0  defaults</span><br><span class="line">                             0.8.2                    py27_0  defaults</span><br><span class="line">                             0.9.0                    py35_0  defaults</span><br><span class="line">                             0.9.0                    py36_0  defaults</span><br><span class="line">                          *  0.9.0                    py27_0  defaults</span><br></pre></td></tr></table></figure></p><p>我们可以看到有多个版面，然后我们直接运行下面的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install theano</span><br></pre></td></tr></table></figure><p>它会选择和我们py版本兼容的最新版本<code>0.9.0                    py27_0</code>.</p><h3 id="5-2-安装Tensorflow"><a href="#5-2-安装Tensorflow" class="headerlink" title="5.2 安装Tensorflow"></a>5.2 安装Tensorflow</h3><p>Tensorflow是Google开源的一个人工智能学习系统。我们使用<code>conda search tensorflow</code>命令查看发现Anaconda库中没有Tensorflow的包。</p><p>其实，我们也可以用Anaconda来管理那些使用其他方式安装的包，例如使用pip安装的包。下面简单说明一下使用Anaconda管理使用pip安装的Tensorflow。</p><ul><li>创建一个名称为tensorflow的conda环境</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n tensorflow</span><br></pre></td></tr></table></figure><ul><li>激活conda环境</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source activate tensorflow</span><br></pre></td></tr></table></figure><p>激活环境后，在这里执行命令安装的程序，都会被Anaconda管理。</p><ul><li>使用pip来安装TensorFlow</li></ul><p>在这里<code><a href="https://www.tensorflow.org/install/install_mac#the_url_of_the_tensorflow_python_package" target="_blank" rel="noopener">https://www.tensorflow.org/install/install_mac#the_url_of_the_tensorflow_python_package</a></code>找到对应版本的URL，也就是下面命令中将会使用到的<code>$TF_PYTHON_URL</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(tensorflow)$ pip install --ignore-installed --upgrade $TF_PYTHON_URL</span><br></pre></td></tr></table></figure><p>例如笔者的是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --ignore-installed --upgrade https://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-1.1.0-py2-none-any.whl</span><br></pre></td></tr></table></figure></p><p>安装完成后，退出tensorflow这个Anaconda环境：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source deactivate tensorflow</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python SciPy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SciPy Anaconda  NumPy Matplotlib IPython Sympy pandas Tensorflow Theano </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM内存模型基础</title>
      <link href="/2017/04/05/java-2017-04-05-JVM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/"/>
      <url>/2017/04/05/java-2017-04-05-JVM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>Java内存模型也被称为JMM，开发人员在使用时无需过多考虑因指针引起的如内存泄露和溢出问题，也不用为每个new出来的对象使用delete等方法来释放内存。JVM已经为开发人员处理好了这一切，但是由于各种原因，Java程序也会出现内存溢出等问题，如果不了解JVM的内存模型以及相关的管理策略，那么整个排查过程将会变得十分艰难。<br><img src="http://leocook-blog.test.upcdn.net/JVM%20mem%20model.png" alt="JVM mem model" title="JVM mem model"></p><p>JVM的运行时内存共有5块区域，其中有3个是线程间隔离的，有2个是线程间共享的。</p><ul><li><p>线程间隔离（线程私有区）</p><ul><li>程序计数器</li><li>JVM栈</li><li>本地方法栈</li></ul></li><li><p>线程间共享</p><ul><li>Java堆</li><li>方法区</li></ul></li></ul><h2 id="1-程序计数器"><a href="#1-程序计数器" class="headerlink" title="1.程序计数器"></a>1.程序计数器</h2><p>它是线程间隔离的。字节码的行号指示器，用来标记当前线程所执行的字节码的行号。</p><blockquote><p>Q1. 为什么每个线程都需要一个独立的计数器呢？<br>因为JVM的多线程是轮询在CPU上执行的，任何一个时间点，一个处理器上最多只有一条指定在执行。为保证线程切换后，能恢复从正确的执行位置执行指令，所以给每个线程都独立的使用一块空间作为程序计数器，使得多线程之间计数器互不影响。</p></blockquote><h2 id="2-JVM栈"><a href="#2-JVM栈" class="headerlink" title="2.JVM栈"></a>2.JVM栈</h2><p>它是线程间隔离的，也就是常说到的“栈内存”。每个方法执行的时候都会创建一个栈桢，用来存放局部变量表用来存放该方法内使用到的局部变量表、操作数栈、动态链接、方法出口灯信息。</p><p>一个方法从调用到执行完成的过程也就对应着一个栈桢在JVM栈中入栈到出栈的过程。<br>局部变量表中存放了编译器可确定的各种基本数据类型（例如：boolean、byte、char、short等等），以及对象的引用。</p><p>使用<code>-Xss</code>参数设置栈容量 例： <code>-Xss128k</code></p><blockquote><p>JVM规范规定该区域会抛出两种异常：</p><ol><li>StackOverFlowError：当线程请求栈深度超出虚拟机栈所允许的深度时,抛出该异常</li><li>OutOfMemoryError：当Java虚拟机扩展到无法申请足够内存时,抛出该异常</li></ol></blockquote><h2 id="3-本地方法栈"><a href="#3-本地方法栈" class="headerlink" title="3.本地方法栈"></a>3.本地方法栈</h2><p>它是线程间隔离的，和“JVM栈”的区别是：“JVM栈”是执行Java方法时所使用到的内存；“本地方法栈”是JVM执行Native方法时所使用到的内存存。<br>这一块内存在JVM规范中没有强制指定，所以不同的虚拟机实现它的方法可能不一样。Sum HotSpot虚拟机是把“JVM栈”和“本地方法栈”合二为一的。</p><blockquote><p>JVM规范规定该区域可抛出StackOverFlowError和OutOfMemoryError异常。</p></blockquote><h2 id="4-Java堆"><a href="#4-Java堆" class="headerlink" title="4.Java堆"></a>4.Java堆</h2><p>它是线程间共享的，存放JVM对象实例，也是GC发生的主要区域，所以也被称为GC堆。<br>关于GC算法垃圾回收器，后边会介绍。</p><blockquote><p>JVM规范规定该区域可抛出OutOfMemoryError异常。</p></blockquote><p><code>-Xms</code>参数设置最小值，<code>-Xmx</code>参数设置最大值，可以指定参数<code>-XX:+HeapDumpOnOutOfMemoryError</code>，使得JVM在出现OutOfMemoryError异常异常时能够dump出Java堆的快照。</p><h2 id="5-方法区"><a href="#5-方法区" class="headerlink" title="5.方法区"></a>5.方法区</h2><p>它是线程间共享的，存放已被JVM加载的类信息、常量、静态变量、即时编译器编译后的代码等。它还有个别名叫做Non-Heap（非堆）。</p><p><code>-XX:MaxPermSize</code>可以设置方法区的最大值，<code>-XX:PermSize</code>设置方法区的最小值。</p><blockquote><p>JVM规范规定该区域可抛出OutOfMemoryError异常。</p></blockquote><h3 id="5-1-运行时常量池"><a href="#5-1-运行时常量池" class="headerlink" title="5.1.运行时常量池"></a>5.1.运行时常量池</h3><p>它是方法区的一部分，存放编译器生成的各种编译期生成的字面量和符号引用。</p><h2 id="HotSpot虚拟机"><a href="#HotSpot虚拟机" class="headerlink" title="HotSpot虚拟机"></a>HotSpot虚拟机</h2><p>HotSpot虚拟机中有两个比较特别的地方：</p><ul><li>本地方法栈和虚拟机栈合二为一了；</li><li>在分代垃圾回收器中，把方法区称为永久代，但它们不是等价的。这里准确的说是使用永久代来实现了方法区。</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2016书单</title>
      <link href="/2016/12/30/book-2016-12-31-2016%E4%B9%A6%E5%8D%95/"/>
      <url>/2016/12/30/book-2016-12-31-2016%E4%B9%A6%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<p>2016年看的书主要还是以技术类的比价多，意料之外的是看完了《西游记》。</p><h2 id="1-《西游记》"><a href="#1-《西游记》" class="headerlink" title="1.《西游记》"></a>1.《西游记》</h2><p>和86版的电视剧差别挺大，在北京时，主要是坐地铁的时候看完的。</p><p><img src="http://leocook-blog.test.upcdn.net/xiyouji.png" alt="西游记" title="西游记"></p><p>图书地址：<a href="https://www.amazon.cn/dp/B00C4PGGUW" target="_blank" rel="noopener">https://www.amazon.cn/dp/B00C4PGGUW</a></p><hr><h2 id="2-《Spark最佳实践》"><a href="#2-《Spark最佳实践》" class="headerlink" title="2.《Spark最佳实践》"></a>2.《Spark最佳实践》</h2><p>同类目书籍中，比较偏向实战，推荐。</p><p><img src="https://img3.doubanio.com/lpic/s28707922.jpg" alt="Spark最佳实践" title="Spark最佳实践"></p><p>图书地址：<a href="https://item.jd.com/11923673.html" target="_blank" rel="noopener">https://item.jd.com/11923673.html</a></p><hr><h2 id="3-《Spark快速大数据分析》"><a href="#3-《Spark快速大数据分析》" class="headerlink" title="3.《Spark快速大数据分析》"></a>3.《Spark快速大数据分析》</h2><p>spark入门级别的书，写得比较细致，也可以作为手册查询，内容基本上都是官网翻译过来的。</p><p><img src="https://img1.doubanio.com/lpic/s28300707.jpg" alt="Spark快速大数据分析" title="Spark快速大数据分析"></p><p>图书地址：<a href="https://item.jd.com/11782888.html" target="_blank" rel="noopener">https://item.jd.com/11782888.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 书单 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书单 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spark内存管理</title>
      <link href="/2016/10/13/spark-2016-10-13-spark%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
      <url>/2016/10/13/spark-2016-10-13-spark%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>Spark的最大卖点就是内存迭代运算，相对于传统MapReduce的磁盘迭代运算，spark的迭代运算要快得多。作为内存迭代运算的spark，掌握它的内存管理是很有必要的。</p><p>Spark的内存可以大体上分为三大块：Reserved Memory（预留内存）、User Memory（用户内存），以及Spark Memory（Spark内存）。Spark Memory又包含Storage Memory和Execution Memory这两大块，1.6版本之前他们是不能共享的，从1.6版本(如下图)开始它们就可以共享了。<strong>而本文介绍的就是1.6版本开始之后内存管理机制。</strong></p><p><img src="http://leocook-blog.test.upcdn.net/spark%20m.png" alt="spark mem" title="spark mem"></p><p>本文在描述spark各个部分内存的时候，大概从三个方面介绍：概念描述、该内存参数怎么配置，内存不够的时候会发生什么情况。</p><h2 id="1-Reserved-Memory"><a href="#1-Reserved-Memory" class="headerlink" title="1.Reserved Memory"></a>1.Reserved Memory</h2><p>系统预留内存，用于存储Spark内部对象。它的大小是300MB，不能通过参数修改，如果真的需要修改，需要重新编译（spark.testing.reservedMemory参数可以使用，但是不推荐在线上环境中使用）。</p><p>当executor分配的内存小于1.5*Reserved Memory的时候，将会报“please use larger heap size”错误。</p><h2 id="2-User-Memory"><a href="#2-User-Memory" class="headerlink" title="2.User Memory"></a>2.User Memory</h2><p>用户内存，用于存储RDD转换操作所需要的数据，例如RDD依赖等信息。<br>这个内存大小为(“Java Heap” – “Reserved Memory”) <em> (1.0 – spark.memory.fraction)，默认是(“Java Heap” – 300MB) </em> 0.25。如果用户使用的内存大于这个值，将会导致OOM。</p><h2 id="3-Spark-Memory"><a href="#3-Spark-Memory" class="headerlink" title="3.Spark Memory"></a>3.Spark Memory</h2><p>这部分内存是归Spark自身管理的，大小为(“Java Heap” – “Reserved Memory”) <em> spark.memory.fraction，默认为(“Java Heap” – 300MB) </em> 0.75。Spark Memory又被分为Storage Memory和Execution Memory，下面详细说明。</p><h3 id="3-1-Storage-Memory"><a href="#3-1-Storage-Memory" class="headerlink" title="3.1.Storage Memory"></a>3.1.Storage Memory</h3><p>用来存储spark的cache数据，例如RDD的缓存、unroll数据。当缓存数据的持久化level达到一定的时候，spark将会把它存到磁盘中，例如广播变量的数据持久化级别都是“MEMORY_AND_DISK”，所以所有的广播变量数据大小达到一定量的时候，都会存到磁盘中的。默认大小是Spark Memory的0.5，可用过参数spark.memory.storageFraction来配置（spark.memory.storageFraction=0.5）。</p><ul><li>Unroll Memory</li></ul><p>“Unroll Memory”是”Storage Memory”的一部分，在Spark中数据可以以序列化和反序列化的形式存储，序列化后的数据是无法直接被访问的，只有反序列化后才能被使用，反序列化过程中用到的RAM就是Unroll Memory。Spark中的大部分数据都是以序列化的形式传输的。</p><h3 id="3-2-Execution-Memory"><a href="#3-2-Execution-Memory" class="headerlink" title="3.2.Execution Memory"></a>3.2.Execution Memory</h3><p>用于存储spark的buffer部分，例如task运行过程中产生的一些对象，shuffle过程中map的输出，在内存不够的时候，支持写到磁盘上。Spark Memory中能被应用使用的内存中，除了Storage Memory剩余内存都是Execution Memory的了。</p><ul><li>Shuffle Memory</li></ul><p>shuffle阶段使用的内存，主要是使用在sort上。如果这一块没有足够的内存来用作shuffle，将会内存溢出失败。<br>当然，在内存不足的时候，也可以使用spark的外部排序（spark.shuffle.spill=true），但是性能将会有些折扣。</p><h3 id="3-3-Storage-Memory和Execution-Memory共享规则"><a href="#3-3-Storage-Memory和Execution-Memory共享规则" class="headerlink" title="3.3.Storage Memory和Execution Memory共享规则"></a>3.3.Storage Memory和Execution Memory共享规则</h3><ul><li><p><strong>一方空闲，一方内存不足的时候，内存不足的一方可以借用另一方的内存。</strong></p></li><li><p><strong>Storage Memory占用了Execution Memory的内存，当Execution Memory内存不够用时</strong></p></li></ul><p>强制释放Storage Memory中属于Execution Memory的那部分内存，释放后的内存被Execution Memory使用。Storage Memory丢失的数据在下次使用的时候会被重新计算。</p><ul><li><strong>Execution Memory占用了Storage Memory的内存，当Storage Memory内存不够用时</strong></li></ul><p>不强制释放Execution Memory中属于Storage Memory的那部分内存，Storage Memory会一直等待，直到Execution Memory主动释放属于Storage Memory的那部分内存。因为强制释放Execution Memory会导致任务失败。</p><p>（PS：感觉Execution Memory在欺负Storage Memory，有木有~~~）</p>]]></content>
      
      
      <categories>
          
          <category> spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spark streaming最佳实践-概述</title>
      <link href="/2016/10/12/spark-2016-10-12-spark-streaming%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5-%E6%A6%82%E8%BF%B0/"/>
      <url>/2016/10/12/spark-2016-10-12-spark-streaming%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5-%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<p>Spark streaming是基于Spark core的，天然的具备易扩展、高吞吐量，以及自动容错等特性。支持的主流数据源有Kafka、Flume、HDFS、Twitter、TCP socket等等，Spark的数据输出在spark streaming中都支持，对于有spark基础的开发人员来说，开发spark streaming应用成本将会少很多。本文是一篇概述型的文章，相关详细的配置会在后边逐渐补上。</p><p>Spark streaming在企业实战中经常回到这么几类问题：内存溢出、外部系统连接数过多、分配的资源超过了程序所需要的资源，造成资源浪费。</p><h2 id="1-内存溢出"><a href="#1-内存溢出" class="headerlink" title="1.内存溢出"></a>1.内存溢出</h2><p>Spark内存大概分为了两类：Execution Memory和Storage Memory，前者主要用来做buffer的，例如joins、shuffle、sort等等；后者主要用来做cache，例如RDD的数据存储、广播变量、task结果数据等等。从1.6版本之前这两部分内存是不能共享的，从1.6开始之后这两部分内存就可以共享了。</p><p>我遇到的内存溢出问题大概有三类，通常是单个分区处理的数据量过多：</p><ul><li>a).数据倾斜引；   </li><li>b).数据未倾斜，分区数过少；   </li><li>c).某个分区中产生了一个较大的内存集合，例如大的List、Set，或者Map。   </li></ul><p>这类问题在spark core中也是经常会出现的，关于数据倾斜的问题以后会详细讲解。入手一个新的业务时，应该对该业务的数据量有个大概的预估，这样给这个应用分配多少节点，每个节点会处理多大的数据量，这样就能很好的预估出每个节点分配多少资源比较合理了。</p><p>为了避免内存溢出，可以从下面几个方向来做：</p><ul><li>a).避免数据倾斜；</li><li>b).评估每个分区的数据量，给每个分区分配合理的资源；</li><li>c).控制好List、Set等集合的大小；</li><li>d).控制Spark streaming读取源数据的最大速度（spark.streaming.kafka.maxRatePerPartition），实时数据流量有高峰和低谷，不同时间处理的数据量是不一样的，为防止数据高峰的时候内存溢出，这里有必要做配置；</li><li>e).配置Spark streaming可动态控制读取数据源的速度（spark.streaming.backpressure.enabled）。</li></ul><h2 id="2-外部系统连接数过多"><a href="#2-外部系统连接数过多" class="headerlink" title="2.外部系统连接数过多"></a>2.外部系统连接数过多</h2><p>在使用spark streaming解决问题的时候，经常会对外部数据源进行读写操作，切记每次读写完成之后需要关闭网络连接。在我们以往的编程经验中，这些思维都是一直持有的。<br>在往hbase写入数据的时候，如果你使用了RDD.saveAsHadoopDataset方法，就需要注意了，org.apache.hadoop.hbase.mapred.TableOutputFormat类存在bug：不能释放zookeeper连接，导致在往hbase写数据的时候，zookeeper的连接数不停得增长。</p><p>推荐使用下面这种写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import org.apache.hadoop.mapreduce.Job</span><br><span class="line">import org.apache.hadoop.hbase.mapreduce.TableOutputFormat</span><br><span class="line"></span><br><span class="line">val conf = HBaseConfiguration.create()</span><br><span class="line">conf.set(&quot;hbase.zookeeper.quorum&quot;, zk_hosts)</span><br><span class="line">conf.set(&quot;hbase.zookeeper.property.clientPort&quot;, zk_port)</span><br><span class="line"></span><br><span class="line">conf.set(TableOutputFormat.OUTPUT_TABLE, &quot;TABLE_NAME&quot;)</span><br><span class="line">val job = Job.getInstance(conf)</span><br><span class="line">job.setOutputFormatClass(classOf[TableOutputFormat[String]])</span><br><span class="line"></span><br><span class="line">formatedLines.map&#123;</span><br><span class="line">  case (a,b, c) =&gt; &#123;</span><br><span class="line">    val row = Bytes.toBytes(a)</span><br><span class="line"></span><br><span class="line">    val put = new Put(row)</span><br><span class="line">    put.setDurability(Durability.SKIP_WAL)</span><br><span class="line"></span><br><span class="line">    put.addColumn(Bytes.toBytes(&quot;cf&quot;), Bytes.toBytes(&quot;node&quot;), Bytes.toBytes(b))</span><br><span class="line">    put.addColumn(Bytes.toBytes(&quot;cf&quot;), Bytes.toBytes(&quot;topic&quot;), Bytes.toBytes(c))</span><br><span class="line"></span><br><span class="line">    (new ImmutableBytesWritable(row), put)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;.saveAsNewAPIHadoopDataset(job.getConfiguration)</span><br></pre></td></tr></table></figure><h2 id="3-资源分配的浪费"><a href="#3-资源分配的浪费" class="headerlink" title="3.资源分配的浪费"></a>3.资源分配的浪费</h2><p>如果实时数据在每天的某个时间点有着平时的几倍的数据量，如果给该作业分配过多的资源，那么在绝大多数，这些资源都是闲置浪费的。这里可以启用动态资源分配。</p><p>关于配置介绍可以查看官方文档：<a href="http://spark.apache.org/docs/latest/job-scheduling.html#dynamic-resource-allocation" target="_blank" rel="noopener">http://spark.apache.org/docs/latest/job-scheduling.html#dynamic-resource-allocation</a></p><p>如果启用该配置，需要做如下配置：</p><blockquote><p>1.在spark应用中配置spark.dynamicAllocation.enabled=true<br>2.每个节点启动外部shuffle服务，并在spark应用中配置spark.shuffle.service.enabled=true</p></blockquote><p>关于外部shuffle服务，在standalone、Mesos，yarn中的配置是不一样的。</p><ul><li>standalone</li></ul><p>启动worker的时候指定spark.shuffle.service.enabled=true</p><ul><li>Mesos</li></ul><p>在所有节点上配置spark.shuffle.service.enabled=true，然后执行$SPARK_HOME/sbin/start-mesos-shuffle-service.sh</p><ul><li>yarn</li></ul><p>a.添加yarn的配置文件，重新编译spark。如果使用官方编译好的安装包，可以忽略这一步。<br>b.找到spark-<version>-yarn-shuffle.jar。如果自己编译spark的话，在目录$SPARK_HOME/common/network-yarn/target/scala-<version>下；如果是使用官方编译好的spark，在lib目录下寻找。<br>c.添加到spark-<version>-yarn-shuffle.jar到yarn所有NodeManager的classpath下。<br>d.配置所有NodeManager的yarn-site.xml文件如下：</version></version></version></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;spark_shuffle&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;yarn.nodemanager.aux-services.spark_shuffle.class&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;org.apache.spark.network.yarn.YarnShuffleService&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><p>e.重启所有的NodeManager</p><p>spark on yarn配置了外部shuffle之后，<code>—num-executors</code>配置将不再生效。</p>]]></content>
      
      
      <categories>
          
          <category> spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ELK安装配置介绍</title>
      <link href="/2016/08/17/ELK-2016-07-20-ELK%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E4%BB%8B%E7%BB%8D/"/>
      <url>/2016/08/17/ELK-2016-07-20-ELK%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p>es是接触的比较早，在13年就做过相关开发，后来使用过ELK来做一些数据统计。最近打算从头来梳理一下这块的东西，今天就先从安装和配置开始吧。</p><h2 id="版本列表"><a href="#版本列表" class="headerlink" title="版本列表"></a>版本列表</h2><div class="table-container"><table><thead><tr><th>project</th><th>version</th></tr></thead><tbody><tr><td>es</td><td>2.3.4</td></tr><tr><td>logstash</td><td>2.3.4</td></tr><tr><td>kibana</td><td>4.5.3</td></tr></tbody></table></div><h2 id="1-logstash配置"><a href="#1-logstash配置" class="headerlink" title="1.logstash配置"></a>1.logstash配置</h2><h3 id="1-1-Jdk安装"><a href="#1-1-Jdk安装" class="headerlink" title="1.1.Jdk安装"></a>1.1.Jdk安装</h3><p><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html</a></p><h3 id="1-2-下载logstash"><a href="#1-2-下载logstash" class="headerlink" title="1.2.下载logstash"></a>1.2.下载logstash</h3><p><a href="https://www.elastic.co/downloads/logstash" target="_blank" rel="noopener">https://www.elastic.co/downloads/logstash</a></p><h3 id="1-3-启动"><a href="#1-3-启动" class="headerlink" title="1.3.启动"></a>1.3.启动</h3><p>解压后可直接启动，不增加额外的配置也是能够启动成功的。启动方式有多种，这里举例说明。</p><ul><li>使用-e指定启动的参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./logstash -e &apos;input &#123; stdin &#123; &#125; &#125; output &#123; stdout &#123;&#125; &#125;&apos;</span><br></pre></td></tr></table></figure><p>这里设定stdin为输入，stdout为输出。</p><ul><li>使用配置文件启动</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cat logstash-simple.conf</span><br><span class="line">input &#123; stdin &#123; &#125; &#125;</span><br><span class="line">output &#123;</span><br><span class="line">   stdout &#123; codec=&gt; rubydebug &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">./logstash agent -f logstash-simple.conf</span><br></pre></td></tr></table></figure><h3 id="1-4-验证"><a href="#1-4-验证" class="headerlink" title="1.4.验证"></a>1.4.验证</h3><p>启动后才命令行输入”hello World”，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root@dt-vt-153:/opt/logstash/logstash-2.3.4/bin# ./logstash agent -f logstash-simple.conf</span><br><span class="line"></span><br><span class="line">Settings: Default pipeline workers: 1</span><br><span class="line">Pipeline main started</span><br><span class="line">hello World</span><br><span class="line">&#123;</span><br><span class="line">       &quot;message&quot; =&gt; &quot;hello World&quot;,</span><br><span class="line">       &quot;@version&quot; =&gt; &quot;1&quot;,</span><br><span class="line">       &quot;@timestamp&quot; =&gt; &quot;2016-07-18T07:20:20.526Z&quot;,</span><br><span class="line">       &quot;host&quot; =&gt; &quot;0.0.0.0&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印出来的message部分显示为输入内容。</p><h2 id="2-ES"><a href="#2-ES" class="headerlink" title="2.ES"></a>2.ES</h2><h3 id="2-1-下载"><a href="#2-1-下载" class="headerlink" title="2.1.下载"></a>2.1.下载</h3><p><a href="https://www.elastic.co/downloads/elasticsearch" target="_blank" rel="noopener">https://www.elastic.co/downloads/elasticsearch</a></p><h3 id="2-2-配置"><a href="#2-2-配置" class="headerlink" title="2.2.配置"></a>2.2.配置</h3><p>配置一下主机的地址,这里不配置的话，只能在安装服务的宿主机上使用localhost来访问ES了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi config/elasticsearch.yml</span><br><span class="line">network.host: 0.0.0.0</span><br></pre></td></tr></table></figure><h3 id="2-3-启动"><a href="#2-3-启动" class="headerlink" title="2.3.启动"></a>2.3.启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/elasticsearch/elasticsearch-2.3.4/bin/elasticsearch</span><br></pre></td></tr></table></figure><h3 id="2-4-插件安装"><a href="#2-4-插件安装" class="headerlink" title="2.4.插件安装"></a>2.4.插件安装</h3><p>kopf插件安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/elasticsearch/elasticsearch-2.3.4/bin/plugin install lmenezes/elasticsearch-kopf</span><br></pre></td></tr></table></figure><p>安装完之后，可以访问web页面<a href="http://[hostname]:9200/_plugin/kopf查看。" target="_blank" rel="noopener">http://[hostname]:9200/_plugin/kopf查看。</a></p><h3 id="2-5-验证"><a href="#2-5-验证" class="headerlink" title="2.5.验证"></a>2.5.验证</h3><p>es默认使用的9200端口，可使用下面的命令来查看该端口是否已经被监听：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anp |grep :9200</span><br></pre></td></tr></table></figure><p>或者使用浏览器访问端口9200.</p><h2 id="3-Kibana"><a href="#3-Kibana" class="headerlink" title="3. Kibana"></a>3. Kibana</h2><h3 id="3-1-下载"><a href="#3-1-下载" class="headerlink" title="3.1.下载"></a>3.1.下载</h3><p><a href="https://www.elastic.co/downloads/kibana" target="_blank" rel="noopener">https://www.elastic.co/downloads/kibana</a></p><h3 id="3-2-配置"><a href="#3-2-配置" class="headerlink" title="3.2.配置"></a>3.2.配置</h3><p>配置一下es的地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi config/kibana.yml</span><br><span class="line"></span><br><span class="line">elasticsearch.url: &quot;http://[hostname]:9200&quot;</span><br></pre></td></tr></table></figure><p>这里默认是使用ES的数据。</p><h3 id="3-3-启动"><a href="#3-3-启动" class="headerlink" title="3.3.启动"></a>3.3.启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/kibana/kibana-4.5.3-linux-x64/bin/kibana</span><br></pre></td></tr></table></figure><h3 id="3-4-验证"><a href="#3-4-验证" class="headerlink" title="3.4.验证"></a>3.4.验证</h3><p>访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://[hostname]:5601/</span><br></pre></td></tr></table></figure><p>点击”create”创建索引名称。</p><h2 id="4-使ELK整体协作起来"><a href="#4-使ELK整体协作起来" class="headerlink" title="4.使ELK整体协作起来"></a>4.使ELK整体协作起来</h2><h3 id="4-1-原理"><a href="#4-1-原理" class="headerlink" title="4.1.原理"></a>4.1.原理</h3><ul><li>logstash</li></ul><p>logstash主要用作收集数据使用，可以自由的定义数据的入口和出口，兼容多种数据源。</p><ul><li>elasticsearch</li></ul><p>es和solr比较类似，都是基于lucene的来提供的搜索服务。但是在高并发的表现上，ES的负载均衡效果是优于solr的。</p><ul><li>kibana</li></ul><p>kibana是一个可以可以用来查看ES里数据的Web。在早期logstash有一个logstash-web，但是功能比较简单。咱们这里说的kibana严格意义上说是kibana4，是在2015年重构完成的一个版本。</p><h3 id="4-2-E和L的连接"><a href="#4-2-E和L的连接" class="headerlink" title="4.2.E和L的连接"></a>4.2.E和L的连接</h3><p>其实就是把logstash收集到的数据写入es中，这里只要在logstash的启动参数上做配置就可以了，具体的配置文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vi logstash-indexer.conf</span><br><span class="line"></span><br><span class="line">input &#123;</span><br><span class="line">  file &#123;</span><br><span class="line">    type =&gt;&quot;syslog&quot;</span><br><span class="line">    path =&gt; [ &quot;/var/log/syslog&quot; ]</span><br><span class="line">  &#125;</span><br><span class="line">  syslog &#123;</span><br><span class="line">    type =&gt;&quot;syslog&quot;</span><br><span class="line">    port =&gt;&quot;5544&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">  stdout &#123; codec=&gt; rubydebug &#125;</span><br><span class="line">  elasticsearch &#123;hosts =&gt; &quot;localhost&quot; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置介绍</li></ul><p>logstash的配置里，一定要有一个input和一个output。<br>file: 这里配置输入的文件信息。<br>syslog：把logstash配置为一个可接收syslog服务器来接收file里变化的数据。<br>output里定义了两处输出，分别是<strong>stdout</strong>命令行和<strong>elasticsearch</strong>。</p><ul><li>启动</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./logstash agent -f logstash-indexer.conf &gt; nohup &amp;</span><br></pre></td></tr></table></figure><h3 id="4-3-Kibana的配置"><a href="#4-3-Kibana的配置" class="headerlink" title="4.3.Kibana的配置"></a>4.3.Kibana的配置</h3><p>只需要修改kibana.yml中es的地址就可以了。</p><h3 id="4-4-ES"><a href="#4-4-ES" class="headerlink" title="4.4.ES"></a>4.4.ES</h3><p>ES在这个架构中作为数据存储和索引的系统。无额外的特殊配置。</p><h3 id="5-小结"><a href="#5-小结" class="headerlink" title="5.小结"></a>5.小结</h3><p>ELK架构在处理运维系统的日志分析以及一些数据量不是很大的场景还是很实用的。快速、简单、易扩展，企业中使用可以考虑使用hdfs作为es的数据存储来使用，具体性能需要根据实际的业务复杂度来衡量，复杂度不是很高的海量数据统计，可优先考虑使用elk方案。</p><p>参考地址：<br><a href="http://baidu.blog.51cto.com/71938/1676798" target="_blank" rel="noopener">http://baidu.blog.51cto.com/71938/1676798</a><br><a href="https://www.gitbook.com/book/chenryn/kibana-guide-cn/details" target="_blank" rel="noopener">https://www.gitbook.com/book/chenryn/kibana-guide-cn/details</a></p>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es logstash kibana ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lua_on_Nginx</title>
      <link href="/2016/07/26/nginx-2016-07-26-Lua-on-Nginx/"/>
      <url>/2016/07/26/nginx-2016-07-26-Lua-on-Nginx/</url>
      
        <content type="html"><![CDATA[<p>Nginx的高并发是它的一大显著优势，Lua则是一门较为轻便的脚本语言。把他们组合在一起，则极大的增强了Nginx的能力（灵活性，扩展性）。<br>Nginx-Lua模块是由淘宝开发的第三方模块，使用它可以把Lua内嵌到Nginx中。</p><p>nginx  地址：<a href="http://www.nginx.org" target="_blank" rel="noopener">http://www.nginx.org</a></p><p>luajit 地址：<a href="http://luajit.org/download.html" target="_blank" rel="noopener">http://luajit.org/download.html</a></p><p>HttpLuaModule 地址：<a href="http://wiki.nginx.org/HttpLuaModule" target="_blank" rel="noopener">http://wiki.nginx.org/HttpLuaModule</a></p><h2 id="1-系统环境"><a href="#1-系统环境" class="headerlink" title="1.系统环境"></a>1.系统环境</h2><p>必须的编译环境，需要提前准备好。我这里的环境是ubuntu14.04，用的apt source是官方的源，使用163 source的时候有问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt-get install make</span><br><span class="line">apt-get install gcc</span><br><span class="line">apt-get install libpcre3 libpcre3-dev</span><br><span class="line">apt-get install libssl-dev</span><br></pre></td></tr></table></figure><h2 id="2-Lua的运行时环境配置"><a href="#2-Lua的运行时环境配置" class="headerlink" title="2.Lua的运行时环境配置"></a>2.Lua的运行时环境配置</h2><h3 id="2-1-下载Lua的运行环境"><a href="#2-1-下载Lua的运行环境" class="headerlink" title="2.1.下载Lua的运行环境"></a>2.1.下载Lua的运行环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/</span><br><span class="line"></span><br><span class="line">wget http://luajit.org/download/LuaJIT-2.0.4.tar.gz</span><br><span class="line"></span><br><span class="line">tar zxvf LuaJIT-2.0.4.tar.gz</span><br></pre></td></tr></table></figure><h3 id="2-2-编译安装"><a href="#2-2-编译安装" class="headerlink" title="2.2.编译安装"></a>2.2.编译安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/LuaJIT-2.0.4</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h2 id="3-下载Nginx的lua模块"><a href="#3-下载Nginx的lua模块" class="headerlink" title="3.下载Nginx的lua模块"></a>3.下载Nginx的lua模块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/</span><br><span class="line"></span><br><span class="line">wget https://github.com/openresty/lua-nginx-module/archive/v0.10.5.tar.gz</span><br><span class="line"></span><br><span class="line">tar zxvf v0.10.5.tar.gz</span><br></pre></td></tr></table></figure><h2 id="4-Nginx配置"><a href="#4-Nginx配置" class="headerlink" title="4.Nginx配置"></a>4.Nginx配置</h2><h3 id="4-1-下载nginx"><a href="#4-1-下载nginx" class="headerlink" title="4.1.下载nginx"></a>4.1.下载nginx</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/</span><br><span class="line"></span><br><span class="line">wget http://nginx.org/download/nginx-1.10.1.tar.gz</span><br><span class="line"></span><br><span class="line">tar zxvf nginx-1.10.1.tar.gz</span><br></pre></td></tr></table></figure><h3 id="4-2-编译安装"><a href="#4-2-编译安装" class="headerlink" title="4.2.编译安装"></a>4.2.编译安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 导入环境变</span><br><span class="line">export LUAJIT_LIB=/usr/local/lib</span><br><span class="line">export LUAJIT_INC=/usr/local/include/luajit-2.0</span><br><span class="line"></span><br><span class="line"># 安装到/usr/local/nginx-1.10.1目录下</span><br><span class="line">./configure --prefix=/usr/local/nginx-1.10.1 --add-module=../lua-nginx-module-0.10.5</span><br><span class="line"></span><br><span class="line">make -j2</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h3 id="4-3-配置"><a href="#4-3-配置" class="headerlink" title="4.3.配置"></a>4.3.配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx-1.10.1</span><br><span class="line">vi conf/nginx.conf</span><br></pre></td></tr></table></figure><p>然后在http -&gt; server下加入配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location /lua_test &#123;</span><br><span class="line">    default_type &apos;text/plain&apos;;</span><br><span class="line">    content_by_lua &apos;ngx.say(&quot;hello, ttlsa lua&quot;)&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个配置后，访问<a href="http://[hostname]:[port]/lua_test，就能访问你所定义的代码块了。" target="_blank" rel="noopener">http://[hostname]:[port]/lua_test，就能访问你所定义的代码块了。</a></p><p>如果你还想修改nginx的http端口，修改一下<strong>http.server</strong>中的<strong>listen</strong>值，就可以了。</p><h3 id="4-4-启动nginx"><a href="#4-4-启动nginx" class="headerlink" title="4.4.启动nginx"></a>4.4.启动nginx</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx-1.10.1/sbin/nginx</span><br></pre></td></tr></table></figure><h3 id="4-5-验证"><a href="#4-5-验证" class="headerlink" title="4.5.验证"></a>4.5.验证</h3><p>查看端口的运行情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~# netstat -anp|grep 4002</span><br><span class="line">tcp        0      0 0.0.0.0:4002            0.0.0.0:*               LISTEN      1736/nginx</span><br></pre></td></tr></table></figure><p>或者直接请求4002端口。（我这里使用的是4002端口，你可以根据需要，设置为你需要的。）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:/usr/local/nginx-1.10.1/sbin# curl http://192.168.1.160:4002/lua_test</span><br><span class="line">hello, ttlsa lua</span><br></pre></td></tr></table></figure><h2 id="5-FAQ"><a href="#5-FAQ" class="headerlink" title="5.FAQ"></a>5.FAQ</h2><h3 id="5-1-缺少pcre3"><a href="#5-1-缺少pcre3" class="headerlink" title="5.1.缺少pcre3"></a>5.1.缺少pcre3</h3><ul><li>错误log</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./configure: error: the HTTP rewrite module requires the PCRE library.</span><br><span class="line">You can either disable the module by using --without-http_rewrite_module</span><br><span class="line">option, or install the PCRE library into the system, or build the PCRE library</span><br><span class="line">statically from the source with nginx by using --with-pcre=&lt;path&gt; option.</span><br></pre></td></tr></table></figure><ul><li>解决办法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install libpcre3 libpcre3-dev</span><br></pre></td></tr></table></figure><h3 id="5-2-缺少libssl"><a href="#5-2-缺少libssl" class="headerlink" title="5.2.缺少libssl"></a>5.2.缺少libssl</h3><ul><li>错误log</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./configure: error: the HTTP gzip module requires the zlib library.</span><br><span class="line">You can either disable the module by using --without-http_gzip_module</span><br><span class="line">option, or install the zlib library into the system, or build the zlib library</span><br><span class="line">statically from the source with nginx by using --with-zlib=&lt;path&gt; option.</span><br></pre></td></tr></table></figure><ul><li>解决办法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install libssl-dev</span><br></pre></td></tr></table></figure><p>参考地址：<br><a href="http://www.ttlsa.com/nginx/nginx-modules-ngx_lua/" target="_blank" rel="noopener">http://www.ttlsa.com/nginx/nginx-modules-ngx_lua/</a></p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx lua </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Install_hadoop_cluster_on_CM</title>
      <link href="/2016/07/23/hadoop-2016-07-23-Install-hadoop-cluster-on-CM/"/>
      <url>/2016/07/23/hadoop-2016-07-23-Install-hadoop-cluster-on-CM/</url>
      
        <content type="html"><![CDATA[<p>对于Hadoop这个复杂的大系统，我们期望能有一个平台，可以对Hadoop的每一个部件都能够进行安装部署，以及细颗粒度的监控。Apache发行版的Hadoop可以使用Ambari；Cloudera公司的CDH版本Hadoop则可以使用Cloudera Manager（后面简称为CM）来统一管理和部署。咱们这里的操作系统使用的是ubuntu14.04.</p><h2 id="1-Cloudera-Manager安装前准备"><a href="#1-Cloudera-Manager安装前准备" class="headerlink" title="1.Cloudera Manager安装前准备"></a>1.Cloudera Manager安装前准备</h2><h3 id="1-1-操作系统的优化"><a href="#1-1-操作系统的优化" class="headerlink" title="1.1. 操作系统的优化"></a>1.1. 操作系统的优化</h3><ul><li>打开的最大文件数<br>修改当前的session配置(临时)：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ulimit -SHn 65535</span><br></pre></td></tr></table></figure><p>永久修改（需要重启服务器）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo echo &quot;ulimit -SHn 65535&quot; &gt;&gt; /etc/rc.local</span><br><span class="line">sudo chmod +x /etc/rc.local</span><br></pre></td></tr></table></figure><ul><li>打开的组大文件句柄数<br>临时配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 一般可不做修改，这是临时配置</span><br><span class="line">sudo echo 2000000 &gt; /proc/sys/fs/file-max</span><br></pre></td></tr></table></figure><p>永久配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;echo 2000000 &gt; /proc/sys/fs/file-max&quot; &gt;&gt; /etc/rc.local</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo echo &quot;fs.file-max = 2000000&quot; &gt;&gt;/etc/sysctl.conf #推荐</span><br><span class="line">#使文件生效sudo /sbin/sysctl -p</span><br></pre></td></tr></table></figure><ul><li>打开的最大网络连接数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo echo &quot;net.core.somaxconn = 2048&quot; &gt;&gt;/etc/sysctl.conf</span><br><span class="line">sudo /sbin/sysctl -p</span><br></pre></td></tr></table></figure><ul><li>关闭selinux</li></ul><p>ubuntu默认是不安装的selinux的，所以这里可以直接忽略。</p><ul><li>配置ntp</li></ul><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install ntp</span><br></pre></td></tr></table></figure><p>如果只需要保证集群内部的各个server之间时间保持同步，只需要在需要同步的机器上配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 */12 * * * ntpdate dt-vt-154</span><br></pre></td></tr></table></figure><p>如果需要时间和互联网的时间保持一致，那么就需要在提供ntp server的机器上配置上层ntpserver:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server [ntpserver_01]</span><br><span class="line">server [ntpserver_02]</span><br><span class="line">server [ntpserver_03]</span><br></pre></td></tr></table></figure><ul><li>关闭防火墙</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw disable #关闭防火墙</span><br><span class="line">apt-get remove iptables #卸载防火墙</span><br></pre></td></tr></table></figure><ul><li>配置好hosts映射文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/hosts</span><br><span class="line"></span><br><span class="line">192.168.1.151   dt-vt-151</span><br><span class="line">192.168.1.152   dt-vt-152</span><br><span class="line">192.168.1.153   dt-vt-153</span><br><span class="line">192.168.1.154   dt-vt-154</span><br></pre></td></tr></table></figure><ul><li>Java环境配置</li></ul><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /opt/java</span><br><span class="line">cd /opt/java</span><br><span class="line">#下载到安装文件到这个目录</span><br></pre></td></tr></table></figure><p>环境配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br><span class="line"></span><br><span class="line">export JAVA_HOME=/opt/java/jdk1.7.0_79</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure><p>执行下面命令，使当前的session生效：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h3 id="1-2-数据的存放"><a href="#1-2-数据的存放" class="headerlink" title="1.2. 数据的存放"></a>1.2. 数据的存放</h3><p>在使用CM来管理集群的时候，会涉及到大量的数据存储，例如Hadoop的主机列表信息，主机的配置信息，负载信息，各个模块的运行时状态等等。<br>咱们这里使用mysql来作为CM的数据存储，这里不仅是CM，Hadoop中的Hive等模块的元数据，都来使用mysql存储。</p><ul><li>安装mysql</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server</span><br></pre></td></tr></table></figure><p>我这里安装完后是5.5.49.</p><ul><li>关闭mysql，备份配置文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/mysql stop</span><br></pre></td></tr></table></figure><p>把/var/lib/mysql/ib_logfile0和/var/lib/mysql/ib_logfile1拷贝至某个配置目录中，例如：/var/lib/mysql/bak</p><ul><li>配置InnoDB引擎</li></ul><p>务必使用InnoDB引擎引擎，若是使用MyISAM引擎CM将启动不了。在Mysql的命令行中运行下面的命令，来查看你的Mysql使用了哪个引擎。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show table status;</span><br></pre></td></tr></table></figure><ul><li>配置mysql的innodb刷写模式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innodb_flush_method=O_DIRECT</span><br></pre></td></tr></table></figure><p>即：配置Innodb的刷写模式为异步写模式。</p><ul><li>修改mysql的最大连接数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max_connections=1550</span><br></pre></td></tr></table></figure><p>在这里，你应该会考虑配置该数值为多少比较合适。<br>当集群规模<strong>小于50台</strong>的时候，假设该库中有N个数据库是用来服务于Hadoop的，那么max_connections可以设置为100<em>N+50。例如：Cloudera Manager Server, Activity Monitor, Reports Manager, Cloudera Navigator, 和 Hive metastore都是使用mysql的，那么就配置max_connections为550.<br>当集群规模<em>*大于50台</em></em>的时候，建议每个数据库只存放在一台机器上。</p><ul><li>配置文件样例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">transaction-isolation = READ-COMMITTED</span><br><span class="line"># Disabling symbolic-links is recommended to prevent assorted security risks;</span><br><span class="line"># to do so, uncomment this line:</span><br><span class="line"># symbolic-links = 0</span><br><span class="line"></span><br><span class="line">key_buffer = 16M</span><br><span class="line">key_buffer_size = 32M</span><br><span class="line">max_allowed_packet = 32M</span><br><span class="line">thread_stack = 256K</span><br><span class="line">thread_cache_size = 64</span><br><span class="line">query_cache_limit = 8M</span><br><span class="line">query_cache_size = 64M</span><br><span class="line">query_cache_type = 1</span><br><span class="line"></span><br><span class="line">max_connections = 1550</span><br><span class="line">#expire_logs_days = 10</span><br><span class="line">#max_binlog_size = 100M</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># InnoDB settings</span><br><span class="line">innodb_file_per_table = 1</span><br><span class="line">innodb_flush_log_at_trx_commit  = 2</span><br><span class="line">innodb_log_buffer_size = 64M</span><br><span class="line">innodb_buffer_pool_size = 4G</span><br><span class="line">innodb_thread_concurrency = 8</span><br><span class="line">innodb_flush_method = O_DIRECT</span><br><span class="line">innodb_log_file_size = 512M</span><br><span class="line"></span><br><span class="line">[mysqld_safe]</span><br><span class="line">log-error=/var/log/mysqld.log</span><br><span class="line">pid-file=/var/run/mysqld/mysqld.pid</span><br></pre></td></tr></table></figure><ul><li>启动mysql</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/mysql start</span><br></pre></td></tr></table></figure><p>打开开机自启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install sysv-rc-conf</span><br><span class="line">sysv-rc-conf mysql on</span><br></pre></td></tr></table></figure><ul><li>安装mysql-jdbc驱动</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install libmysql-java</span><br></pre></td></tr></table></figure><ul><li>mysql远程连接</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/mysql/my.cnf</span><br><span class="line"></span><br><span class="line">bind-address = 0.0.0.0</span><br></pre></td></tr></table></figure><ul><li>給相关服务创建mysql的数据库</li></ul><p>相关列表如下：</p><div class="table-container"><table><thead><tr><th>Role</th><th>Database</th><th>User</th><th>Password</th></tr></thead><tbody><tr><td>Activity Monitor</td><td>amon</td><td>amon</td><td>amon_password</td></tr><tr><td>Reports Manager</td><td>rman</td><td>rman</td><td>rman_password</td></tr><tr><td>Hive Metastore Server</td><td>hive_metastore</td><td>hive</td><td>hive_password</td></tr><tr><td>Sentry Server</td><td>sentry</td><td>sentry</td><td>sentry_password</td></tr><tr><td>Cloudera Navigator Audit Server</td><td>nav</td><td>nav</td><td>nav_password</td></tr><tr><td>Cloudera Navigator Metadata Server</td><td>navms</td><td>navms</td><td>navms_password</td></tr><tr><td>OOZIE</td><td>oozie</td><td>oozie</td><td>oozie</td></tr></tbody></table></div><p>建表语句格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create database database DEFAULT CHARACTER SET utf8;</span><br><span class="line">grant all on database.* TO &apos;user&apos;@&apos;%&apos; IDENTIFIED BY &apos;password&apos;;</span><br></pre></td></tr></table></figure><p>建表语句如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">create database amon DEFAULT CHARACTER SET utf8;</span><br><span class="line">grant all on amon.* TO &apos;amon&apos;@&apos;%&apos; IDENTIFIED BY &apos;amon&apos;;</span><br><span class="line"></span><br><span class="line">create database rmon DEFAULT CHARACTER SET utf8;</span><br><span class="line">grant all on rmon.* TO &apos;rmon&apos;@&apos;%&apos; IDENTIFIED BY &apos;rmon&apos;;</span><br><span class="line"></span><br><span class="line">create database hive_metastore DEFAULT CHARACTER SET utf8;</span><br><span class="line">grant all on hive_metastore.* TO &apos;hive&apos;@&apos;%&apos; IDENTIFIED BY &apos;hive&apos;;</span><br><span class="line"></span><br><span class="line">create database sentry DEFAULT CHARACTER SET utf8;</span><br><span class="line">grant all on sentry.* TO &apos;sentry&apos;@&apos;%&apos; IDENTIFIED BY &apos;sentry&apos;;</span><br><span class="line"></span><br><span class="line">create database nav DEFAULT CHARACTER SET utf8;</span><br><span class="line">grant all on nav.* TO &apos;nav&apos;@&apos;%&apos; IDENTIFIED BY &apos;nav&apos;;</span><br><span class="line"></span><br><span class="line">create database navms DEFAULT CHARACTER SET utf8;</span><br><span class="line">grant all on navms.* TO &apos;navms&apos;@&apos;%&apos; IDENTIFIED BY &apos;navms&apos;;</span><br><span class="line"></span><br><span class="line">create database oozie DEFAULT CHARACTER SET utf8;</span><br><span class="line">grant all on oozie.* TO &apos;oozie&apos;@&apos;%&apos; IDENTIFIED BY &apos;oozie&apos;;</span><br></pre></td></tr></table></figure><h2 id="2-开始安装Cloudera-Manager"><a href="#2-开始安装Cloudera-Manager" class="headerlink" title="2.开始安装Cloudera Manager"></a>2.开始安装Cloudera Manager</h2><h3 id="2-1-下载CM"><a href="#2-1-下载CM" class="headerlink" title="2.1.下载CM"></a>2.1.下载CM</h3><p>可以下载安装最新版本的CM：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://archive.cloudera.com/cm5/installer/latest/cloudera-manager-installer.bin</span><br></pre></td></tr></table></figure><p>当然，如果你想选择安装其它版本，可以访问下面的地址，并选择下载你所需要的版本(cm5+)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://archive.cloudera.com/cm5/installer/</span><br></pre></td></tr></table></figure><p>我这里使用的是版本是5.4.10，从release note上看，目前cdh5.4.10是最稳当的版本。我下载到了本地路径如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/cm/cloudera-manager-installer.bin</span><br></pre></td></tr></table></figure><p>修改权限，使其可以被执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod u+x cloudera-manager-installer.bin</span><br></pre></td></tr></table></figure><h3 id="2-2-配置私有软件仓库-如果不使用私有仓库，这里可以直接跳过"><a href="#2-2-配置私有软件仓库-如果不使用私有仓库，这里可以直接跳过" class="headerlink" title="2.2.配置私有软件仓库(如果不使用私有仓库，这里可以直接跳过)"></a>2.2.配置私有软件仓库(如果不使用私有仓库，这里可以直接跳过)</h3><h4 id="2-2-1-创建一个临时可以使用的远程仓库"><a href="#2-2-1-创建一个临时可以使用的远程仓库" class="headerlink" title="2.2.1.创建一个临时可以使用的远程仓库"></a>2.2.1.创建一个临时可以使用的远程仓库</h4><p>这个配置是在安装cloudera-manager-server的时候才会用的。这里的仓库是使用传统的http协议，通过网络传输数据的。可以去<a href="http://archive.cloudera.com/cm5/repo-as-tarball/下载你所需要的cdh包。" target="_blank" rel="noopener">http://archive.cloudera.com/cm5/repo-as-tarball/下载你所需要的cdh包。</a></p><ul><li>解压安装包</li></ul><p>下载完安装包后，解压到某个目录下，我这里下载的是cm5.4.10-ubuntu14-04.tar.gz这个版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf cm5.4.10-ubuntu14-04.tar.gz</span><br><span class="line">chmod -R ugo+rX /opt/cm/local_resp/cm</span><br></pre></td></tr></table></figure><p>解压后的目录是/opt/cm/local_resp/cm</p><ul><li>启动Http server</li></ul><p>启动一个Http服务，使可以通过网络来访问仓库中的数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/cm/</span><br><span class="line">python -m SimpleHTTPServer 8900</span><br></pre></td></tr></table></figure><p>我这里使用的是8900，你可以根据需要，使用指定的端口。</p><ul><li>验证</li></ul><p>可在浏览器中访问地址<a href="http://server:8900/cm，如果可以正常访问，并且能看到相对应的文件列表，则表示正常启动。" target="_blank" rel="noopener">http://server:8900/cm，如果可以正常访问，并且能看到相对应的文件列表，则表示正常启动。</a></p><h4 id="2-2-2-配置安装CM所需要的私有仓库"><a href="#2-2-2-配置安装CM所需要的私有仓库" class="headerlink" title="2.2.2.配置安装CM所需要的私有仓库"></a>2.2.2.配置安装CM所需要的私有仓库</h4><p>在目录<strong>/etc/apt/sources.list.d/</strong>下创建文件<strong>my-private-cloudera-repo.list</strong>，并写入配置把这个文件和上面新建的仓库关联到一起：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/apt/sources.list.d/my-private-cloudera-repo.list</span><br><span class="line"></span><br><span class="line">deb [arch=amd64] http://192.168.1.154:8900/cm/ trusty-cm5.4.10 contrib</span><br></pre></td></tr></table></figure><p>执行下面的命令，使得上面的配置生效：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><h3 id="2-2-3-配置使用CM安装节点时会用到的仓库"><a href="#2-2-3-配置使用CM安装节点时会用到的仓库" class="headerlink" title="2.2.3.配置使用CM安装节点时会用到的仓库"></a>2.2.3.配置使用CM安装节点时会用到的仓库</h3><p>可以下载地址：<a href="http://archive.cloudera.com/cm5/ubuntu/trusty/amd64/cm/" target="_blank" rel="noopener">http://archive.cloudera.com/cm5/ubuntu/trusty/amd64/cm/</a> 里的所有内容到本地，然后使用<strong>2.2.1</strong>中的方式来启动一个Http server。</p><h3 id="2-2-4-配置节点的JDK"><a href="#2-2-4-配置节点的JDK" class="headerlink" title="2.2.4.配置节点的JDK"></a>2.2.4.配置节点的JDK</h3><p>这一步是可选的，如果你不想每台机器都去手动安装，也可以在后边使用CM来批量安装。</p><h3 id="2-3-开始安装CM"><a href="#2-3-开始安装CM" class="headerlink" title="2.3.开始安装CM"></a>2.3.开始安装CM</h3><ul><li>连接互联网安装</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./cloudera-manager-installer.bin</span><br></pre></td></tr></table></figure><p>或者</p><ul><li>使用本地仓库安装</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./cloudera-manager-installer.bin --skip_repo_package=1</span><br></pre></td></tr></table></figure><p>然后就是一路的YES &amp; NEXT，最后安装完成，CM默认的端口是7180，账户名和密码都是7180.</p><h3 id="2-4-使用CM安装集群"><a href="#2-4-使用CM安装集群" class="headerlink" title="2.4.使用CM安装集群"></a>2.4.使用CM安装集群</h3><p>首次登陆CM管理界面的时候，会出现一个集群安装向导。我这里选择的是免费版本。然后大概有如下几步：</p><ul><li><p>使用ip或者hostname来搜索主机，搜索到之后，go to next step.</p></li><li><p>看到如下图片的时候，如果你已经在前面的主机中安装好了JDK，那么这里可以不选，如果没有，则必须选择。</p></li></ul><p><img src="http://leocook-blog.test.upcdn.net/cm-02.png" alt="CM JDK" title="cm jdk"></p><ul><li>选择是否使用单用户模式（Single User Mode）</li></ul><p>不使用该模式的话，HDFS服务会使用“hdfs”账户来启动，Hbase的Region Server会使用“hbase”账户来启动。使用了该模式之后，所有的服务都是使用同一个账户去启动的。<br>这里主要看集群的使用场景，如果其中涉及到不同的模块是由不同人员来运维管理的话，我建议还是不要使用单用户模式了。但如果集群是统一由一个人员来管理，那么选择使用单用户模式可能会方便很多。<br>我这里没有使用单用户模式。</p><ul><li>配置好SSH登录</li></ul><p><img src="http://leocook-blog.test.upcdn.net/cm-03.png" alt="配置ssh登录信息" title="输入密码"></p><ul><li><p>配置好SSH后开始连入主机，安装jdk和cm-agent<br><img src="http://leocook-blog.test.upcdn.net/cm-04.png" alt="install cm agent" title="install cm agent"></p></li><li><p>安装完成，此时cm-agent就已经安装好了，随时都可以使用cm-server控制安装Hadoop的相关组件,完成后先不要点击进入下一步，继续看下面。<br><img src="http://leocook-blog.test.upcdn.net/cm-05.png" alt="cm agent ok" title="cm agent ok"></p></li><li><p>分发Hadoop的安装包</p></li></ul><p>去地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://archive.cloudera.com/cdh5/parcels/5.4.10/</span><br></pre></td></tr></table></figure><p>下载：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CDH-5.4.10-1.cdh5.4.10.p0.16-trusty.parcel</span><br><span class="line">CDH-5.4.10-1.cdh5.4.10.p0.16-trusty.parcel.sha1</span><br><span class="line">manifest.json</span><br></pre></td></tr></table></figure><p>下载完成后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">把&quot;CDH-5.4.10-1.cdh5.4.10.p0.16-trusty.parcel.sha1&quot;重命名为&quot;CDH-5.4.10-1.cdh5.4.10.p0.16-trusty.parcel.sha&quot;</span><br></pre></td></tr></table></figure><p>并移到目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/cloudera/parcel-repo</span><br></pre></td></tr></table></figure><p>然后在cm-serve点击进入下一页，将会看到如下图：<br><img src="http://leocook-blog.test.upcdn.net/cm-06.png" alt="cm parcel distributed" title="cm parcel distributed"><br>因为你已经把安装包下载好，并且放入到/opt/cloudera/parcel-repo（默认的目录）里面，所以这里的<strong>Download</strong>自然就是100%，<strong>Distributed</strong>是把安装包从cm-server往集群中各个节点分发的过程，<strong>Unpacked</strong>是表示各个节点的上安装包的解压情况进度，前面都OK后，<strong>Activated</strong>自然就可以了，表示安装包已经部署好了，可以随时进行安装。</p><ul><li><p>选择安装Hadoop的那些组件之后，会在这里显示各个组件部署的主机地址。<br><img src="http://leocook-blog.test.upcdn.net/cm-07.png" alt="hosts choose" title="hosts choose"></p></li><li><p>这里配置的是一些组件使用的mysql信息：<br><img src="http://leocook-blog.test.upcdn.net/cm-08.png" alt="hadoop mysql config" title="hadoop mysql config"></p></li><li><p>然后可以配置一些服务的的具体参数<br><img src="http://leocook-blog.test.upcdn.net/cm-09.png" alt="hadoop config" title="hadoop config"></p></li><li><p>参数配置都没问题后，开始执行安装。<br><img src="http://leocook-blog.test.upcdn.net/cm-10.png" alt="hadoop install" title="hadoop install"></p></li><li><p>安装完成后。<br><img src="http://leocook-blog.test.upcdn.net/cm-11.jpeg" alt="install success" title="install success"><br>PS：我这里的Kafka是后来安装上去的，默认Hadoop的parcel包是没有kafka的。</p></li></ul><h2 id="3-注意事项"><a href="#3-注意事项" class="headerlink" title="3.注意事项"></a>3.注意事项</h2><h3 id="3-1-主机的Host配置不能出差错"><a href="#3-1-主机的Host配置不能出差错" class="headerlink" title="3.1.主机的Host配置不能出差错"></a>3.1.主机的Host配置不能出差错</h3><p>我就配置错过host，期间走了一些弯路，主要表现在添加完主机之后，Hosts下的主机名都是localhost。</p><h3 id="3-2-cm-agent安装失败重试时"><a href="#3-2-cm-agent安装失败重试时" class="headerlink" title="3.2.cm-agent安装失败重试时"></a>3.2.cm-agent安装失败重试时</h3><p>如果在重试的过程中出现了一直等待，或者cm-agent端口被占用的情况，大概有下面的几种情况：</p><ul><li>锁文件没有删除</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /tmp/.scm_prepare_node.lock</span><br></pre></td></tr></table></figure><ul><li>端口被占用 <strong>9000/9001</strong></li></ul><p>这种情况是部分进程没有关闭成功，找到端口对应的进程号，然后然后使用<strong>kill -9停止进程</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat -nap | grep 9000</span><br><span class="line">netstat -nap | grep 9001</span><br></pre></td></tr></table></figure><p>主要是<strong>supervisor</strong>和<strong>cm-agent</strong>进程</p><h2 id="4-会用到的一些地址总结"><a href="#4-会用到的一些地址总结" class="headerlink" title="4.会用到的一些地址总结"></a>4.会用到的一些地址总结</h2><h3 id="4-1-Mysql的相关配置"><a href="#4-1-Mysql的相关配置" class="headerlink" title="4.1.Mysql的相关配置"></a>4.1.Mysql的相关配置</h3><p><a href="http://www.cloudera.com/documentation/enterprise/5-4-x/topics/cm_ig_mysql.html" target="_blank" rel="noopener">http://www.cloudera.com/documentation/enterprise/5-4-x/topics/cm_ig_mysql.html</a></p><h3 id="4-2-创建本地仓库"><a href="#4-2-创建本地仓库" class="headerlink" title="4.2.创建本地仓库"></a>4.2.创建本地仓库</h3><ul><li>For CM</li></ul><p><a href="http://www.cloudera.com/documentation/enterprise/5-4-x/topics/cm_ig_create_local_package_repo.html" target="_blank" rel="noopener">http://www.cloudera.com/documentation/enterprise/5-4-x/topics/cm_ig_create_local_package_repo.html</a></p><ul><li>For parcel</li></ul><p><a href="http://www.cloudera.com/documentation/enterprise/5-4-x/topics/cm_ig_create_local_parcel_repo.html" target="_blank" rel="noopener">http://www.cloudera.com/documentation/enterprise/5-4-x/topics/cm_ig_create_local_parcel_repo.html</a></p><h3 id="4-3-parcel的下载地址"><a href="#4-3-parcel的下载地址" class="headerlink" title="4.3.parcel的下载地址"></a>4.3.parcel的下载地址</h3><p><a href="http://archive.cloudera.com/cdh5/parcels/" target="_blank" rel="noopener">http://archive.cloudera.com/cdh5/parcels/</a><br><a href="http://archive.cloudera.com/kafka/parcels/" target="_blank" rel="noopener">http://archive.cloudera.com/kafka/parcels/</a></p><h3 id="4-4-cm的下载地址"><a href="#4-4-cm的下载地址" class="headerlink" title="4.4.cm的下载地址"></a>4.4.cm的下载地址</h3><p>加压后可以直接运行<br><a href="http://archive.cloudera.com/cm5/cm/5/" target="_blank" rel="noopener">http://archive.cloudera.com/cm5/cm/5/</a></p><h2 id="5-附件"><a href="#5-附件" class="headerlink" title="5.附件"></a>5.附件</h2><p>博文中的图片是压缩后的，清晰度比较低，原图可以访问下面的地址：</p><p>链接: <a href="http://pan.baidu.com/s/1cmiBCE" target="_blank" rel="noopener">http://pan.baidu.com/s/1cmiBCE</a> 密码: rnmw</p>]]></content>
      
      
      <categories>
          
          <category> hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cm hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tez系列第三篇-Tez和oozie整合</title>
      <link href="/2016/05/17/tez-2016-05-17-Tez%E7%B3%BB%E5%88%97%E7%AC%AC%E4%B8%89%E7%AF%87-Tez%E5%92%8Coozie%E6%95%B4%E5%90%88/"/>
      <url>/2016/05/17/tez-2016-05-17-Tez%E7%B3%BB%E5%88%97%E7%AC%AC%E4%B8%89%E7%AF%87-Tez%E5%92%8Coozie%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2 id="1-完成上一篇的基础的相关配置"><a href="#1-完成上一篇的基础的相关配置" class="headerlink" title="1.完成上一篇的基础的相关配置"></a>1.完成上一篇的基础的相关配置</h2><h2 id="2-拷贝Tez的依赖Jar包到OOZIE的HDFS共享目录下"><a href="#2-拷贝Tez的依赖Jar包到OOZIE的HDFS共享目录下" class="headerlink" title="2.拷贝Tez的依赖Jar包到OOZIE的HDFS共享目录下"></a>2.拷贝Tez的依赖Jar包到OOZIE的HDFS共享目录下</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -copyFromLocal *.jar /user/oozie/share/lib/lib_20150722203343/hive/</span><br><span class="line">hadoop fs -copyFromLocal /usr/lib/tez/lib/*.jar /user/oozie/share/lib/lib_20150722203343/hive/</span><br></pre></td></tr></table></figure><h2 id="3-修改Jar的权限"><a href="#3-修改Jar的权限" class="headerlink" title="3.修改Jar的权限"></a>3.修改Jar的权限</h2><p>保证oozie有权限读取、使用Jar包:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -chown oozie:oozie /user/oozie/share/lib/lib_20150722203343/hive/*.jar</span><br></pre></td></tr></table></figure></p><h2 id="4-是配置生效"><a href="#4-是配置生效" class="headerlink" title="4.是配置生效"></a>4.是配置生效</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">oozie admin -sharelibupdate</span><br><span class="line">oozie admin -shareliblist hive</span><br></pre></td></tr></table></figure><p>或者重启oozie也可以</p><h2 id="5-在workflow里使用Tez"><a href="#5-在workflow里使用Tez" class="headerlink" title="5.在workflow里使用Tez"></a>5.在workflow里使用Tez</h2><p>这里咱们只是让oozie处理hive作业时使用Tez引擎，具体配置如下.</p><h3 id="5-1-使单个workflow里的hive都用tez"><a href="#5-1-使单个workflow里的hive都用tez" class="headerlink" title="5.1.使单个workflow里的hive都用tez"></a>5.1.使单个workflow里的hive都用tez</h3><p>在作业流的hive-site.xml中加入下面的配置，即可使整个作业里的hive都使用Tez引擎：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;hive.execution.engine&lt;/name&gt;</span><br><span class="line">&lt;value&gt;tez&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;tez.lib.uris&lt;/name&gt;</span><br><span class="line">&lt;value&gt;$&#123;nameNode&#125;/tmp/apps/tez-0.8.2/,$&#123;nameNode&#125;/tmp/apps/tez-0.8.2/lib&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;tez.use.cluster.hadoop-libs&lt;/name&gt;</span><br><span class="line">&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><h3 id="5-2-使单个workflow里的单个hive都用tez"><a href="#5-2-使单个workflow里的单个hive都用tez" class="headerlink" title="5.2.使单个workflow里的单个hive都用tez"></a>5.2.使单个workflow里的单个hive都用tez</h3><p>上面的配置不用加，在workflow.xml里的hive节点添加如下配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;hive.execution.engine&lt;/name&gt;</span><br><span class="line">&lt;value&gt;tez&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;tez.lib.uris&lt;/name&gt;</span><br><span class="line">&lt;value&gt;$&#123;nameNode&#125;/tmp/apps/tez-0.8.2/,$&#123;nameNode&#125;/tmp/apps/tez-0.8.2/lib&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;tez.use.cluster.hadoop-libs&lt;/name&gt;</span><br><span class="line">&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><p>hive.execution.engine属性可以不添加，在hive的脚本中的第一行添加:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set hive.execution.engine=tez;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> tez </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hadoop tez oozie hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tez系列第二篇-hive_on_tez</title>
      <link href="/2016/05/09/tez-2016-05-09-Tez%E7%B3%BB%E5%88%97%E7%AC%AC%E4%BA%8C%E7%AF%87-hive-on-tez/"/>
      <url>/2016/05/09/tez-2016-05-09-Tez%E7%B3%BB%E5%88%97%E7%AC%AC%E4%BA%8C%E7%AF%87-hive-on-tez/</url>
      
        <content type="html"><![CDATA[<p>本文主要描述Tez的安装配置，以及使用Tez作为Hive的计算引擎时的相关配置。</p><h2 id="1-安装配置Tez"><a href="#1-安装配置Tez" class="headerlink" title="1.安装配置Tez"></a>1.安装配置Tez</h2><h3 id="1-1-环境要求"><a href="#1-1-环境要求" class="headerlink" title="1.1.环境要求"></a>1.1.环境要求</h3><ul><li>CDH5.4.4(hadoop2.6.0)</li><li>编译环境：gcc, gcc-c++, make, build</li><li>Nodejs、npm (Tez-ui需要)</li><li>Git</li><li>pb2.5.0</li><li>maven3</li><li>Tez0.8.2</li></ul><h3 id="1-2-集群准备"><a href="#1-2-集群准备" class="headerlink" title="1.2.集群准备"></a>1.2.集群准备</h3><p>以及安装完成的cdh5.4.4集群。</p><h3 id="1-3-编译环境准备"><a href="#1-3-编译环境准备" class="headerlink" title="1.3. 编译环境准备"></a>1.3. 编译环境准备</h3><p>安装gcc, gcc-c++, make, build<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc gcc-c++ libstdc++-devel make build</span><br></pre></td></tr></table></figure></p><h3 id="1-4-Nodejs、npm"><a href="#1-4-Nodejs、npm" class="headerlink" title="1.4. Nodejs、npm"></a>1.4. Nodejs、npm</h3><p>下载源码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget http://nodejs.org/dist/v0.8.14/node-v0.8.14.tar.gz</span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line">解压后编译:</span><br></pre></td></tr></table></figure></p><p>./configure<br>make &amp;&amp; make install<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">查看nodejs和npm的版本:</span><br></pre></td></tr></table></figure></p><p>node —version<br>npm —version<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">笔者的安装环境里，node的版本是v0.12.9，npm的版本是2.14.9</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 1.5.安装GIT</span><br><span class="line">下载git:</span><br></pre></td></tr></table></figure></p><p><a href="https://git-scm.com/download" target="_blank" rel="noopener">https://git-scm.com/download</a><br>笔者选择的是1.7.3版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">解压后编译:</span><br></pre></td></tr></table></figure></p><p>./configure<br>make<br>make install<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 1.6. ProtocolBuffer2.5.0</span><br><span class="line">- 下载pb源码</span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/google/protobuf/releases/tag/v2.5.0" target="_blank" rel="noopener">https://github.com/google/protobuf/releases/tag/v2.5.0</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 编译安装pb</span><br></pre></td></tr></table></figure></p><p>./configure -prefix=/opt/protoc/<br>make &amp;&amp; make install<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 配置环境变量</span><br></pre></td></tr></table></figure></p><p>export PROTOC_HOME=/opt/protoc<br>export PATH=$PATH:$PROTOC_HOME/bin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 检验</span><br></pre></td></tr></table></figure></p><p>protoc —version<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">查看pb的版本是不是2.5.0，笔者这里显示为 **libprotoc 2.5.0**</span><br><span class="line"></span><br><span class="line">### 1.7.编译&amp;安装Tez</span><br><span class="line">- 下载Tez   </span><br><span class="line">Tez所有版本列表在者：</span><br></pre></td></tr></table></figure></p><p><a href="http://tez.apache.org/releases/index.html" target="_blank" rel="noopener">http://tez.apache.org/releases/index.html</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">笔者这里下载的是0.8.2版本。</span><br><span class="line"></span><br><span class="line">- 解压修改配置    </span><br><span class="line"></span><br><span class="line">vi pom.xml</span><br></pre></td></tr></table></figure></p><p><hadoop.version>2.6.0-cdh5.4.4&lt;/hadoop.version&gt;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> </span><br><span class="line">vi tez-ui/pom.xml</span><br></pre></td></tr></table></figure></hadoop.version></p><p><nodeversion>v0.12.9</nodeversion></p><p><npmversion>2.14.9</npmversion><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 开始编译</span><br></pre></td></tr></table></figure></p><p>mvn clean package -DskipTests=true -Dmaven.javadoc.skip=true  -Dfrontend-maven-plugin.version=0.0.23<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;编译的过程中可能会发生错误，我这边由于网络故障，经常会出现node.gz.tar文件下载失败。最后还是编译成功了。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 2. 开始整合Hive和Tez</span><br><span class="line"></span><br><span class="line">### 2.1. 查看编译完成的目标目录结构</span><br></pre></td></tr></table></figure></p><p>[wulin@lf-R710-29 target]$ ls<br>archive-tmp  maven-archiver  tez-0.8.2  tez-0.8.2-minimal  tez-0.8.2-minimal.tar.gz  tez-0.8.2.tar.gz  tez-dist-0.8.2-tests.jar<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 2.1. 拷贝tez-0.8.2-minimal目录至HDFS</span><br></pre></td></tr></table></figure></p><p>hdfs dfs -put tez-0.8.2-minimal /tmp/tez-dir/<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">先拷贝到tmp目录做测试，成功运行后在拷贝到正式目录。</span><br><span class="line"></span><br><span class="line">### 2.2. 拷贝对应以来jar</span><br><span class="line">把hadoop-mapreduce-client-common-2.6.0-cdh5.4.4.jar到hdfs的/tmp/tez-dir/tez-0.8.2-minimal目录</span><br><span class="line"></span><br><span class="line">### 2.3. 把tez-0.8.2拷贝到服务器本地部署的目录</span><br></pre></td></tr></table></figure></p><p>cp -r tez-0.8.2 /opt/<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 2.4. 进入部署的目录创建conf/tez-site.xml</span><br></pre></td></tr></table></figure></p><p>&lt;?xml version=”1.0” encoding=”UTF-8”?&gt;<br>&lt;?xml-stylesheet type=”text/xsl” href=”configuration.xsl”?&gt;</p><p><configuration><br> <property><br>   <name>tez.lib.uris</name><br>   <value>${fs.defaultFS}/tmp/tez-dir/tez-0.8.2-minimal,${fs.defaultFS}/tmp/tez-dir/tez-0.8.2-minimal/lib</value> </property><br> <property><br>   <name>tez.use.cluster.hadoop-libs</name><br>   <value>true</value> </property></configuration><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;注：tez.lib.uris参数值，是之前上传到hdfs目录的tez包，它必须是tez-0.8.2-minimal目录，而不能是tez-0.8.2目录。（如果有谁使用tez-0.8.2目录部署成功的话，可以告诉我，谢谢！）。根据官网的说明，使用tez-0.8.2-minimal包的时候，务必设置tez.use.cluster.hadoop-libs属性为true。</span><br><span class="line"></span><br><span class="line">### 2.4. 把Tez加入到环境变量</span><br></pre></td></tr></table></figure></p><p>export TEZ_JARS=/opt/tez-0.8.2-minimal<br>export TEZ_CONF_DIR=$TEZ_JARS/conf<br>export HADOOP_CLASSPATH=${TEZ_CONF_DIR}:${TEZ_JARS}/<em>:${TEZ_JARS}/lib/</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;注：经笔者的测试，TEZ_JARS指向tez-0.8.2-minimal目录或者tez-0.8.2目录都是可以的。</span><br><span class="line"></span><br><span class="line">### 2.5. 让Hive把Tez用起来</span><br><span class="line">- 配置整合</span><br><span class="line">临时配置</span><br></pre></td></tr></table></figure></p><p>hive&gt;set hive.execution.engine=tez;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">或者修改hive-site.xml（长期配置）</span><br></pre></td></tr></table></figure></p><p> <property><br>   <name>hive.execution.engine</name><br>   <value>tez</value> </property><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 执行hive，验证查看</span><br></pre></td></tr></table></figure></p><p>hive&gt; select count(<em>) from dual;<br>Query ID = wulin_20160406152121_6fd704e7-a437-4345-9958-2fbd1cccb057<br>Total jobs = 1<br>Launching Job 1 out of 1<br>Number of reduce tasks determined at compile time: 1<br>In order to change the average load for a reducer (in bytes):<br>  set hive.exec.reducers.bytes.per.reducer=<number><br>In order to limit the maximum number of reducers:<br>  set hive.exec.reducers.max=<number><br>In order to set a constant number of reducers:<br>  set mapreduce.job.reduces=<number><br>Starting Job = job_1457012272029_352465, Tracking URL = <a href="http://lfh-R710-165:8088/proxy/application_1457012272029_352465/" target="_blank" rel="noopener">http://lfh-R710-165:8088/proxy/application_1457012272029_352465/</a><br>Kill Command = /opt/cloudera/parcels/CDH-5.4.4-1.cdh5.4.4.p0.4/lib/hadoop/bin/hadoop job  -kill job_1457012272029_352465<br>Hadoop job information for Stage-1: number of mappers: 1; number of reducers: 1<br>2016-04-06 15:21:29,925 Stage-1 map = 0%,  reduce = 0%<br>2016-04-06 15:21:38,274 Stage-1 map = 100%,  reduce = 0%, Cumulative CPU 2.05 sec<br>2016-04-06 15:21:45,611 Stage-1 map = 100%,  reduce = 100%, Cumulative CPU 3.86 sec<br>MapReduce Total cumulative CPU time: 3 seconds 860 msec<br>Ended Job = job_1457012272029_352465<br>MapReduce Jobs Launched:<br>Stage-Stage-1: Map: 1  Reduce: 1   Cumulative CPU: 3.86 sec   HDFS Read: 6138 HDFS Write: 2 SUCCESS<br>Total MapReduce CPU Time Spent: 3 seconds 860 msec<br>OK<br>1<br>Time taken: 35.934 seconds, Fetched: 1 row(s)<br>hive&gt; set hive.execution.engine=tez;<br>hive&gt; select count(</number></number></number></em>) from dual;<br>Query ID = wulin_20160406152222_426dd505-1f6a-4d02-ae95-5a4d0e6bbc76<br>Total jobs = 1<br>Launching Job 1 out of 1</p><h2 id="Status-Running-Executing-on-YARN-cluster-with-App-id-application-1457012272029-352467"><a href="#Status-Running-Executing-on-YARN-cluster-with-App-id-application-1457012272029-352467" class="headerlink" title="Status: Running (Executing on YARN cluster with App id application_1457012272029_352467)"></a>Status: Running (Executing on YARN cluster with App id application_1457012272029_352467)</h2><pre><code>    VERTICES      STATUS  TOTAL  COMPLETED  RUNNING  PENDING  FAILED  KILLED</code></pre><hr><p>Map 1 ……….   SUCCEEDED      1          1        0        0       0       0</p><h2 id="Reducer-2-……-SUCCEEDED-1-1-0-0-0-0"><a href="#Reducer-2-……-SUCCEEDED-1-1-0-0-0-0" class="headerlink" title="Reducer 2 ……   SUCCEEDED      1          1        0        0       0       0"></a>Reducer 2 ……   SUCCEEDED      1          1        0        0       0       0</h2><h2 id="VERTICES-02-02-gt-gt-100-ELAPSED-TIME-9-64-s"><a href="#VERTICES-02-02-gt-gt-100-ELAPSED-TIME-9-64-s" class="headerlink" title="VERTICES: 02/02  [==========================&gt;&gt;] 100%  ELAPSED TIME: 9.64 s     "></a>VERTICES: 02/02  [==========================&gt;&gt;] 100%  ELAPSED TIME: 9.64 s     </h2><p>OK<br>1<br>Time taken: 22.211 seconds, Fetched: 1 row(s)<br>hive&gt;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">如下图：</span><br><span class="line">![Hive on Tez](http://leocook-blog.test.upcdn.net/tez-ok.png &quot;Hive on Tez&quot;)</span><br><span class="line"></span><br><span class="line">到此，hive on tez，整合完毕！</span><br><span class="line"></span><br><span class="line">## 常见的错误</span><br><span class="line"></span><br><span class="line">### 1.不要使用sudo权限来编译（编译tez时的错误）</span><br></pre></td></tr></table></figure></p><p>[ERROR] Failed to execute goal org.codehaus.mojo:exec-maven-plugin:1.3.2:exec (Bower install) on project tez-ui: Command execution failed. Process exited with an error: 1 (Exit value: 1) -&gt; [Help 1]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">解决办法：</span><br><span class="line">不要使用root用户，也不要使用sudo来编译.</span><br><span class="line"></span><br><span class="line">### 2.maven插件frontend-maven-plugin的版本问题（编译tez时的错误）</span><br></pre></td></tr></table></figure></p><p>[ERROR] Failed to execute goal com.github.eirslett:frontend-maven-plugin:0.0.22:install-node-and-npm (install node and npm) on project tez-ui: Execution install node and npm of goal com.github.eirslett:frontend-maven-plugin:0.0.22:install-node-and-npm failed: A required class was missing while executing com.github.eirslett:frontend-maven-plugin:0.0.22:install-node-and-npm: org/slf4j/helpers/MarkerIgnoringBase<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">解决办法：强制执行编译时frontend-maven-plugin插件的版本（mvn clean package -DskipTests=true -Dmaven.javadoc.skip=true  -Dfrontend-maven-plugin.version=0.0.XX）</span><br><span class="line">如果maven的版本低于3.1，frontend-maven-plugin版本应该 &lt;= 0.0.22；</span><br><span class="line">如果maven的版本大于或等于3.1，frontend-maven-plugin版本应该 &gt;= 0.0.23.</span><br><span class="line"></span><br><span class="line">### 3.解压Node压缩包时错误（编译tez时的错误）</span><br></pre></td></tr></table></figure></p><p>[ERROR] Failed to execute goal com.github.eirslett:frontend-maven-plugin:0.0.22:install-node-and-npm (install node and npm) on project tez-ui: Could not extract the Node archive: Could not extract archive: ‘/home/…/tez/tez-ui/src/main/webapp/node_tmp/node.tar.gz’: EOFException -&gt; [Help 1]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">解决版本：检查第二个问题，并重新执行。如果还失败，可以多执行几次，可能和网络有关系。</span><br><span class="line"></span><br><span class="line">### 4.node&amp;npm版本不对应（编译tez时的错误）</span><br></pre></td></tr></table></figure></p><p>[ERROR] npm WARN engine hoek@2.16.3: wanted: {“node”:”&gt;=0.10.40”} (current: {“node”:”v0.10.18”,”npm”:”1.3.8”})<br>[ERROR] npm WARN engine boom@2.10.1: wanted: {“node”:”&gt;=0.10.40”} (current: {“node”:”v0.10.18”,”npm”:”1.3.8”})<br>[ERROR] npm WARN engine cryptiles@2.0.5: wanted: {“node”:”&gt;=0.10.40”} (current: {“node”:”v0.10.18”,”npm”:”1.3.8”})<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">解决办法：</span><br><span class="line">1. 安装正确版本的nodeJs；</span><br><span class="line">2. 修改tez-ui/pom.xml中的nodeVersion和npmVersion标签值为系统环境的值。可使用下面命令，查看系统里的node和npm版本：</span><br></pre></td></tr></table></figure></p><p>node —version<br>npm —version<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 5.缺少MR的依赖包（error when run hive on tez）</span><br></pre></td></tr></table></figure></p><p>Vertex failed, vertexName=Map 1, vertexId=vertex_1457012272029_352429_1_00, diagnostics=[Vertex vertex_1457012272029_352429_1_00 [Map 1] killed/failed due to:ROOT_INPUT_INIT_FAILURE, Vertex Input: dual initializer failed, vertex=vertex_1457012272029_352429_1_00 [Map 1], java.lang.NoClassDefFoundError: org/apache/hadoop/mapred/MRVersion<br>        at org.apache.hadoop.hive.shims.Hadoop23Shims.isMR2(Hadoop23Shims.java:843)<br>        at org.apache.hadoop.hive.shims.Hadoop23Shims.getHadoopConfNames(Hadoop23Shims.java:914)<br>        at org.apache.hadoop.hive.conf.HiveConf$ConfVars.<clinit>(HiveConf.java:356)<br>        at org.apache.hadoop.hive.ql.exec.Utilities.getBaseWork(Utilities.java:371)<br>        at org.apache.hadoop.hive.ql.exec.Utilities.getMapWork(Utilities.java:296)<br>        at org.apache.hadoop.hive.ql.exec.tez.HiveSplitGenerator.initialize(HiveSplitGenerator.java:106)<br>        at org.apache.tez.dag.app.dag.RootInputInitializerManager$InputInitializerCallable$1.run(RootInputInitializerManager.java:278)<br>        at org.apache.tez.dag.app.dag.RootInputInitializerManager$InputInitializerCallable$1.run(RootInputInitializerManager.java:269)<br>        at java.security.AccessController.doPrivileged(Native Method)<br>        at javax.security.auth.Subject.doAs(Subject.java:415)<br>        at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1628)<br>        at org.apache.tez.dag.app.dag.RootInputInitializerManager$InputInitializerCallable.call(RootInputInitializerManager.java:269)<br>        at org.apache.tez.dag.app.dag.RootInputInitializerManager$InputInitializerCallable.call(RootInputInitializerManager.java:253)<br>        at java.util.concurrent.FutureTask.run(FutureTask.java:262)<br>        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)<br>        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)<br>        at java.lang.Thread.run(Thread.java:745)<br>Caused by: java.lang.ClassNotFoundException: org.apache.hadoop.mapred.MRVersion<br>        at java.net.URLClassLoader$1.run(URLClassLoader.java:366)<br>        at java.net.URLClassLoader$1.run(URLClassLoader.java:355)<br>        at java.security.AccessController.doPrivileged(Native Method)<br>        at java.net.URLClassLoader.findClass(URLClassLoader.java:354)<br>        at java.lang.ClassLoader.loadClass(ClassLoader.java:425)<br>        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)<br>        at java.lang.ClassLoader.loadClass(ClassLoader.java:358)<br>        … 17 more<br>]<br>Vertex killed, vertexName=Reducer 2, vertexId=vertex_1457012272029_352429_1_01, diagnostics=[Vertex received Kill in INITED state., Vertex vertex_1457012272029_352429_1_01 [Reducer 2] killed/failed due to:OTHER_VERTEX_FAILURE]<br>DAG did not succeed due to VERTEX_FAILURE. failedVertices:1 killedVertices:1<br>FAILED: Execution Error, return code 2 from org.apache.hadoop.hive.ql.exec.tez.TezTask<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">这个错误是在配置完之后，运行hive时才会出现的。</span><br><span class="line">解决办法：</span><br><span class="line">拷贝mr依赖包至tez的hdfs目录中。笔者的环境是CDH5.4.4，所以把hadoop-mapreduce-client-common-2.6.0-cdh5.4.4.jar拷贝到hdfs的/tmp/tez-dir/tez-0.8.2-minimal目录，就解决问题了。</span><br><span class="line"></span><br><span class="line">### 6.tez&amp;hive on oozie 错误</span><br></pre></td></tr></table></figure></clinit></p><p>Status: Running (Executing on YARN cluster with App id application_1461470184587_0770)</p><p>Map 1: -/-    Reducer 2: 0/1<br>Status: Failed<br>Vertex failed, vertexName=Map 1, vertexId=vertex_1461470184587_0770_1_00, diagnostics=[Vertex vertex_1461470184587_0770_1_00 [Map 1] killed/failed due to:ROOT_INPUT_INIT_FAILURE, Vertex Input: wl_manager_core_assembly initializer failed, vertex=vertex_1461470184587_0770_1_00 [Map 1], java.lang.IllegalArgumentException: Illegal Capacity: -1<br>    at java.util.ArrayList.<init>(ArrayList.java:142)<br>    at org.apache.hadoop.mapred.FileInputFormat.getSplits(FileInputFormat.java:330)<br>    at org.apache.hadoop.hive.ql.io.HiveInputFormat.addSplitsForGroup(HiveInputFormat.java:306)<br>    at org.apache.hadoop.hive.ql.io.HiveInputFormat.getSplits(HiveInputFormat.java:408)<br>    at org.apache.hadoop.hive.ql.exec.tez.HiveSplitGenerator.initialize(HiveSplitGenerator.java:129)<br>    at org.apache.tez.dag.app.dag.RootInputInitializerManager$InputInitializerCallable$1.run(RootInputInitializerManager.java:278)<br>    at org.apache.tez.dag.app.dag.RootInputInitializerManager$InputInitializerCallable$1.run(RootInputInitializerManager.java:269)<br>    at java.security.AccessController.doPrivileged(Native Method)<br>    at javax.security.auth.Subject.doAs(Subject.java:415)<br>    at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1671)<br>    at org.apache.tez.dag.app.dag.RootInputInitializerManager$InputInitializerCallable.call(RootInputInitializerManager.java:269)<br>    at org.apache.tez.dag.app.dag.RootInputInitializerManager$InputInitializerCallable.call(RootInputInitializerManager.java:253)<br>    at java.util.concurrent.FutureTask.run(FutureTask.java:262)<br>    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)<br>    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)<br>    at java.lang.Thread.run(Thread.java:745)<br>]<br>Vertex killed, vertexName=Reducer 2, vertexId=vertex_1461470184587_0770_1_01, diagnostics=[Vertex received Kill in INITED state., Vertex vertex_1461470184587_0770_1_01 [Reducer 2] killed/failed due to:OTHER_VERTEX_FAILURE]<br>DAG did not succeed due to VERTEX_FAILURE. failedVertices:1 killedVertices:1<br>FAILED: Execution Error, return code 2 from org.apache.hadoop.hive.ql.exec.tez.TezTask<br>Intercepting System.exit(2)<br>Failing Oozie Launcher, Main class [org.apache.oozie.action.hadoop.HiveMain], exit code [2]<br>```</init></p><p>参考链接：<br><a href="http://m.oschina.net/blog/421764" target="_blank" rel="noopener">http://m.oschina.net/blog/421764</a><br><a href="http://duguyiren3476.iteye.com/blog/2214549" target="_blank" rel="noopener">http://duguyiren3476.iteye.com/blog/2214549</a><br><a href="https://cwiki.apache.org/confluence/display/TEZ/Build+errors+and+solutions" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/TEZ/Build+errors+and+solutions</a></p>]]></content>
      
      
      <categories>
          
          <category> tez </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hadoop tez hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tez系列第一篇-基础常识</title>
      <link href="/2016/04/01/tez-2016-04-01-Tez%E7%B3%BB%E5%88%97%E7%AC%AC%E4%B8%80%E7%AF%87-%E5%9F%BA%E7%A1%80%E5%B8%B8%E8%AF%86/"/>
      <url>/2016/04/01/tez-2016-04-01-Tez%E7%B3%BB%E5%88%97%E7%AC%AC%E4%B8%80%E7%AF%87-%E5%9F%BA%E7%A1%80%E5%B8%B8%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>本文主要围绕着这么几个问题来展开：Tez是什么？为什么要有Tez？Tez能解决什么问题？</p><h2 id="1-Tez是什么"><a href="#1-Tez是什么" class="headerlink" title="1.Tez是什么"></a>1.Tez是什么</h2><h3 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1.介绍"></a>1.1.介绍</h3><p>Tez目标是用来构建复杂的有向五环图数据处理程序。Tez项目目前是构建在YARN之上的。详情可以查看Tez的官网：<a href="http://tez.apache.org/" target="_blank" rel="noopener">http://tez.apache.org/</a></p><h3 id="1-2-两大优势"><a href="#1-2-两大优势" class="headerlink" title="1.2.两大优势"></a>1.2.两大优势</h3><p><strong>用户体验</strong>    </p><ul><li>使用API来自定义数据流    </li><li>灵活的Input-Processor-Output运行模式    </li><li>与计算的数据类型无关    </li><li>简单的部署流程    </li></ul><p><strong>计算性能</strong>    </p><ul><li>性能高于MapReduce    </li><li>资源管理更加优化    </li><li>运行时配置预加载    </li><li>物理数据流动态运行    </li></ul><p><strong>举例</strong><br>下图是一个基于MR的Hive/Pig的DAG数据流处理过程:<br><img src="http://leocook-blog.test.upcdn.net/tez01-PigHiveQueryOnMR.png" alt="Hive/Pig" title="Hive/Pig的DAG"></p><p>下图是一个基于Tez的Hive/Pig的DAG数据流处理过程:<br><img src="http://leocook-blog.test.upcdn.net/tez02-PigHiveQueryOnTez.png" alt="Hive/Pig" title="Hive/Pig的DAG"></p><h2 id="2-为什么要有Tez"><a href="#2-为什么要有Tez" class="headerlink" title="2.为什么要有Tez"></a>2.为什么要有Tez</h2><h3 id="2-1-YARN的AM"><a href="#2-1-YARN的AM" class="headerlink" title="2.1.YARN的AM"></a>2.1.YARN的AM</h3><p>YARN的每个作业在执行前都会先创建一个AM，然后才会开始正真的计算。这样处理小作业的时候，会有较大的延迟，而且还会造成极大的性能浪费。</p><h3 id="2-2-YARN的资源无法重用"><a href="#2-2-YARN的资源无法重用" class="headerlink" title="2.2.YARN的资源无法重用"></a>2.2.YARN的资源无法重用</h3><p>在MR1中，用户可以开启JVM重用，用来降低作业延迟。<br>但是在YARN中，每个作业的AM会先向RM申请资源（Container），申请到资源之后开始运行作业，作业处理完成后释放资源，期间没有资源重新利用的环节。这样会使作业大大的延迟。</p><h3 id="2-3-YARN的DAG中间计算结果读写效率低下"><a href="#2-3-YARN的DAG中间计算结果读写效率低下" class="headerlink" title="2.3.YARN的DAG中间计算结果读写效率低下"></a>2.3.YARN的DAG中间计算结果读写效率低下</h3><p>可以查看1.2中的图“<strong>基于MR的Hive/Pig的DAG数据流处理过程</strong>”，可以看出图中的每一节点都是把结果写到一个中间存储（HDFS/S3）中，下个节点从中间存储读取数据，再来继续接下来的计算。可见中间存储的读写性能对整个DAG的性能影响是很大的。<br>如果使用Tez，则可以省去中间存储的读写，上个节点的输出可以直接重定向到下个节点的输入。</p><h2 id="3-Tez能解决什么问题"><a href="#3-Tez能解决什么问题" class="headerlink" title="3.Tez能解决什么问题"></a>3.Tez能解决什么问题</h2><h3 id="3-1-使用AM缓冲池实现AM的复用，AMPoolServer"><a href="#3-1-使用AM缓冲池实现AM的复用，AMPoolServer" class="headerlink" title="3.1.使用AM缓冲池实现AM的复用，AMPoolServer"></a>3.1.使用AM缓冲池实现AM的复用，AMPoolServer</h3><p>使用Tez后，yarn的作业不是先提交给RM了，而是提交给AMPS。AMPS在启动后，会预先创建若干个AM，作为AM资源池，当作业被提交到AMPS的时候，AMPS会把该作业直接提交到AM上，这样就避免每个作业都创建独立的AM，大大的提高了效率。</p><h3 id="3-2-Container预启动"><a href="#3-2-Container预启动" class="headerlink" title="3.2.Container预启动"></a>3.2.Container预启动</h3><p>AM缓冲池中的每个AM在启动时都会预先创建若干个container，以此来减少因创建container所话费的时间。</p><h3 id="3-3-Container重用"><a href="#3-3-Container重用" class="headerlink" title="3.3.Container重用"></a>3.3.Container重用</h3><p>每个任务运行完之后，AM不会立马释放Container，而是将它分配给其它未执行的任务。<br>看到这里， Tez是什么？为什么要有Tez？Tez能解决什么问题？应该都知道了吧！下一篇来开始讲解正式环境中的使用。</p>]]></content>
      
      
      <categories>
          
          <category> tez </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hadoop tez </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadoop优化-yarn</title>
      <link href="/2016/03/13/hadoop-2016-03-13-hadoop%E4%BC%98%E5%8C%96-yarn/"/>
      <url>/2016/03/13/hadoop-2016-03-13-hadoop%E4%BC%98%E5%8C%96-yarn/</url>
      
        <content type="html"><![CDATA[<p>集群优化这块一直是一个比较麻烦的事情，目前由于集群的资源分配问题，已经出现了几次作业故障，有必要好这块的东西重新梳理一下。经过３天的测试，最终找到了对于目前环境相对适合的参数，目前集群已经11*24无节点故障了，先在这里做一些简单的分享吧。</p><h1 id="1-之前的集群存在的问题"><a href="#1-之前的集群存在的问题" class="headerlink" title="1.之前的集群存在的问题"></a>1.之前的集群存在的问题</h1><h2 id="1-1-问题一：作业的执行速率不同步"><a href="#1-1-问题一：作业的执行速率不同步" class="headerlink" title="1.1.问题一：作业的执行速率不同步"></a>1.1.问题一：作业的执行速率不同步</h2><ul><li>问题表现<br>部分任务跑的慢，部分任务跑得快。</li><li>问题的原因<br>集群资源分配不合理，出现有低配的机器运行作业数较多，高配机器运行作业数较少的情况。</li><li>解决办法<br>重新分配角色组，使得低配机器参与相对较少的计算，高配机器参与相对较多的计算。</li></ul><h2 id="1-2-问题二：资源利用倾斜"><a href="#1-2-问题二：资源利用倾斜" class="headerlink" title="1.2.问题二：资源利用倾斜"></a>1.2.问题二：资源利用倾斜</h2><ul><li>问题表现<br>部分机器资源利用率极高，部分机器资源利用率级低；</li><li>问题的原因<br><strong>同【问题一】</strong></li><li>解决办法<br><strong>同【问题一】</strong></li></ul><h2 id="1-3-问题三：集群资源并没有真正的参与计算"><a href="#1-3-问题三：集群资源并没有真正的参与计算" class="headerlink" title="1.3.问题三：集群资源并没有真正的参与计算"></a>1.3.问题三：集群资源并没有真正的参与计算</h2><ul><li>问题表现<br>作业个数较多的时候，出现集群资源分配完了，但是集群负载极低，作业执行极缓慢。</li><li>问题的原因<br>咱们的ETL结果报表使用的是单节点mysql，大量的小文件写操作使得磁盘的IO成为了严重的性能瓶颈，所以每个导数据的任务执行的较缓慢，导数据的作业长时间占用计算资源，计算任务执行的较为缓慢。</li><li>解决办法<br>a). 把mysql中的数据库存到不同的磁盘上的，降低单个磁盘的负载。<br>b). 减少单个任务的资源占用，提高集群的并行度。</li></ul><h1 id="2-集群资源重新划分的过程"><a href="#2-集群资源重新划分的过程" class="headerlink" title="2.集群资源重新划分的过程"></a>2.集群资源重新划分的过程</h1><h2 id="2-1-拿到集群中所有机器的硬件资源列表"><a href="#2-1-拿到集群中所有机器的硬件资源列表" class="headerlink" title="2.1.拿到集群中所有机器的硬件资源列表"></a>2.1.拿到集群中所有机器的硬件资源列表</h2><p>感谢运维同学的帮助！</p><h2 id="2-2-根据集群资源，分组的大概情况如截图："><a href="#2-2-根据集群资源，分组的大概情况如截图：" class="headerlink" title="2.2.根据集群资源，分组的大概情况如截图："></a>2.2.根据集群资源，分组的大概情况如截图：</h2><p><img src="http://leocook-blog.test.upcdn.net/%E5%88%86%E7%BB%84%E5%88%97%E8%A1%A8.png" alt="服务器分组情况" title="根据机器硬件资源情况，服务器分组情况"><br>分组命名规则：<br><strong><em>NM</em></strong>: NodeManager；<br><strong><em>G01</em></strong>: Group01；<br><strong><em>C08</em></strong>: cpu是8核；<br><strong><em>M48</em></strong>: 内存是48GB。<br><strong><em>ZK</em></strong>: 机器上安装了ZK，如果没有这一项，默认该机器上只安装了HbaseRegion Server、HDFS DataNode、Impala Daemon和Yarn NodeManager这四个角色。（如果某台机器上只安装了一个测试的zk，则可忽略该角色的资源占用，若该角色占用资源较多，那么就应该把这台机器单独拿出来分组）</p><h2 id="2-3-资源划分的策略"><a href="#2-3-资源划分的策略" class="headerlink" title="2.3.资源划分的策略"></a>2.3.资源划分的策略</h2><p>根据机器上安装的服务，大概给服务做了如下的划分：</p><ul><li><p>安装有重要服务的机器，可参与计算<br>例如安装了OOZIE、ResourcesManager、NodeManager的节点，当它们故障时，对集群来说，将可能会是一场灾难，所以不让这些机器参与计算，保证这些服务的稳定。</p></li><li><p>安装有重要服务的机器，不参与计算<br>例如安装了FLUME、KAFKA或ZK的节点，由于它们本身就是可以配置分布式执行的，当其中一个服务出现故障时，对业务的影响是较小的，甚至没有。所以允许这些节点和参与计算的节点安装在同一台主机上。</p></li><li><p>只安装了存储和计算的机器<br>例如HbaseRegion Server、HDFS DataNode、Impala Daemon和Yarn NodeManager，不会因为一台机器的故障导致集群出现灾难。</p></li></ul><h2 id="2-4-具体的划分策略"><a href="#2-4-具体的划分策略" class="headerlink" title="2.4.具体的划分策略"></a>2.4.具体的划分策略</h2><h3 id="2-4-1-内存划分策略"><a href="#2-4-1-内存划分策略" class="headerlink" title="2.4.1.内存划分策略"></a>2.4.1.内存划分策略</h3><ul><li>yarn容器可直接管理的资源<br>主机中内存*0.8 - 7GB（Hbase）- 7GB（HDFS），具体根据集群规模，hdfs、hbase的环境来定。有的几点还安装了其它服务，具体需要观察集群环境。</li><li>单个任务可使用的任务资源<br>map任务划分1GB，reduce任务划分2GB，JVM虚拟机分别设置为他们70%。<h3 id="2-4-2-内存划分策略"><a href="#2-4-2-内存划分策略" class="headerlink" title="2.4.2.内存划分策略"></a>2.4.2.内存划分策略</h3></li><li>yarn容器可直接管理的资源<br>对于只安装了HRS、DN、ID、NM的节点，vcore总数设置为（cpu核数-1）的2倍，具体根据cpu的计算性能来定（减一时预留给系统的）。如果节点上安装了一些会消耗CPU的服务，那么就设置vcore总数为cpu核数/2。如果安装了一些对CPU消耗不是非常大的服务，例如ZK，那么就设置vcore总是为（cpu的核数-1）。</li><li>单个任务可使用的任务资源<br>1个vcore。<h1 id="3-mysql调优的过程"><a href="#3-mysql调优的过程" class="headerlink" title="3.mysql调优的过程"></a>3.mysql调优的过程</h1>不同的库，挂载在不同的磁盘上，减小单块盘的压力。</li></ul><h1 id="4-成果"><a href="#4-成果" class="headerlink" title="4.成果"></a>4.成果</h1><h2 id="4-1-集群表现情况"><a href="#4-1-集群表现情况" class="headerlink" title="4.1.集群表现情况"></a>4.1.集群表现情况</h2><p>到目前为止，已超过72小时NodeManager未出现过故障了，待考察一周。</p><h2 id="4-2-mysql表现情况"><a href="#4-2-mysql表现情况" class="headerlink" title="4.2.mysql表现情况"></a>4.2.mysql表现情况</h2><p>优化前的负载情况入下图：<br><img src="http://leocook-blog.test.upcdn.net/mysql_befor.png" alt="优化前" title="优化前负载情况"><br>优化后的负载情况入下图：<br><img src="http://leocook-blog.test.upcdn.net/mysql.png" alt="优化后" title="优化后负载情况"></p><blockquote><p>后端导数据速度有明显加快，但是SDA盘的负载还是明显略高于SDB的负载。</p></blockquote><h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h1><p>在摸索这个问题上花费了比较多的时间，目前的优化方案满足现在的业务场景。在集群优化这方边，在个人现在能看到的未来，还有很多可以优化的项。例如：</p><ul><li>Impala的资源管理未使用yarn，所以一直还没有开始使用；</li><li>OOZIE未做HA配置；</li><li>HDFS数据平衡效果不是很好；</li><li>CPU一个线程做两个vcore使用，压力还是比较大的。</li></ul><p>在接下，将会按照优先级逐一解决。</p>]]></content>
      
      
      <categories>
          
          <category> hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hadoop 集群优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadoop优化-概述</title>
      <link href="/2015/02/23/hadoop-2016-02-23-hadoop%E4%BC%98%E5%8C%96-%E6%A6%82%E8%BF%B0/"/>
      <url>/2015/02/23/hadoop-2016-02-23-hadoop%E4%BC%98%E5%8C%96-%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<p>这篇文章是我开始涉及做集群相关优化时的第一篇笔记，内容比较浅显易懂，适合想了解集群优化的朋友阅读。</p><h2 id="1-应用程序角度进行优化"><a href="#1-应用程序角度进行优化" class="headerlink" title="1.应用程序角度进行优化"></a>1.应用程序角度进行优化</h2><h3 id="1-1-减少不必要的reduce任务"><a href="#1-1-减少不必要的reduce任务" class="headerlink" title="1.1.减少不必要的reduce任务"></a>1.1.减少不必要的reduce任务</h3><p>若对于同一份数据需要多次处理，可以尝试先排序、分区，然后自定义InputSplit将某一个分区作为一个Map的输入，在Map中处理数据，将Reduce的个数设置为空。</p><h3 id="1-2-外部文件引用"><a href="#1-2-外部文件引用" class="headerlink" title="1.2.外部文件引用"></a>1.2.外部文件引用</h3><p>如字典、配置文件等需要在Task之间共享的数据，可使用分布式缓存DistributedCache或者使用-files</p><h3 id="1-3-使用Combiner"><a href="#1-3-使用Combiner" class="headerlink" title="1.3.使用Combiner"></a>1.3.使用Combiner</h3><p>combiner是发生在map端的，作用是归并Map端输出的文件，这样Map端输出的数据量就小了，减少了Map端和reduce端间的数据传输。需要注意的是，Combiner不能影响作业的结果;不是每个MR都可以使用Combiner的，需要根据具体业务来定;Combiner是发生在Map端的，不能垮Map来执行（只有Reduce可以接收多个Map任务的输出数据）</p><h3 id="1-4-使用合适的Writable类型"><a href="#1-4-使用合适的Writable类型" class="headerlink" title="1.4.使用合适的Writable类型"></a>1.4.使用合适的Writable类型</h3><p>尽可能使用二进制的Writable类型，例如：IntWritable， FloatWritable等，而不是Text。因为在一个批处理系统中将数值转换为文本时低效率的。使用二进制的Writable类型可以降低cpu资源的消耗，也可以减少Map端中间数据、结果数据占用的空间。</p><h3 id="1-5-尽可能的少创建新的Java对象"><a href="#1-5-尽可能的少创建新的Java对象" class="headerlink" title="1.5.尽可能的少创建新的Java对象"></a>1.5.尽可能的少创建新的Java对象</h3><p>a)需要注意的Writable对象，例如下面的写法：</p><pre><code>public void map(...) {…for (String word : words) {    output.collect(new Text(word), new IntWritable(1));}</code></pre><p>}</p><p>这样会冲去创建对象new Text(word)和new IntWritable(1))，这样可能会产生海量的短周期对象。更高效的写法见下：</p><pre><code>class MyMapper … {Text wordText = new Text();IntWritable one = new IntWritable(1);public void map(...) {    for (String word: words) {    wordText.set(word);        output.collect(wordText, one);    }}</code></pre><p>}</p><p>b)对于可变字符串，使用StringBuffer而不是String</p><p>String类是经过final修饰的，那么每次对它的修改都会产生临时对象，而SB则不会。</p><h2 id="2-Linux系统层面上的配置调优"><a href="#2-Linux系统层面上的配置调优" class="headerlink" title="2. Linux系统层面上的配置调优"></a>2. Linux系统层面上的配置调优</h2><h3 id="2-1-文件系统的配置"><a href="#2-1-文件系统的配置" class="headerlink" title="2.1. 文件系统的配置"></a>2.1. 文件系统的配置</h3><p>a) 关闭文件在被操作时会记下时间戳:noatime和nodiratime<br>b) 选择I/O性能较好的文件系统（Hadoop比较依赖本地的文件系统） </p><h3 id="2-2-Linux文件系统预读缓冲区大小"><a href="#2-2-Linux文件系统预读缓冲区大小" class="headerlink" title="2.2. Linux文件系统预读缓冲区大小"></a>2.2. Linux文件系统预读缓冲区大小</h3><p>命令:</p><pre><code>blockdev</code></pre><h3 id="2-3-去除RAID和LVM"><a href="#2-3-去除RAID和LVM" class="headerlink" title="2.3. 去除RAID和LVM"></a>2.3. 去除RAID和LVM</h3><h3 id="2-4-增大同时打开的文件数和网络连接数"><a href="#2-4-增大同时打开的文件数和网络连接数" class="headerlink" title="2.4. 增大同时打开的文件数和网络连接数"></a>2.4. 增大同时打开的文件数和网络连接数</h3><p>ulimit net.core.somaxconn</p><pre><code>ulimit net.core.somaxconn</code></pre><h3 id="2-5-关闭swap分区"><a href="#2-5-关闭swap分区" class="headerlink" title="2.5. 关闭swap分区"></a>2.5. 关闭swap分区</h3><p>在Hadoop中，对于每个作业处理的数据量和每个Task中用到的各种缓冲，用户都是完全可控的。</p><pre><code>/etc/sysctl.conf</code></pre><h3 id="2-6-I-O调度器选择"><a href="#2-6-I-O调度器选择" class="headerlink" title="2.6. I/O调度器选择"></a>2.6. I/O调度器选择</h3><p>详情见AMD的白皮书</p><h2 id="3-Hadoop平台内参数调优"><a href="#3-Hadoop平台内参数调优" class="headerlink" title="3. Hadoop平台内参数调优"></a>3. Hadoop平台内参数调优</h2><p>Hadoop相关可配置参数共有几百个，但是其中只有三十个左右会对其性能产生显著影响。</p><h3 id="3-1-计算资源优化"><a href="#3-1-计算资源优化" class="headerlink" title="3.1. 计算资源优化"></a>3.1. 计算资源优化</h3><p>a) 设置合理的slot（资源槽位）   </p><pre><code>mapred.tasktracker.map.tasks.maximum / mapred.tasktracker.reduce.tasks.maximum</code></pre><p>参数说明：每个TaskTracker上可并发执行的Map Task和Reduce Task数目<br>默认值：都是2<br>推荐值：根据具体的节点资源来看，推荐值是(core_per_node)/2~2*(cores_per_node)<br>单位：无   </p><h3 id="3-2-节点间的通信优化"><a href="#3-2-节点间的通信优化" class="headerlink" title="3.2. 节点间的通信优化"></a>3.2. 节点间的通信优化</h3><p><strong>a) TaskTracker和JobTracker之间的心跳间隔</strong><br>这个值太小的话，在一个大集群中会造成JobTracker需要处理高并发心跳，可能会有很大的压力。<br>建议集群规模小于300时，使用默认值3秒，在此基础上，集群规模每增加100台，会加1秒。<br><strong>b) 启用带外心跳(out-of-band heartbeat)</strong>   </p><pre><code>mapreduce.tasktracker.outofband.heartbeat</code></pre><p>参数说明：主要是为了减少任务分配延迟。它与常规心跳不同，一般的心跳是一定时间间隔发送的，而带外心跳是在任务运行结束或是失败时发送，这样就能在TaskTracker节点出现空闲资源的时候能第一时间通知JobTracker。   </p><h3 id="3-3-磁盘块的配置优化"><a href="#3-3-磁盘块的配置优化" class="headerlink" title="3.3. 磁盘块的配置优化"></a>3.3. 磁盘块的配置优化</h3><p>a) 作业相关的磁盘配置   </p><pre><code>mapred.local.dir</code></pre><p>参数说明：map本地计算时所用到的目录，建议配置在多块硬盘上<br>b) 存储相关的磁盘配置（HDFS数据存储）<br>dfs.data.dir<br>参数说明：HDFS的数据存储目录，建议配置在多块硬盘上，可提高整体IO性能<br>例如：   </p><pre><code>&lt;property&gt; &lt;name&gt;dfs.name.dir&lt;/name&gt; &lt;value&gt;/data1/hadoopdata/mapred/jt/,/data2/hadoopdata/mapred/jt/&lt;/value&gt;&lt;/property&gt;</code></pre><p>c) 存储相关的磁盘配置（HDFS元数据存储）</p><pre><code>dfs.name.dir</code></pre><p>参数说明：HDFS的元数据存储目录，建议设置多目录，每个多目录都可保存元数据的一个备份<br>注：要想提升hadoop整体IO性能，对于hadoop中用到的所有文件目录，都需要评估它磁盘IO的负载，对于IO负载可能会高的目录，最好都配置到多个磁盘上，以提示IO性能   </p><h3 id="3-4-RPC-Handler个数和Http线程数优化"><a href="#3-4-RPC-Handler个数和Http线程数优化" class="headerlink" title="3.4. RPC Handler个数和Http线程数优化"></a>3.4. RPC Handler个数和Http线程数优化</h3><p>a) RPC Handler个数</p><pre><code>mapred.job.tracker.handler.count</code></pre><p>参数说明：JobTracker需要并发的处理来自各个TaskTracker的RPC请求，可根据集群规模和并发数来调整RPC Handler的个数。<br>默认值：10<br>推荐值：60-70，最少要是TaskTracker个数的4%<br>单位：无<br>b) Http线程数<br><br>tasktracker.http.threads</p><p>在Shuffle阶段，Reduce Task会通过Http请求从各个TaskTracker上读取Map Task的结果，TaskTracker是使用Jetty Server来提供服务的，这里可适量调整Jetty Server的工作线程以提高它的并发处理能力。<br>默认值：40<br>推荐值：50-80+   </p><h3 id="3-5-选择合适的压缩算法"><a href="#3-5-选择合适的压缩算法" class="headerlink" title="3.5. 选择合适的压缩算法"></a>3.5. 选择合适的压缩算法</h3><pre><code>mapred.compress.map.output / Mapred.output.compress</code></pre><p>map输出的中间结果时需要进行压缩的，指定压缩方式<strong>（Mapred.compress.map.output.codec/ Mapred.output.compress.codec）</strong>。推荐使用LZO压缩。</p><h3 id="3-6-启用批量任务调度-现在新版本都默认支持了"><a href="#3-6-启用批量任务调度-现在新版本都默认支持了" class="headerlink" title="3.6. 启用批量任务调度(现在新版本都默认支持了)"></a>3.6. 启用批量任务调度(现在新版本都默认支持了)</h3><p>a) Fair Scheduler</p><pre><code>mapred.fairscheduler.assignmultiple</code></pre><p>b) Capacity Scheduler</p><h3 id="3-7-启用预读机制-Apache暂时没有"><a href="#3-7-启用预读机制-Apache暂时没有" class="headerlink" title="3.7. 启用预读机制(Apache暂时没有)"></a>3.7. 启用预读机制(Apache暂时没有)</h3><p>Hadoop是顺序读，所以预读机制可以很明显的提高HDFS的读性能。<br>HDFS预读：</p><pre><code>dfs.datanode.readahead ：truedfs.datanode.readahead.bytes ：4MB</code></pre><p>shuffle预读</p><pre><code>mapred.tasktracker.shuffle.fadvise : truemapred.tasktracker.shuffle.readahead.bytes : 4MB</code></pre><h3 id="3-8-HDFS相关参数优化"><a href="#3-8-HDFS相关参数优化" class="headerlink" title="3.8.HDFS相关参数优化"></a>3.8.HDFS相关参数优化</h3><p>1) dfs.replication<br>参数说明：hdfs文件副本数<br>默认值：3<br>推荐值：3-5（对于IO较为密集的场景可适量增大）<br>单位：无<br>2) dfs.blocksize<br>参数说明：<br>默认值：67108864(64MB)<br>推荐值：稍大型集群建议设为128MB(134217728)或256MB(268435456)<br>单位：无<br>3) dfs.datanode.handler.count<br>参数说明：DateNode上的服务线程数<br>默认值：10<br>推荐值：<br>单位：无<br>4) fs.trash.interval<br>参数说明：HDFS文件删除后会移动到垃圾箱，该参数时清理垃圾箱的时间<br>默认值：0<br>推荐值：1440(1day)<br>单位：无<br>5) io.sort.factor<br>参数说明：当一个map task执行完之后，本地磁盘上(mapred.local.dir)有若干个spill文件，map task最后做的一件事就是执行merge sort，把这些spill文件合成一个文件（partition）。执行merge sort的时候，每次同时打开多少个spill文件由该参数决定。打开的文件越多，不一定merge sort就越快，所以要根据数据情况适当的调整。<br>默认值：10<br>推荐值：<br>单位：无<br>6) mapred.child.java.opts<br>参数说明：JVM堆的最大可用内存<br>默认值：-Xmx200m<br>推荐值：-Xmx1G | -Xmx4G | -Xmx8G<br>单位：-Xmx8589934592也行，单位不固定<br>7) io.sort.mb<br>参数说明：Map Task的输出结果和元数据在内存中占的buffer总大小，当buffer达到一定阀值时，会启动一个后台进程来对buffer里的内容进行排序，然后写入本地磁盘，形成一个split小文件<br>默认值：100<br>推荐值：200 | 800<br>单位：兆<br>8) io.sort.spill.percent<br>参数说明：即io.sort.mb中所说的阀值<br>默认值：0.8<br>推荐值：0.8<br>单位：无<br>9) io.sort.record<br>参数说明：io.sort.mb中分类给元数据的空间占比<br>默认值：0.05<br>推荐值：0.05<br>单位：无<br>10) Mapred.reduce.parallel<br>参数说明：Reduce shuffle阶段copier线程数。默认是5，对于较大集群，可调整为16~25<br>默认值：5<br>推荐值：16~25<br>单位：无   </p><h2 id="4-系统实现角度调优"><a href="#4-系统实现角度调优" class="headerlink" title="4.系统实现角度调优"></a>4.系统实现角度调优</h2><p><a href="https://www.xiaohui.org/archives/944.html" target="_blank" rel="noopener">https://www.xiaohui.org/archives/944.html</a></p><p>主要针对HDFS进行优化，HDFS性能低下的两个原因：调度延迟和可移植性</p><h3 id="4-1-调度延迟"><a href="#4-1-调度延迟" class="headerlink" title="4.1. 调度延迟"></a>4.1. 调度延迟</h3><p>关于调度延迟主要是发生在两个阶段：<br>a) tasktracker上出现空余的slot到该tasktracker接收到新的task；<br>b) tasktracker获取到了新的Task后，到连接上了datanode，并且可以读写数据。<br>之所以说这两个阶段不够高效，因为一个分布式计算系统需要解决的是计算问题，如果把过多的时间花费在其它上，就显得很不合适，例如线程等待、高负荷的数据传输。<br>下面解释下会经历上边两个阶段发生的过程：<br>a) 当tasktracker上出现slot时，他会调用heartbeat方法向jobtracker发送心跳包（默认时间间隔是3秒，集群很大时可适量调整）来告知它，假设此时有准备需要执行的task，那么jobtracker会采用某种调度机制（调度机制很重要，是一个可以深度研究的东东）选择一个Task，然后通过调用heartbeat方法发送心跳包告知tasktracker。在该过程中，HDFS一直处于等待状态，这就使得资源利用率不高。<br>b) 这个过程中所发生的操作都是串行化的<br>tasktracker会连接到namenode上获取到自己需要的数据在datanode上的存储情况，然后再从datanode上读数据，在该过程中，HDFS一直处于等待状态，这就使得资源利用率不高。<br>若能减短hdfs的等待时间;在执行task之前就开始把数据读到将要执行该task的tasktracker上，减少数据传输时间，那么将会显得高效很多。未解决此类问题，有这样几种解决方案：重叠I/O和CPU阶段（pipelining），task预取（task prefetching），数据预取（data prefetching）等。   </p><h3 id="4-2-可移植性"><a href="#4-2-可移植性" class="headerlink" title="4.2. 可移植性"></a>4.2. 可移植性</h3><p>Hadoop是Java写的，所以可移植性相对较高。由于它屏蔽了底层文件系统，所以无法使用底层api来优化数据的读写。在活跃度较高的集群里（例如共享集群），大量并发读写会增加磁盘的随机寻道时间，这会降低读写效率;在大并发写的场景下，还会增加大量的磁盘碎片，这样将会大大的增加了读数据的成本，hdfs更适合文件顺序读取。<br>对于上述问题，可以尝试使用下面的解决方案：   </p><blockquote><p>tasktracker现在的线程模型是：one thread per client，即每个client连接都是由一个线程处理的（包括接受请求、处理请求，返回结果）。那么这一块一个拆分成两个部分来做，一组线程来处理和client的通信（Client Threads），一组用于数据的读写（Disk Threads）。   </p></blockquote><p>想要解决上述两个问题，暂时没有十全十美的办法，只能尽可能的权衡保证调度延迟相对较低+可移植性相对较高。   </p><h3 id="4-3-优化策略：Prefetching与preshuffling"><a href="#4-3-优化策略：Prefetching与preshuffling" class="headerlink" title="4.3. 优化策略：Prefetching与preshuffling"></a>4.3. 优化策略：Prefetching与preshuffling</h3><ul><li><p>a) Prefetching包括Block-intra prefetching和Block-inter prefetching<br><strong>Block-intra prefetching：</strong>对block内部数据处理方式进行了优化，即一边进行计算，一边预读将要用到的数据。这种方式需要解决两个难题：一个是计算和预取同步，另一个是确定合适的预取率。前者可以使用进度条（processing bar）的概念，进度条主要是记录计算数据和预读数据的进度，当同步被打破时发出同步失效的通知。后者是要根据实际情况来设定，可采用重复试验的方法来确定。<br><strong>Block-inter prefetching：</strong>在block层面上预读数据，在某个Task正在处理数据块A1的时候，预测器能预测接下来将要读取的数据块A2、A3、A4，然后把数据块A2、A3、A4预读到Task所在的rack上。   </p></li><li><p>b) preshuffling<br>数据被map task处理之前，由预测器判断每条记录将要被哪个reduce task处理，将这些数据交给靠近reduce task的map task来处理。   </p></li></ul><p><strong>参考资料：</strong>   </p><ul><li>cloudera官方文档<br><a href="http://blog.cloudera.com/blog/2009/12/7-tips-for-improving-mapreduce-performance/" target="_blank" rel="noopener">http://blog.cloudera.com/blog/2009/12/7-tips-for-improving-mapreduce-performance/</a>   </li><li><p>AMD白皮书(较为实用)<br><a href="http://www.admin-magazine.com/HPC/content/download/9408/73372/file/Hadoop_Tuning_Guide-Version5.pdf" target="_blank" rel="noopener">http://www.admin-magazine.com/HPC/content/download/9408/73372/file/Hadoop_Tuning_Guide-Version5.pdf</a></p></li><li><p>国内博客（大部分内容都是AMD白皮书上的翻译）：<br><a href="http://dongxicheng.org/mapreduce/hadoop-optimization-0/" target="_blank" rel="noopener">http://dongxicheng.org/mapreduce/hadoop-optimization-0/</a><br><a href="http://dongxicheng.org/mapreduce/hadoop-optimization-1/" target="_blank" rel="noopener">http://dongxicheng.org/mapreduce/hadoop-optimization-1/</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集群优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tomcat6集群配置</title>
      <link href="/2014/05/28/WebService-2014-05-28-tomcat6%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE/"/>
      <url>/2014/05/28/WebService-2014-05-28-tomcat6%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="1-概要"><a href="#1-概要" class="headerlink" title="1.概要"></a>1.概要</h1><p>web容器在做集群配置时，有3点需要注意</p><ul><li>负载均衡配置；</li><li>session共享；</li><li>若做的是单机集群（多个tomcat安装在同一台机器上），需要注意端口冲突问题。</li></ul><p><strong>环境</strong></p><ul><li>tomcat6</li><li>apache</li><li>mod_jk-1.2.28-httpd-2.2.3.so</li></ul><h1 id="2-Apache配置"><a href="#2-Apache配置" class="headerlink" title="2.Apache配置"></a>2.Apache配置</h1><p>在本案例中是使用Apache来做的，下边用到的mod模块和Apache版本需要兼容才行。文中所使用的软件，会在文章底部附上下载链接。</p><h2 id="2-1-http-conf配置修改"><a href="#2-1-http-conf配置修改" class="headerlink" title="2.1.http.conf配置修改"></a>2.1.http.conf配置修改</h2><p>在apache安装目录的conf目录下，修改http.conf配置文件，在任意某一行加入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Include conf/mod_jk.conf</span><br></pre></td></tr></table></figure><p>修改Apache监听端口（在文件的第46行左右）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Listen 90</span><br></pre></td></tr></table></figure><h2 id="2-2-mod-jk-conf配置修改"><a href="#2-2-mod-jk-conf配置修改" class="headerlink" title="2.2.mod_jk.conf配置修改"></a>2.2.mod_jk.conf配置修改</h2><p>在conf目录下新建文件mod_jk.conf，写入如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#加载mod_jk Module  把mod_jk-1.2.28-httpd-2.2.3.so放到相应的目录中</span><br><span class="line">LoadModule jk_module modules/mod_jk-1.2.28-httpd-2.2.3.so</span><br><span class="line">#指定 workers.properties文件路径</span><br><span class="line">JkWorkersFile conf/workers.properties</span><br><span class="line">#指定那些请求交给tomcat处理,&quot;controller&quot;为在workers.properties里指定的负载分配控制器</span><br><span class="line">JkMount /*.jsp  controller</span><br><span class="line">JkMount /*.action  controller</span><br></pre></td></tr></table></figure><p>其中，mod_jk-1.2.28-httpd-2.2.3.so文件更具自己实际添加的模块文件名来写。</p><h2 id="2-3-workers-properties配置修改"><a href="#2-3-workers-properties配置修改" class="headerlink" title="2.3.workers.properties配置修改"></a>2.3.workers.properties配置修改</h2><p>在conf目录下新建文件workers.properties，写入如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">worker.list=controller,tomcat1,tomcat2</span><br><span class="line"></span><br><span class="line">#tomcat1</span><br><span class="line">worker.tomcat1.port=8109         #ajp13端口号在tomcat下server.xml配置,默认8009 默认与HTTP通信的协议</span><br><span class="line">worker.tomcat1.host=localhost     </span><br><span class="line">worker.tomcat1.type=ajp13          #tomcat的主机地址，如不为本机，请填写ip地址</span><br><span class="line">worker.tomcat1.lbfactor = 1       #server的加权比重，值越高，分得的请求越多</span><br><span class="line"></span><br><span class="line">#tomcat2</span><br><span class="line">worker.tomcat2.port=9109       </span><br><span class="line">worker.tomcat2.host=localhost </span><br><span class="line">worker.tomcat2.type=ajp13</span><br><span class="line">worker.tomcat2.lbfactor = 1  </span><br><span class="line"></span><br><span class="line">#========controller,负载均衡控制器========</span><br><span class="line">worker.controller.type=lb    </span><br><span class="line">worker.controller.balanced_workers=tomcat1,tomcat2    #指定分担请求的tomcat</span><br><span class="line">worker.controller.sticky_session=1</span><br></pre></td></tr></table></figure><p>其中tomcat上ajp13协议通信端口需要根据具体的设置区修改（ajp13协议在这里就是Apache与tomcat之间的通信协议）。</p><h1 id="3-Tomcat配置"><a href="#3-Tomcat配置" class="headerlink" title="3.Tomcat配置"></a>3.Tomcat配置</h1><h2 id="3-1-tomcat的关闭端口"><a href="#3-1-tomcat的关闭端口" class="headerlink" title="3.1 tomcat的关闭端口"></a>3.1 tomcat的关闭端口</h2><p>默认是8005，若同一台机器上配置了多个tomcat，这里必须要修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Server port=&quot;8005&quot; shutdown=&quot;SHUTDOWN&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="3-2-tomcat的服务端口"><a href="#3-2-tomcat的服务端口" class="headerlink" title="3.2.tomcat的服务端口"></a>3.2.tomcat的服务端口</h2><p>默认是8080，若同一台机器上配置了多个tomcat，这里必须要修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; </span><br><span class="line">               connectionTimeout=&quot;20000&quot; </span><br><span class="line">               redirectPort=&quot;8443&quot; /&gt;</span><br></pre></td></tr></table></figure><h2 id="3-3-AJP13通信端口"><a href="#3-3-AJP13通信端口" class="headerlink" title="3.3.AJP13通信端口"></a>3.3.AJP13通信端口</h2><p>tomcat上的AJP13协议通信端口：默认是8009，这里的端口配置需要和上边文件workers.properties中的AJP13协议端口配置相对应，若同一台机器上配置了多个tomcat，这里必须要修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&gt;</span><br></pre></td></tr></table></figure><h2 id="3-4-Session共享"><a href="#3-4-Session共享" class="headerlink" title="3.4.Session共享"></a>3.4.Session共享</h2><ul><li>在Tomcat中启用标签</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Cluster className=&quot;org.apache.catalina.ha.tcp.SimpleTcpCluster&quot;/&gt;</span><br></pre></td></tr></table></figure><ul><li>在web项目中的web.xml中加入</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;distributable/&gt;</span><br></pre></td></tr></table></figure><p>则这个项目就支持集群了。<br>到此，配置完毕。<br>下载链接： <a href="http://pan.baidu.com/s/1mgLq8Dq" target="_blank" rel="noopener">http://pan.baidu.com/s/1mgLq8Dq</a></p>]]></content>
      
      
      <categories>
          
          <category> WebService </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu常用配置</title>
      <link href="/2014/05/15/linux-2014-05-15-ubuntu%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
      <url>/2014/05/15/linux-2014-05-15-ubuntu%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>在使用ubuntu作为自己的开发环境时，可能会用到下面的这些小技巧哦！</p><h1 id="1-ubuntu-desktop接双显示器"><a href="#1-ubuntu-desktop接双显示器" class="headerlink" title="1.ubuntu desktop接双显示器"></a>1.ubuntu desktop接双显示器</h1><h2 id="1-1-环境"><a href="#1-1-环境" class="headerlink" title="1.1.环境"></a>1.1.环境</h2><ul><li>ubuntu12.04</li><li>Arandr</li></ul><h2 id="1-2-修改系统配置"><a href="#1-2-修改系统配置" class="headerlink" title="1.2.修改系统配置"></a>1.2.修改系统配置</h2><ul><li><p>编辑/etc/X11/xorg.conf文件    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/X11/xorg.conf</span><br></pre></td></tr></table></figure></li><li><p>在Section “Screen”内容之内增加以下内容    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SubSection &quot;Display&quot;</span><br><span class="line">Virtual 4000 3000</span><br><span class="line">EndSubSection</span><br></pre></td></tr></table></figure></li><li><p>重启xwindow</p></li></ul><p>方法一：快捷键是Ctrl + Alt + Backspace;(这个快捷键默认是关闭的，在快捷键设置中可以更改).</p><p>方法二：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo init 6</span><br></pre></td></tr></table></figure></p><h2 id="1-3-使用可视化软件Arandr"><a href="#1-3-使用可视化软件Arandr" class="headerlink" title="1.3.使用可视化软件Arandr"></a>1.3.使用可视化软件Arandr</h2><ul><li><p>安装Arandr    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install arandr</span><br></pre></td></tr></table></figure></li><li><p>打开查看各个主屏的名称<br><img src="http://leocook-blog.test.upcdn.net/arandr.png" alt="Arandr" title="Arandr"></p></li><li><p>设置对应的显示设备为主屏    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo xrandr --output CRT1 --primary</span><br></pre></td></tr></table></figure></li></ul><p>聪明的你一定会知道要设置LVDS为主显示器需要怎么做！Enjoy it！ </p><h1 id="2-最好用的终端"><a href="#2-最好用的终端" class="headerlink" title="2.最好用的终端"></a>2.最好用的终端</h1><p>Terminator<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install terminator</span><br></pre></td></tr></table></figure></p><h1 id="3-视频播放器SMPlay"><a href="#3-视频播放器SMPlay" class="headerlink" title="3.视频播放器SMPlay"></a>3.视频播放器SMPlay</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mplayer </span><br><span class="line">sudo apt-get install ffmpeg</span><br><span class="line">sudo apt-get install smplayer</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
